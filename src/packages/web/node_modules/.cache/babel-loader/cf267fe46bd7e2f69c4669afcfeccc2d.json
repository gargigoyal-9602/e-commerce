{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { Block } from '../../../framework/src/Block';\n\nvar SessionManagerBlock = /*#__PURE__*/function (_Block) {\n  _inherits(SessionManagerBlock, _Block);\n\n  var _super = _createSuper(SessionManagerBlock);\n\n  function SessionManagerBlock() {\n    var _this;\n\n    _classCallCheck(this, SessionManagerBlock);\n\n    _this = _super.call(this);\n    _this.sessionToken = void 0;\n    _this.sessionData = void 0;\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), [getName(MessageEnum.SessionRequestMessage), getName(MessageEnum.SessionSaveMessage)]);\n    return _this;\n  }\n\n  _createClass(SessionManagerBlock, [{\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(from, message) {\n        var uniqueSessionRequestId, sessionResponseMessage, sessionData, sessionToken;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runEngine.debugLog('SessionManagerBlock', 'Session Rquest Message' + JSON.stringify(message));\n\n                if (getName(MessageEnum.SessionRequestMessage) === message.id) {\n                  uniqueSessionRequestId = message.messageId;\n                  sessionResponseMessage = new Message(getName(MessageEnum.SessionResponseMessage));\n                  sessionResponseMessage.addData(getName(MessageEnum.SessionRequestedBy), uniqueSessionRequestId);\n\n                  if (this.isSessionValid()) {\n                    sessionResponseMessage.addData(getName(MessageEnum.SessionResponseData), this.getData());\n                    sessionResponseMessage.addData(getName(MessageEnum.SessionResponseToken), this.getToken());\n                  } else {\n                    sessionResponseMessage.addData(getName(MessageEnum.SessionResponseError), this.getError());\n                  }\n\n                  this.send(sessionResponseMessage);\n                } else if (getName(MessageEnum.SessionSaveMessage) === message.id) {\n                  sessionData = message.getData(getName(MessageEnum.SessionResponseData));\n                  sessionToken = message.getData(getName(MessageEnum.SessionResponseToken));\n                  this.saveSessionData(sessionToken, sessionData);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }, {\n    key: \"saveSessionData\",\n    value: function saveSessionData(sessionToken, sessionData) {\n      this.sessionToken = sessionToken;\n      this.sessionData = sessionData;\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return this.sessionToken;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.sessionData;\n    }\n  }, {\n    key: \"getError\",\n    value: function getError() {\n      return 'Session Expired';\n    }\n  }, {\n    key: \"isSessionValid\",\n    value: function isSessionValid() {\n      return true;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!SessionManagerBlock.instance) {\n        SessionManagerBlock.instance = new SessionManagerBlock();\n      }\n\n      return SessionManagerBlock.instance;\n    }\n  }]);\n\n  return SessionManagerBlock;\n}(Block);\n\nSessionManagerBlock.instance = void 0;\nexport { SessionManagerBlock as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/framework/src/Blocks/SessionManagerBlock.tsx"],"names":["MessageEnum","getName","runEngine","Message","Block","SessionManagerBlock","sessionToken","sessionData","attachBuildingBlock","SessionRequestMessage","SessionSaveMessage","from","message","debugLog","JSON","stringify","id","uniqueSessionRequestId","messageId","sessionResponseMessage","SessionResponseMessage","addData","SessionRequestedBy","isSessionValid","SessionResponseData","getData","SessionResponseToken","getToken","SessionResponseError","getError","send","saveSessionData","instance"],"mappings":";;;;;;;AAAA,OAAOA,WAAP,IACEC,OADF,QAEO,6CAFP;AAIA,SAASC,SAAT,QAA0B,kCAA1B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,KAAT,QAAsB,8BAAtB;;IAEqBC,mB;;;;;AAKnB,iCAAsB;AAAA;;AAAA;;AACpB;AADoB,UAHtBC,YAGsB;AAAA,UAFtBC,WAEsB;AAEpBL,IAAAA,SAAS,CAACM,mBAAV,gCAA8C,CAC5CP,OAAO,CAACD,WAAW,CAACS,qBAAb,CADqC,EAE5CR,OAAO,CAACD,WAAW,CAACU,kBAAb,CAFqC,CAA9C;AAFoB;AAMrB;;;;;8EASD,iBAAcC,IAAd,EAA4BC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACEV,gBAAAA,SAAS,CAACW,QAAV,CACE,qBADF,EAEE,2BAA2BC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAF7B;;AAKA,oBAAIX,OAAO,CAACD,WAAW,CAACS,qBAAb,CAAP,KAA+CG,OAAO,CAACI,EAA3D,EAA+D;AACzDC,kBAAAA,sBADyD,GAChCL,OAAO,CAACM,SADwB;AAGzDC,kBAAAA,sBAHyD,GAGhC,IAAIhB,OAAJ,CAC3BF,OAAO,CAACD,WAAW,CAACoB,sBAAb,CADoB,CAHgC;AAO7DD,kBAAAA,sBAAsB,CAACE,OAAvB,CACEpB,OAAO,CAACD,WAAW,CAACsB,kBAAb,CADT,EAEEL,sBAFF;;AAKA,sBAAI,KAAKM,cAAL,EAAJ,EAA2B;AACzBJ,oBAAAA,sBAAsB,CAACE,OAAvB,CACEpB,OAAO,CAACD,WAAW,CAACwB,mBAAb,CADT,EAEE,KAAKC,OAAL,EAFF;AAKAN,oBAAAA,sBAAsB,CAACE,OAAvB,CACEpB,OAAO,CAACD,WAAW,CAAC0B,oBAAb,CADT,EAEE,KAAKC,QAAL,EAFF;AAID,mBAVD,MAUO;AACLR,oBAAAA,sBAAsB,CAACE,OAAvB,CACEpB,OAAO,CAACD,WAAW,CAAC4B,oBAAb,CADT,EAEE,KAAKC,QAAL,EAFF;AAID;;AAED,uBAAKC,IAAL,CAAUX,sBAAV;AACD,iBA9BD,MA8BO,IAAIlB,OAAO,CAACD,WAAW,CAACU,kBAAb,CAAP,KAA4CE,OAAO,CAACI,EAAxD,EAA4D;AAC7DT,kBAAAA,WAD6D,GAC/CK,OAAO,CAACa,OAAR,CAChBxB,OAAO,CAACD,WAAW,CAACwB,mBAAb,CADS,CAD+C;AAK7DlB,kBAAAA,YAL6D,GAK9CM,OAAO,CAACa,OAAR,CACjBxB,OAAO,CAACD,WAAW,CAAC0B,oBAAb,CADU,CAL8C;AASjE,uBAAKK,eAAL,CAAqBzB,YAArB,EAAmCC,WAAnC;AACD;;AA9CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAiDA,yBAAgBD,YAAhB,EAAmCC,WAAnC,EAAqD;AACnD,WAAKD,YAAL,GAAoBA,YAApB;AACA,WAAKC,WAAL,GAAmBA,WAAnB;AACD;;;WAED,oBAAgB;AACd,aAAO,KAAKD,YAAZ;AACD;;;WAED,mBAAe;AACb,aAAO,KAAKC,WAAZ;AACD;;;WAED,oBAAgB;AACd,aAAO,iBAAP;AACD;;;WAED,0BAAiB;AACf,aAAO,IAAP;AACD;;;WA3ED,uBAA0C;AACxC,UAAI,CAACF,mBAAmB,CAAC2B,QAAzB,EAAmC;AACjC3B,QAAAA,mBAAmB,CAAC2B,QAApB,GAA+B,IAAI3B,mBAAJ,EAA/B;AACD;;AACD,aAAOA,mBAAmB,CAAC2B,QAA3B;AACD;;;;EAlB8C5B,K;;AAA5BC,mB,CACJ2B,Q;SADI3B,mB","sourcesContent":["import MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { Block } from '../../../framework/src/Block';\n\nexport default class SessionManagerBlock extends Block {\n  private static instance: SessionManagerBlock;\n  sessionToken: any;\n  sessionData: any;\n\n  private constructor() {\n    super();\n    runEngine.attachBuildingBlock(this as IBlock, [\n      getName(MessageEnum.SessionRequestMessage),\n      getName(MessageEnum.SessionSaveMessage)\n    ]);\n  }\n\n  static getInstance(): SessionManagerBlock {\n    if (!SessionManagerBlock.instance) {\n      SessionManagerBlock.instance = new SessionManagerBlock();\n    }\n    return SessionManagerBlock.instance;\n  }\n\n  async receive(from: string, message: Message) {\n    runEngine.debugLog(\n      'SessionManagerBlock',\n      'Session Rquest Message' + JSON.stringify(message)\n    );\n\n    if (getName(MessageEnum.SessionRequestMessage) === message.id) {\n      let uniqueSessionRequestId = message.messageId;\n\n      let sessionResponseMessage = new Message(\n        getName(MessageEnum.SessionResponseMessage)\n      );\n\n      sessionResponseMessage.addData(\n        getName(MessageEnum.SessionRequestedBy),\n        uniqueSessionRequestId\n      );\n\n      if (this.isSessionValid()) {\n        sessionResponseMessage.addData(\n          getName(MessageEnum.SessionResponseData),\n          this.getData()\n        );\n\n        sessionResponseMessage.addData(\n          getName(MessageEnum.SessionResponseToken),\n          this.getToken()\n        );\n      } else {\n        sessionResponseMessage.addData(\n          getName(MessageEnum.SessionResponseError),\n          this.getError()\n        );\n      }\n\n      this.send(sessionResponseMessage);\n    } else if (getName(MessageEnum.SessionSaveMessage) === message.id) {\n      let sessionData = message.getData(\n        getName(MessageEnum.SessionResponseData)\n      );\n\n      let sessionToken = message.getData(\n        getName(MessageEnum.SessionResponseToken)\n      );\n\n      this.saveSessionData(sessionToken, sessionData);\n    }\n  }\n  \n  saveSessionData(sessionToken: any, sessionData: any) {\n    this.sessionToken = sessionToken;\n    this.sessionData = sessionData;    \n  }\n\n  getToken(): any {\n    return this.sessionToken;\n  }\n\n  getData(): any {\n    return this.sessionData;\n  }\n\n  getError(): any {\n    return 'Session Expired';\n  }\n\n  isSessionValid() {\n    return true;\n  }\n}"]},"metadata":{},"sourceType":"module"}