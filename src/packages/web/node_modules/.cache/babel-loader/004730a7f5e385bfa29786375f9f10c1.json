{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport MessageEnum, { getName } from '../Messages/MessageEnum';\nimport { runEngine } from '../RunEngine';\nimport { Message } from '../Message';\nimport { Block } from '../Block';\nimport StorageProvider from '../StorageProvider';\n\nvar UserAccountManagerBlock = /*#__PURE__*/function (_Block) {\n  _inherits(UserAccountManagerBlock, _Block);\n\n  var _super = _createSuper(UserAccountManagerBlock);\n\n  function UserAccountManagerBlock() {\n    var _this;\n\n    _classCallCheck(this, UserAccountManagerBlock);\n\n    _this = _super.call(this);\n    _this.userCredsKey = 'saveUserInfo';\n    _this.userName = void 0;\n    _this.password = void 0;\n    _this.phoneNumber = void 0;\n    _this.countryCode = void 0;\n\n    _this.loadCreds();\n\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), [getName(MessageEnum.LoginSuccessMessage), getName(MessageEnum.LoginFaliureMessage), getName(MessageEnum.RequestUserCredentials)]);\n    return _this;\n  }\n\n  _createClass(UserAccountManagerBlock, [{\n    key: \"loadCreds\",\n    value: function () {\n      var _loadCreds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var storedCreds, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return StorageProvider.get(this.userCredsKey);\n\n              case 2:\n                storedCreds = _context.sent;\n\n                if (storedCreds) {\n                  try {\n                    json = JSON.parse(storedCreds);\n                    this.userName = json.id;\n                    this.password = json.password;\n                    this.countryCode = json.countrycode;\n                  } catch (_unused) {}\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadCreds() {\n        return _loadCreds.apply(this, arguments);\n      }\n\n      return loadCreds;\n    }()\n  }, {\n    key: \"receive\",\n    value: function receive(from, message) {\n      if (getName(MessageEnum.RequestUserCredentials) === message.id) {\n        var _message = new Message(getName(MessageEnum.ReciveUserCredentials));\n\n        _message.addData(getName(MessageEnum.LoginUserName), this.userName);\n\n        _message.addData(getName(MessageEnum.LoginPassword), this.password);\n\n        _message.addData(getName(MessageEnum.LoginCountryCode), this.countryCode);\n\n        this.send(_message);\n      } else if (getName(MessageEnum.LoginSuccessMessage) === message.id) {\n        var userName = message.getData(getName(MessageEnum.LoginUserName));\n        var password = message.getData(getName(MessageEnum.LoginPassword));\n        var countryCode = message.getData(getName(MessageEnum.LoginCountryCode));\n        var isRememberMe = message.getData(getName(MessageEnum.LoginIsRememberMe));\n        this.saveUserData(countryCode, userName, password, isRememberMe);\n      } else if (getName(MessageEnum.LoginFaliureMessage) === message.id) {\n        this.clearUserData();\n      }\n    }\n  }, {\n    key: \"saveUserData\",\n    value: function () {\n      var _saveUserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(countryCode, userName, password, isRememberMe) {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (isRememberMe) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                this.clearUserData();\n                _context2.next = 15;\n                break;\n\n              case 4:\n                _context2.prev = 4;\n                userInfo = {\n                  id: userName,\n                  countrycode: countryCode,\n                  password: password\n                };\n                _context2.next = 8;\n                return StorageProvider.set(this.userCredsKey, JSON.stringify(userInfo));\n\n              case 8:\n                this.countryCode = countryCode;\n                this.userName = userName;\n                this.password = password;\n                _context2.next = 15;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](4);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 13]]);\n      }));\n\n      function saveUserData(_x, _x2, _x3, _x4) {\n        return _saveUserData.apply(this, arguments);\n      }\n\n      return saveUserData;\n    }()\n  }, {\n    key: \"clearUserData\",\n    value: function () {\n      var _clearUserData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return StorageProvider.set(this.userCredsKey, '');\n\n              case 2:\n                this.userName = null;\n                this.password = null;\n                this.countryCode = null;\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function clearUserData() {\n        return _clearUserData.apply(this, arguments);\n      }\n\n      return clearUserData;\n    }()\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!UserAccountManagerBlock.instance) {\n        UserAccountManagerBlock.instance = new UserAccountManagerBlock();\n      }\n\n      return UserAccountManagerBlock.instance;\n    }\n  }]);\n\n  return UserAccountManagerBlock;\n}(Block);\n\nUserAccountManagerBlock.instance = void 0;\nexport { UserAccountManagerBlock as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/framework/src/Blocks/UserAccountManagerBlock.tsx"],"names":["MessageEnum","getName","runEngine","Message","Block","StorageProvider","UserAccountManagerBlock","userCredsKey","userName","password","phoneNumber","countryCode","loadCreds","attachBuildingBlock","LoginSuccessMessage","LoginFaliureMessage","RequestUserCredentials","get","storedCreds","json","JSON","parse","id","countrycode","from","message","ReciveUserCredentials","addData","LoginUserName","LoginPassword","LoginCountryCode","send","getData","isRememberMe","LoginIsRememberMe","saveUserData","clearUserData","userInfo","set","stringify","instance"],"mappings":"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","sourcesContent":["import MessageEnum, { getName } from '../Messages/MessageEnum';\nimport { IBlock } from '../IBlock';\nimport { runEngine } from '../RunEngine';\nimport { Message } from '../Message';\nimport { Block } from '../Block';\nimport StorageProvider from '../StorageProvider';\n\nexport default class UserAccountManagerBlock extends Block {\n  private static instance: UserAccountManagerBlock;\n\n  userCredsKey: string = 'saveUserInfo';\n\n  userName: null;\n  password: null;\n  phoneNumber: null;\n  countryCode: null;\n\n  private constructor() {\n    super();\n\n    this.loadCreds();\n\n    runEngine.attachBuildingBlock(this as IBlock, [\n      getName(MessageEnum.LoginSuccessMessage),\n      getName(MessageEnum.LoginFaliureMessage),\n      getName(MessageEnum.RequestUserCredentials)\n    ]);\n  }\n\n  static getInstance(): UserAccountManagerBlock {\n    if (!UserAccountManagerBlock.instance) {\n      UserAccountManagerBlock.instance = new UserAccountManagerBlock();\n    }\n    return UserAccountManagerBlock.instance;\n  }\n\n  async loadCreds() {\n    let storedCreds: any = await StorageProvider.get(this.userCredsKey);\n\n    if (storedCreds) {\n      try {\n        const json = JSON.parse(storedCreds);\n        this.userName = json.id;\n        this.password = json.password;\n        this.countryCode = json.countrycode;\n      } catch {}\n    }\n  }\n\n  receive(from: string, message: Message) {\n    if (getName(MessageEnum.RequestUserCredentials) === message.id) {\n      let message = new Message(getName(MessageEnum.ReciveUserCredentials));\n      message.addData(getName(MessageEnum.LoginUserName), this.userName);\n      message.addData(getName(MessageEnum.LoginPassword), this.password);\n      message.addData(getName(MessageEnum.LoginCountryCode), this.countryCode);\n      this.send(message);\n    } else if (getName(MessageEnum.LoginSuccessMessage) === message.id) {\n      let userName = message.getData(getName(MessageEnum.LoginUserName));\n      let password = message.getData(getName(MessageEnum.LoginPassword));\n      let countryCode = message.getData(getName(MessageEnum.LoginCountryCode));\n      let isRememberMe = message.getData(\n        getName(MessageEnum.LoginIsRememberMe)\n      );\n      this.saveUserData(countryCode, userName, password, isRememberMe);\n    } else if (getName(MessageEnum.LoginFaliureMessage) === message.id) {\n      this.clearUserData();\n    }\n  }\n\n  async saveUserData(\n    countryCode: any,\n    userName: any,\n    password: any,\n    isRememberMe: any\n  ) {\n    if (!isRememberMe) {\n      this.clearUserData();\n    } else {\n      try {\n        const userInfo = {\n          id: userName,\n          countrycode: countryCode,\n          password: password\n        };\n        await StorageProvider.set(this.userCredsKey, JSON.stringify(userInfo));\n\n        this.countryCode = countryCode;\n        this.userName = userName;\n        this.password = password;\n      } catch {}\n    }\n  }\n\n  async clearUserData() {\n    await StorageProvider.set(this.userCredsKey, '');\n    this.userName = null;\n    this.password = null;\n    this.countryCode = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}