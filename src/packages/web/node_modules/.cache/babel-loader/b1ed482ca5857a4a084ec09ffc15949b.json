{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Message } from \"../../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../../framework/src/RunEngine\"; // @ts-ignore\n\nimport map from \"lodash/map\";\nexport var configJSON = require(\"../config\");\n\nvar ContactusController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(ContactusController, _BlockComponent);\n\n  var _super = _createSuper(ContactusController);\n\n  function ContactusController(props) {\n    var _this;\n\n    _classCallCheck(this, ContactusController);\n\n    _this = _super.call(this, props);\n    _this.deleteContactApiCallId = void 0;\n    _this.addContactApiCallId = void 0;\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this)); // Customizable Area Start\n\n    _this.subScribedMessages = [getName(MessageEnum.SessionResponseMessage), getName(MessageEnum.RestAPIResponceMessage)];\n    _this.state = {\n      values: undefined,\n      messageSent: false,\n      sending: false,\n      loading: false,\n      //@ts-ignore\n      userDetails: JSON.parse(localStorage.getItem('user'))\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(ContactusController, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(from, message) {\n        var apiRequestCallId, responseJson, errorReponse, _responseJson$request, _responseJson$request2, response, title, AlertBodyMessage;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Customizable Area Start\n                runEngine.debugLog(\"Message Recived\", message);\n\n                if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.addContactApiCallId) {\n                    this.setState({\n                      loading: false\n                    });\n\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        messageSent: true\n                      }); // @ts-ignore\n\n                      window.notify([{\n                        type: \"success\",\n                        message: \"Thank you for contact us !!!\"\n                      }]);\n                    } else if (responseJson && responseJson.errors) {\n                      if ((responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$request = responseJson.request) === null || _responseJson$request === void 0 ? void 0 : _responseJson$request.response) && (responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$request2 = responseJson.request) === null || _responseJson$request2 === void 0 ? void 0 : _responseJson$request2.status) !== 0) {\n                        response = JSON.parse(responseJson.request.response);\n                        map(response === null || response === void 0 ? void 0 : response.errors, function (errorMesage) {\n                          map(errorMesage, function (val, key) {\n                            console.log(key); // @ts-ignore\n\n                            window.notify([{\n                              message: val || \"Something went wrong\",\n                              type: \"danger\"\n                            }]);\n                          });\n                        });\n                      }\n                    } else {\n                      this.parseApiErrorResponse(responseJson);\n                    }\n                  }\n                } else if (getName(MessageEnum.AlertMessage) === message.id) {\n                  title = message.getData(getName(MessageEnum.AlertTitleMessage));\n                  AlertBodyMessage = message.getData(getName(MessageEnum.AlertBodyMessage)); // Customizable Area End\n                }\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }() //submitting contact us form\n\n  }, {\n    key: \"submitContactusForm\",\n    value: function submitContactusForm(values) {\n      this.setState({\n        loading: true\n      });\n      var token = localStorage.getItem(\"token\");\n      var GuestUserData = localStorage.getItem('guestUUID');\n      var requestBody; //@ts-ignore\n\n      var userData = JSON.parse(localStorage.getItem('user'));\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      this.addContactApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.addContactAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n\n      if (GuestUserData) {\n        requestBody = {\n          \"data\": {\n            \"attributes\": {\n              \"name\": values.name,\n              \"phone_number\": values.phone,\n              \"email\": values.email,\n              \"description\": values.message\n            }\n          }\n        };\n      } else {\n        requestBody = {\n          \"data\": {\n            \"attributes\": {\n              \"name\": values.name,\n              \"phone_number\": values.phone,\n              \"email\": values.email,\n              \"description\": values.message,\n              \"account_id\": userData.id\n            }\n          }\n        };\n      }\n\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n  }]);\n\n  return ContactusController;\n}(BlockComponent);\n\nexport { ContactusController as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/contactus/src/contactus.web/ContactusController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","map","configJSON","require","ContactusController","props","deleteContactApiCallId","addContactApiCallId","receive","bind","subScribedMessages","SessionResponseMessage","RestAPIResponceMessage","state","values","undefined","messageSent","sending","loading","userDetails","JSON","parse","localStorage","getItem","attachBuildingBlock","from","message","debugLog","id","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","setState","data","window","notify","type","errors","request","response","status","errorMesage","val","key","console","log","parseApiErrorResponse","AlertMessage","title","AlertTitleMessage","AlertBodyMessage","token","GuestUserData","requestBody","userData","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","addContactAPIEndPoint","headers","name","phone","email","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","stringify","RestAPIRequestMethodMessage","httpPostMethod","sendMessage"],"mappings":";;;;;;;AACA,SAASA,OAAT,QAAwB,mCAAxB;AACA,SAASC,cAAT,QAA+B,0CAA/B;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,gDAFP;AAGA,SAASC,SAAT,QAA0B,qCAA1B,C,CACA;;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,UAAU,GAAGC,OAAO,CAAC,WAAD,CAA1B;;IA0BcC,mB;;;;;AAGnB,+BAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,KAAN;AADwB,UAF1BC,sBAE0B;AAAA,UAD1BC,mBAC0B;AAExB,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf,CAFwB,CAIxB;;AACA,UAAKC,kBAAL,GAA0B,CACxBX,OAAO,CAACD,WAAW,CAACa,sBAAb,CADiB,EAExBZ,OAAO,CAACD,WAAW,CAACc,sBAAb,CAFiB,CAA1B;AAKA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAEC,SADG;AAEXC,MAAAA,WAAW,EAAE,KAFF;AAGXC,MAAAA,OAAO,EAAE,KAHE;AAIXC,MAAAA,OAAO,EAAE,KAJE;AAKX;AACAC,MAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;AANF,KAAb,CAVwB,CAmBxB;;AACAvB,IAAAA,SAAS,CAACwB,mBAAV,gCAA8C,MAAKd,kBAAnD;AApBwB;AAqBzB;;;;;wFAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAIA,kBAAce,IAAd,EAA4BC,OAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE;AACA1B,gBAAAA,SAAS,CAAC2B,QAAV,CAAmB,iBAAnB,EAAsCD,OAAtC;;AACA,oBAAIA,OAAO,CAACE,EAAR,KAAe7B,OAAO,CAACD,WAAW,CAACc,sBAAb,CAA1B,EAAgE;AACxDiB,kBAAAA,gBADwD,GACrCH,OAAO,CAACI,OAAR,CACvB/B,OAAO,CAACD,WAAW,CAACiC,0BAAb,CADgB,CADqC;AAK1DC,kBAAAA,YAL0D,GAK3CN,OAAO,CAACI,OAAR,CACjB/B,OAAO,CAACD,WAAW,CAACmC,6BAAb,CADU,CAL2C;AAS1DC,kBAAAA,YAT0D,GAS3CR,OAAO,CAACI,OAAR,CACjB/B,OAAO,CAACD,WAAW,CAACqC,2BAAb,CADU,CAT2C;;AAY9D,sBAAIN,gBAAgB,KAAK,KAAKtB,mBAA9B,EAAmD;AACjD,yBAAK6B,QAAL,CAAc;AAAElB,sBAAAA,OAAO,EAAE;AAAX,qBAAd;;AACA,wBAAIc,YAAY,IAAIA,YAAY,CAACK,IAAjC,EAAuC;AACrC,2BAAKD,QAAL,CAAc;AACZpB,wBAAAA,WAAW,EAAE;AADD,uBAAd,EADqC,CAIrC;;AACAsB,sBAAAA,MAAM,CAACC,MAAP,CAAc,CAAC;AAAEC,wBAAAA,IAAI,EAAE,SAAR;AAAmBd,wBAAAA,OAAO,EAAE;AAA5B,uBAAD,CAAd;AACD,qBAND,MAMO,IAAIM,YAAY,IAAIA,YAAY,CAACS,MAAjC,EAAyC;AAC9C,0BAAI,CAAAT,YAAY,SAAZ,IAAAA,YAAY,WAAZ,qCAAAA,YAAY,CAAEU,OAAd,gFAAuBC,QAAvB,KAAmC,CAAAX,YAAY,SAAZ,IAAAA,YAAY,WAAZ,sCAAAA,YAAY,CAAEU,OAAd,kFAAuBE,MAAvB,MAAkC,CAAzE,EAA4E;AACtED,wBAAAA,QADsE,GAC3DvB,IAAI,CAACC,KAAL,CAAWW,YAAY,CAACU,OAAb,CAAqBC,QAAhC,CAD2D;AAE1E1C,wBAAAA,GAAG,CAAC0C,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEF,MAAX,EAAmB,UAACI,WAAD,EAAsB;AAC1C5C,0BAAAA,GAAG,CAAC4C,WAAD,EAAc,UAACC,GAAD,EAAWC,GAAX,EAAwB;AACvCC,4BAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADuC,CAEvC;;AACAT,4BAAAA,MAAM,CAACC,MAAP,CAAc,CAAC;AAAEb,8BAAAA,OAAO,EAAEoB,GAAG,IAAI,sBAAlB;AAA0CN,8BAAAA,IAAI,EAAE;AAAhD,6BAAD,CAAd;AACD,2BAJE,CAAH;AAKD,yBANE,CAAH;AAOD;AACF,qBAXM,MAWA;AACL,2BAAKU,qBAAL,CAA2BlB,YAA3B;AACD;AACF;AACF,iBAnCD,MAoCK,IAAIjC,OAAO,CAACD,WAAW,CAACqD,YAAb,CAAP,KAAsCzB,OAAO,CAACE,EAAlD,EAAsD;AACnDwB,kBAAAA,KADmD,GAC3C1B,OAAO,CAACI,OAAR,CACZ/B,OAAO,CAACD,WAAW,CAACuD,iBAAb,CADK,CAD2C;AAIrDC,kBAAAA,gBAJqD,GAIlC5B,OAAO,CAACI,OAAR,CACrB/B,OAAO,CAACD,WAAW,CAACwD,gBAAb,CADc,CAJkC,EAOzD;AACD;;AA/CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAkDA;;;;WACA,6BAAoBxC,MAApB,EAAiC;AAC/B,WAAKsB,QAAL,CAAc;AAAElB,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAMqC,KAAK,GAAGjC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMiC,aAAa,GAAGlC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAtB;AACA,UAAIkC,WAAJ,CAJ+B,CAM/B;;AACA,UAAMC,QAAQ,GAAGtC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAjB;AACA,UAAMoC,cAAc,GAAG,IAAI/D,OAAJ,CAAYG,OAAO,CAACD,WAAW,CAAC8D,qBAAb,CAAnB,CAAvB;AACA,WAAKrD,mBAAL,GAA2BoD,cAAc,CAACE,SAA1C;AACAF,MAAAA,cAAc,CAACG,OAAf,CAAuB/D,OAAO,CAACD,WAAW,CAACiE,8BAAb,CAA9B,EAA4E7D,UAAU,CAAC8D,qBAAvF;AAEA,UAAMC,OAAO,GAAG;AACd,wBAAgB,kBADF;AAEdV,QAAAA,KAAK,EAALA;AAFc,OAAhB;;AAIA,UAAIC,aAAJ,EAAmB;AACjBC,QAAAA,WAAW,GAAG;AACZ,kBAAQ;AACN,0BAAc;AACZ,sBAAQ3C,MAAM,CAACoD,IADH;AAEZ,8BAAgBpD,MAAM,CAACqD,KAFX;AAGZ,uBAASrD,MAAM,CAACsD,KAHJ;AAIZ,6BAAetD,MAAM,CAACY;AAJV;AADR;AADI,SAAd;AAUD,OAXD,MAWO;AACL+B,QAAAA,WAAW,GAAG;AACZ,kBAAQ;AACN,0BAAc;AACZ,sBAAQ3C,MAAM,CAACoD,IADH;AAEZ,8BAAgBpD,MAAM,CAACqD,KAFX;AAGZ,uBAASrD,MAAM,CAACsD,KAHJ;AAIZ,6BAAetD,MAAM,CAACY,OAJV;AAKZ,4BAAcgC,QAAQ,CAAC9B;AALX;AADR;AADI,SAAd;AAWD;;AACD+B,MAAAA,cAAc,CAACG,OAAf,CAAuB/D,OAAO,CAACD,WAAW,CAACuE,2BAAb,CAA9B,EAAyEJ,OAAzE;AACAN,MAAAA,cAAc,CAACG,OAAf,CAAuB/D,OAAO,CAACD,WAAW,CAACwE,yBAAb,CAA9B,EAAuElD,IAAI,CAACmD,SAAL,CAAed,WAAf,CAAvE;AACAE,MAAAA,cAAc,CAACG,OAAf,CAAuB/D,OAAO,CAACD,WAAW,CAAC0E,2BAAb,CAA9B,EAAyEtE,UAAU,CAACuE,cAApF;AACAzE,MAAAA,SAAS,CAAC0E,WAAV,CAAsBf,cAAc,CAAC/B,EAArC,EAAyC+B,cAAzC;AACD;;;;EA7H8C9D,c;;SAA5BO,mB","sourcesContent":["import { IBlock } from \"../../../../framework/src/IBlock\";\nimport { Message } from \"../../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName\n} from \"../../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../../framework/src/RunEngine\";\n// @ts-ignore\nimport map from \"lodash/map\";\n\nexport const configJSON = require(\"../config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  values: any,\n  messageSent: boolean;\n  sending: boolean;\n\n  //localStorgae data\n  userDetails?: any;\n  loading: boolean;\n\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class ContactusController extends BlockComponent<Props, S, SS> {\n  deleteContactApiCallId: any;\n  addContactApiCallId: any;\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.SessionResponseMessage),\n      getName(MessageEnum.RestAPIResponceMessage)\n    ];\n\n    this.state = {\n      values: undefined,\n      messageSent: false,\n      sending: false,\n      loading: false,\n      //@ts-ignore\n      userDetails: JSON.parse(localStorage.getItem('user'))\n    };\n\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n\n  }\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n    runEngine.debugLog(\"Message Recived\", message);\n    if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n      if (apiRequestCallId === this.addContactApiCallId) {\n        this.setState({ loading: false });\n        if (responseJson && responseJson.data) {\n          this.setState({\n            messageSent: true\n          });\n          // @ts-ignore\n          window.notify([{ type: \"success\", message: \"Thank you for contact us !!!\" }])\n        } else if (responseJson && responseJson.errors) {\n          if (responseJson?.request?.response && responseJson?.request?.status !== 0) {\n            let response = JSON.parse(responseJson.request.response);\n            map(response?.errors, (errorMesage: any) => {\n              map(errorMesage, (val: any, key: any) => {\n                console.log(key)\n                // @ts-ignore\n                window.notify([{ message: val || \"Something went wrong\", type: \"danger\" }]);\n              })\n            })\n          }\n        } else {\n          this.parseApiErrorResponse(responseJson);\n        }\n      }\n    }\n    else if (getName(MessageEnum.AlertMessage) === message.id) {\n      const title = message.getData(\n        getName(MessageEnum.AlertTitleMessage)\n      );\n      let AlertBodyMessage = message.getData(\n        getName(MessageEnum.AlertBodyMessage)\n      );\n      // Customizable Area End\n    }\n  }\n\n  //submitting contact us form\n  submitContactusForm(values: any) {\n    this.setState({ loading: true });\n    const token = localStorage.getItem(\"token\");\n    const GuestUserData = localStorage.getItem('guestUUID');\n    let requestBody;\n\n    //@ts-ignore\n    const userData = JSON.parse(localStorage.getItem('user'));\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.addContactApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.addContactAPIEndPoint);\n\n    const headers = {\n      'Content-Type': 'application/json',\n      token\n    };\n    if (GuestUserData) {\n      requestBody = {\n        \"data\": {\n          \"attributes\": {\n            \"name\": values.name,\n            \"phone_number\": values.phone,\n            \"email\": values.email,\n            \"description\": values.message,\n          }\n        }\n      }\n    } else {\n      requestBody = {\n        \"data\": {\n          \"attributes\": {\n            \"name\": values.name,\n            \"phone_number\": values.phone,\n            \"email\": values.email,\n            \"description\": values.message,\n            \"account_id\": userData.id\n          }\n        }\n      };\n    }\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostMethod);\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n\n}\n"]},"metadata":{},"sourceType":"module"}