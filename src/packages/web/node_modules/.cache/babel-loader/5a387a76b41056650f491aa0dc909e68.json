{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nexport var configJSON = require(\"./config\");\n\nvar OrderSummaryController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(OrderSummaryController, _BlockComponent);\n\n  var _super = _createSuper(OrderSummaryController);\n\n  function OrderSummaryController(props) {\n    var _this;\n\n    _classCallCheck(this, OrderSummaryController);\n\n    _this = _super.call(this, props);\n    _this.saveAddressId = void 0;\n    _this.checkZipcodeId = void 0;\n    _this.checkAvailabilityId = void 0;\n    _this.releaseBlockId = void 0;\n    _this.placeOrderId = void 0;\n    _this.createOrderId = void 0;\n    _this.verifyRazorPayId = void 0;\n    _this.getUserProfileApiCallId = void 0;\n    _this.releaseBlockQuantityApiCallId = void 0;\n\n    _this.apiCall = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        var contentType, method, endPoint, body, token, header, requestMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentType = data.contentType, method = data.method, endPoint = data.endPoint, body = data.body;\n                token = localStorage.getItem(\"token\");\n                header = {\n                  \"Content-Type\": contentType,\n                  token: token\n                };\n                requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n                requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), endPoint);\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), method);\n                body && requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(body));\n                runEngine.sendMessage(requestMessage.id, requestMessage);\n                return _context.abrupt(\"return\", requestMessage.messageId);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getCartHasProduct = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                isFetching: false\n              });\n\n              _context2.next = 3;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.cartHasProductAPIEndPoint\n              });\n\n            case 3:\n              _this.getCartProductId = _context2.sent;\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.getUserProfile = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.userProfileApiEndPoint\n              });\n\n            case 2:\n              _this.getUserProfileApiCallId = _context3.sent;\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    _this.getUserProfileSuccessCallBack = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(res) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.setState({\n                  profileData: res,\n                  isFetching: false\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.onSetAddress = function (isFromShipping, addressData) {\n      if (isFromShipping) {\n        _this.setState({\n          shippingAddressData: addressData\n        });\n      } else {\n        _this.setState({\n          billingAddressData: addressData\n        });\n      }\n    };\n\n    _this.onAddAddress = function (isFromShipping) {\n      _this.props.navigation.navigate(\"SavedAddress\", {\n        isFromCheckout: true,\n        onSetAddress: function onSetAddress(addressData) {\n          return _this.onSetAddress(isFromShipping, addressData);\n        }\n      });\n    };\n\n    _this.saveAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var addressData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              addressData = _this.props.navigation.state.params.checkoutData;\n\n              if (addressData.address && addressData.address.id) {\n                addressData['delivery_address_id'] = addressData.address.id;\n              }\n\n              _context5.next = 4;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypePut,\n                endPoint: configJSON.addAddressToOrder + \"/\" + _this.state.wholeCartData.id + \"/add_address_to_order\",\n                body: addressData\n              });\n\n            case 4:\n              _this.saveAddressId = _context5.sent;\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    _this.releaseBlockQuantity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.toggleIsOpen();\n\n              _context6.next = 3;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypePut,\n                endPoint: configJSON.cartListAPiEndPoint + \"/\" + _this.state.wholeCartData.id + \"/release_products\"\n              });\n\n            case 3:\n              _this.releaseBlockQuantityApiCallId = _context6.sent;\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    _this.releaseBlockQuantitySuccessCallBack = function (res) {\n      console.log('@@@ Release Block Quantity Success CallBack =============', res);\n    };\n\n    _this.releaseBlockQuantityFailureCallBack = function (error) {\n      console.log('@@@ Release Block Quantity Failure CallBack =============', error);\n    };\n\n    _this.checkZipcodeAvailability = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var shipping;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this.toggleIsOpen();\n\n              shipping = _this.state.addressData;\n              _context7.next = 4;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.checkZipCodeApiEndPoint + shipping.zip_code\n              });\n\n            case 4:\n              _this.checkZipcodeId = _context7.sent;\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    _this.checkProductAvailability = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.cartListAPiEndPoint + \"/\" + _this.state.wholeCartData.id + \"/check_availability\"\n              });\n\n            case 2:\n              _this.checkAvailabilityId = _context8.sent;\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    _this.toggleIsOpen = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen\n        };\n      });\n    };\n\n    _this.onConfirmingOrder = function () {\n      var confirVal = window.confirm(\"Are you sure want to place the order?\");\n\n      if (confirVal) {\n        _this.checkZipcodeAvailability();\n      } else {\n        _this.releaseBlockQuantity();\n      }\n    };\n\n    _this.placeOrder = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var id, orderData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (_this.state.paymentType === \"cod\") {\n                _this.placeConfirmOrder(); //localStorage.removeItem(\"cart_length\");\n\n              } else {\n                id = _this.state.wholeCartData;\n                orderData = new FormData();\n                orderData.append(\"order_id\", id);\n\n                _this.getRazorpayOrderId(); //   localStorage.removeItem(\"cart_length\");\n\n              }\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    _this.getRazorpayOrderId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var id, data;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              id = _this.state.wholeCartData.id;\n              data = {\n                order_id: id,\n                value: 1500\n              };\n              _context10.next = 4;\n              return _this.apiCall({\n                endPoint: configJSON.createRazorpayApiEndPoint,\n                contentType: configJSON.ApiContentType,\n                method: configJSON.ApiMethodPostType,\n                body: data\n              });\n\n            case 4:\n              _this.createOrderId = _context10.sent;\n\n            case 5:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    _this.razorpayAddonMethod = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(razorpay_order_id) {\n        var self, _this$state$wholeCart, email, full_name, full_phone_number, options, rzp1;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                self = _assertThisInitialized(_this);\n                _this$state$wholeCart = _this.state.wholeCartData.account.attributes, email = _this$state$wholeCart.email, full_name = _this$state$wholeCart.full_name, full_phone_number = _this$state$wholeCart.full_phone_number;\n                options = {\n                  description: 'Credits towards consultation',\n                  // image: 'https://i.imgur.com/3g7nmJC.png',\n                  currency: 'INR',\n                  key: 'rzp_test_QDC256wNFutX9J',\n                  // Your api key\n                  amount: \"\".concat(parseFloat(_this.state.wholeCartData.total).toFixed(2) * 100),\n                  handler: function handler(response) {\n                    self.verifyAddonRazorPay(response);\n                  },\n                  name: 'Branded Wholesale',\n                  order_id: razorpay_order_id,\n                  prefill: {\n                    email: email,\n                    contact: full_phone_number,\n                    name: full_name\n                  } //  theme: { color: APP_COLORS.app_theme_green_color }\n\n                };\n                rzp1 = new Razorpay(options);\n                rzp1.on('payment.failed', function (response) {\n                  window.notify([{\n                    message: response.error.description,\n                    type: \"error\"\n                  }]);\n                  self.releaseBlockQuantity();\n                  self.props.history.push({\n                    pathname: '/transactionfailed'\n                  });\n                });\n                rzp1.open(options);\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      return function (_x3) {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n\n    _this.verifyAddonRazorPay = /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(razorPay_data) {\n        var razorpay_order_id, razorpay_payment_id, razorpay_signature, razorPayData;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                razorpay_order_id = razorPay_data.razorpay_order_id, razorpay_payment_id = razorPay_data.razorpay_payment_id, razorpay_signature = razorPay_data.razorpay_signature;\n                razorPayData = {\n                  razorpay_order_id: razorpay_order_id,\n                  razorpay_payment_id: razorpay_payment_id,\n                  razorpay_signature: razorpay_signature\n                };\n                _context12.next = 4;\n                return _this.apiCall({\n                  endPoint: configJSON.verifyRazorpayApiEndPoint,\n                  contentType: configJSON.ApiContentType,\n                  method: configJSON.ApiMethodPostType,\n                  body: razorPayData\n                });\n\n              case 4:\n                _this.verifyRazorPayId = _context12.sent;\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      return function (_x4) {\n        return _ref12.apply(this, arguments);\n      };\n    }();\n\n    _this.placeConfirmOrder = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              data = {\n                cart_id: _this.state.wholeCartData.id,\n                is_gift: false,\n                schedule_time: \"\"\n              };\n              _context13.next = 3;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.ApiMethodPostType,\n                endPoint: configJSON.placeOrderAPIEndPoint,\n                body: data\n              });\n\n            case 3:\n              _this.placeOrderId = _context13.sent;\n              localStorage.removeItem(\"cart_length\");\n\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    _this.onVerifyAddonRazorpaySuccess = function (res) {\n      if (res) {\n        _this.props.history.push({\n          pathname: '/order-placed',\n          state: {\n            orderSuccess: true,\n            orderData: {\n              order: {\n                placed_at: res.order.placed_at,\n                total: res.order.total\n              }\n            }\n          }\n        });\n      }\n\n      localStorage.removeItem(\"cart_length\");\n    };\n\n    _this.onHandleBack = function () {\n      _this.props.history.push(\"/checkout\");\n    };\n\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this)); // Customizable Area Start\n\n    _this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    _this.state = {\n      paymentType: \"stripe\",\n      cardtData: \"\",\n      wholeCartData: \"\",\n      addressData: \"\",\n      razorpay_order_id: \"\"\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(OrderSummaryController, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var cardtData, addressData, billing_address_data, wholeCartData;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                cardtData = this.props.history.location.state.cart;\n                addressData = this.props.history.location.state.addressData;\n                billing_address_data = this.props.history.location.state.billing_address_Data;\n                wholeCartData = this.props.history.location.state.cardtData;\n                this.setState({\n                  cardtData: cardtData,\n                  addressData: addressData,\n                  billing_address_data: billing_address_data,\n                  wholeCartData: wholeCartData\n                });\n                /* @ts-ignore */\n\n                if (_.lowerCase(JSON.parse(localStorage.getItem('countryCode')).countryName) == 'uk') {\n                  this.setState({\n                    paymentType: \"stripe\"\n                  });\n                }\n                /* @ts-ignore */\n\n\n                if (_.lowerCase(JSON.parse(localStorage.getItem('countryCode')).countryName) == 'india') {\n                  this.setState({\n                    paymentType: \"razorpay\"\n                  });\n                }\n\n              case 7:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function () {\n      var _componentWillUnmount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function componentWillUnmount() {\n        return _componentWillUnmount.apply(this, arguments);\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(from, message) {\n        var apiRequestCallId, responseJson, errorReponse;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                // Customizable Area Start\n                if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.emptyCartApiCallId) {\n                    this.setState({\n                      emptyCart: true,\n                      isFetching: false\n                    });\n                  }\n\n                  if (responseJson && responseJson.data) {\n                    if (apiRequestCallId === this.releaseBlockId) {} else if (apiRequestCallId === this.placeOrderId) {\n                      if (responseJson) {\n                        this.props.history.push({\n                          pathname: '/order-placed',\n                          state: {\n                            orderData: {\n                              order: {\n                                placed_at: responseJson.data.placed_at,\n                                total: responseJson.data.total\n                              }\n                            }\n                          }\n                        });\n                      }\n                    }\n\n                    if (apiRequestCallId === this.createOrderId) {\n                      this.razorpayAddonMethod(responseJson.data.order.data.attributes.razorpay_order_id);\n                    } else if (apiRequestCallId === this.verifyRazorPayId) {\n                      this.onVerifyAddonRazorpaySuccess(responseJson.data);\n                    }\n                  }\n\n                  if (responseJson && responseJson.message) {\n                    if (apiRequestCallId === this.checkAvailabilityId) {\n                      if (responseJson.message === \"All products are available.\") {\n                        this.placeOrder();\n                      } else {\n                        window.notify([{\n                          message: responseJson.errors,\n                          type: \"error\"\n                        }]);\n                      }\n                    } else if (apiRequestCallId === this.checkZipcodeId) {\n                      if (responseJson.message === \"Sorry, currently delivery is not available for this location.\") {\n                        window.notify([{\n                          message: responseJson.message,\n                          type: \"error\"\n                        }]);\n                      } else {\n                        this.checkProductAvailability();\n                      }\n                    } else if (apiRequestCallId === this.releaseBlockId) {} else if (apiRequestCallId === this.placeOrderId) {\n                      this.setState({\n                        isShowError: false,\n                        message: responseJson.message,\n                        showAlertModal: true,\n                        isFetching: false,\n                        isValidCoupon: false\n                      });\n                    } else if (apiRequestCallId === this.createOrderId) {\n                      this.setState({\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.verifyRazorPayId) {\n                      this.releaseBlockQuantity();\n                      this.setState({\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.releaseBlockQuantityApiCallId) {\n                      this.releaseBlockQuantityFailureCallBack(responseJson.message);\n                    }\n                  }\n\n                  if (responseJson && responseJson.errors) {\n                    if (apiRequestCallId === this.checkAvailabilityId) {\n                      this.setState({\n                        isShowError: true,\n                        message: responseJson.errors,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.checkZipcodeId) {\n                      this.setState({\n                        isShowError: true,\n                        message: responseJson.errors,\n                        showAlertModal: true,\n                        isFetching: false,\n                        isValidCoupon: false\n                      });\n                    } else if (apiRequestCallId === this.releaseBlockId) {} else if (apiRequestCallId === this.placeOrderId) {\n                      this.setState({\n                        isShowError: true,\n                        message: responseJson.errors,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.createOrderId) {\n                      this.setState({\n                        isShowError: true,\n                        message: responseJson.errors,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.verifyRazorPayId) {\n                      this.setState({\n                        isShowError: true,\n                        message: responseJson.errors,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    }\n                  }\n\n                  if (errorReponse) {\n                    if (apiRequestCallId === this.getUserProfileApiCallId) {\n                      this.setState({\n                        isFetching: false\n                      });\n                    }\n\n                    if (apiRequestCallId === this.getCartProductId) {\n                      this.setState({\n                        isFetching: false\n                      });\n                    }\n\n                    if (apiRequestCallId === this.getCartListApiCallId) {\n                      this.setState({\n                        isShowError: true,\n                        message: errorReponse,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.saveAddressId) {\n                      this.setState({\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.checkAvailabilityId) {\n                      this.setState({\n                        isShowError: true,\n                        message: errorReponse,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.releaseBlockId) {} else if (apiRequestCallId === this.placeOrderId) {\n                      this.setState({\n                        isShowError: true,\n                        message: errorReponse,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.createOrderId) {\n                      this.setState({\n                        isShowError: true,\n                        message: errorReponse,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    } else if (apiRequestCallId === this.verifyRazorPayId) {\n                      this.setState({\n                        isShowError: true,\n                        message: errorReponse,\n                        showAlertModal: true,\n                        isFetching: false\n                      });\n                    }\n                  }\n                } // Customizable Area End\n\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function receive(_x5, _x6) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return OrderSummaryController;\n}(BlockComponent);\n\nexport { OrderSummaryController as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/ordersummary/src/OrderSummaryController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","configJSON","require","OrderSummaryController","props","saveAddressId","checkZipcodeId","checkAvailabilityId","releaseBlockId","placeOrderId","createOrderId","verifyRazorPayId","getUserProfileApiCallId","releaseBlockQuantityApiCallId","apiCall","data","contentType","method","endPoint","body","token","localStorage","getItem","header","requestMessage","RestAPIRequestMessage","addData","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIResponceEndPointMessage","RestAPIRequestMethodMessage","RestAPIRequestBodyMessage","sendMessage","id","messageId","getCartHasProduct","setState","isFetching","ApiContentType","apiMethodTypeGet","cartHasProductAPIEndPoint","getCartProductId","getUserProfile","userProfileApiEndPoint","getUserProfileSuccessCallBack","res","profileData","onSetAddress","isFromShipping","addressData","shippingAddressData","billingAddressData","onAddAddress","navigation","navigate","isFromCheckout","saveAddress","state","params","checkoutData","address","apiMethodTypePut","addAddressToOrder","wholeCartData","releaseBlockQuantity","toggleIsOpen","cartListAPiEndPoint","releaseBlockQuantitySuccessCallBack","console","log","releaseBlockQuantityFailureCallBack","error","checkZipcodeAvailability","shipping","checkZipCodeApiEndPoint","zip_code","checkProductAvailability","prevState","isOpen","onConfirmingOrder","confirVal","window","confirm","placeOrder","paymentType","placeConfirmOrder","orderData","FormData","append","getRazorpayOrderId","order_id","value","createRazorpayApiEndPoint","ApiMethodPostType","razorpayAddonMethod","razorpay_order_id","self","account","attributes","email","full_name","full_phone_number","options","description","currency","key","amount","parseFloat","total","toFixed","handler","response","verifyAddonRazorPay","name","prefill","contact","rzp1","Razorpay","on","notify","message","type","history","push","pathname","open","razorPay_data","razorpay_payment_id","razorpay_signature","razorPayData","verifyRazorpayApiEndPoint","cart_id","is_gift","schedule_time","placeOrderAPIEndPoint","removeItem","onVerifyAddonRazorpaySuccess","orderSuccess","order","placed_at","onHandleBack","receive","bind","subScribedMessages","RestAPIResponceMessage","cardtData","attachBuildingBlock","location","cart","billing_address_data","billing_address_Data","_","lowerCase","parse","countryName","unSubscribeFromMessages","from","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","emptyCartApiCallId","emptyCart","errors","isShowError","showAlertModal","isValidCoupon","getCartListApiCallId"],"mappings":";;;;;;;AAAA;AAGA,SAASA,OAAT,QAAwB,gCAAxB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,OAAOC,WAAP,IACEC,OADF,QAEO,6CAFP;AAGA,SAASC,SAAT,QAA0B,kCAA1B;AACA,OAAO,IAAMC,UAAU,GAAGC,OAAO,CAAC,UAAD,CAA1B;;IA0BcC,sB;;;;;AAenB,kCAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACxB,8BAAMA,KAAN;AADwB,UAV1BC,aAU0B;AAAA,UAT1BC,cAS0B;AAAA,UAR1BC,mBAQ0B;AAAA,UAP1BC,cAO0B;AAAA,UAN1BC,YAM0B;AAAA,UAL1BC,aAK0B;AAAA,UAJ1BC,gBAI0B;AAAA,UAH1BC,uBAG0B;AAAA,UAF1BC,6BAE0B;;AAAA,UAwO1BC,OAxO0B;AAAA,0EAwOhB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,gBAAAA,WADA,GACwCD,IADxC,CACAC,WADA,EACaC,MADb,GACwCF,IADxC,CACaE,MADb,EACqBC,QADrB,GACwCH,IADxC,CACqBG,QADrB,EAC+BC,IAD/B,GACwCJ,IADxC,CAC+BI,IAD/B;AAEFC,gBAAAA,KAFE,GAEMC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAFN;AAGFC,gBAAAA,MAHE,GAGO;AACb,kCAAgBP,WADH;AAEbI,kBAAAA,KAAK,EAALA;AAFa,iBAHP;AAOFI,gBAAAA,cAPE,GAOe,IAAI5B,OAAJ,CACrBG,OAAO,CAACD,WAAW,CAAC2B,qBAAb,CADc,CAPf;AAURD,gBAAAA,cAAc,CAACE,OAAf,CACE3B,OAAO,CAACD,WAAW,CAAC6B,2BAAb,CADT,EAEEC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAFF;AAIAC,gBAAAA,cAAc,CAACE,OAAf,CACE3B,OAAO,CAACD,WAAW,CAACgC,8BAAb,CADT,EAEEZ,QAFF;AAKAM,gBAAAA,cAAc,CAACE,OAAf,CACE3B,OAAO,CAACD,WAAW,CAACiC,2BAAb,CADT,EAEEd,MAFF;AAIAE,gBAAAA,IAAI,IACFK,cAAc,CAACE,OAAf,CACE3B,OAAO,CAACD,WAAW,CAACkC,yBAAb,CADT,EAEEJ,IAAI,CAACC,SAAL,CAAeV,IAAf,CAFF,CADF;AAKAnB,gBAAAA,SAAS,CAACiC,WAAV,CAAsBT,cAAc,CAACU,EAArC,EAAyCV,cAAzC;AA5BQ,iDA6BDA,cAAc,CAACW,SA7Bd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxOgB;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAwQ1BC,iBAxQ0B,yEAwQN;AAAA;AAAA;AAAA;AAAA;AAClB,oBAAKC,QAAL,CAAc;AAAEC,gBAAAA,UAAU,EAAE;AAAd,eAAd;;AADkB;AAAA,qBAEY,MAAKxB,OAAL,CAAa;AACzCE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cADiB;AAEzCtB,gBAAAA,MAAM,EAAEhB,UAAU,CAACuC,gBAFsB;AAGzCtB,gBAAAA,QAAQ,EAAEjB,UAAU,CAACwC;AAHoB,eAAb,CAFZ;;AAAA;AAElB,oBAAKC,gBAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxQM;AAAA,UAiR1BC,cAjR0B,yEAiRT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACsB,MAAK7B,OAAL,CAAa;AAChDE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cADwB;AAEhDtB,gBAAAA,MAAM,EAAEhB,UAAU,CAACuC,gBAF6B;AAGhDtB,gBAAAA,QAAQ,EAAEjB,UAAU,CAAC2C;AAH2B,eAAb,CADtB;;AAAA;AACf,oBAAKhC,uBADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjRS;;AAAA,UAyR1BiC,6BAzR0B;AAAA,2EAyRM,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAC9B,sBAAKT,QAAL,CAAc;AAAEU,kBAAAA,WAAW,EAAED,GAAf;AAAoBR,kBAAAA,UAAU,EAAE;AAAhC,iBAAd;;AAD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzRN;;AAAA;AAAA;AAAA;AAAA;;AAAA,UA6R1BU,YA7R0B,GA6RX,UAACC,cAAD,EAA0BC,WAA1B,EAA+C;AAC5D,UAAID,cAAJ,EAAoB;AAClB,cAAKZ,QAAL,CAAc;AAAEc,UAAAA,mBAAmB,EAAED;AAAvB,SAAd;AACD,OAFD,MAEO;AACL,cAAKb,QAAL,CAAc;AAAEe,UAAAA,kBAAkB,EAAEF;AAAtB,SAAd;AACD;AACF,KAnSyB;;AAAA,UAqS1BG,YArS0B,GAqSX,UAACJ,cAAD,EAA6B;AAC1C,YAAK7C,KAAL,CAAWkD,UAAX,CAAsBC,QAAtB,CAA+B,cAA/B,EAA+C;AAC7CC,QAAAA,cAAc,EAAE,IAD6B;AAE7CR,QAAAA,YAAY,EAAE,sBAACE,WAAD;AAAA,iBACZ,MAAKF,YAAL,CAAkBC,cAAlB,EAAkCC,WAAlC,CADY;AAAA;AAF+B,OAA/C;AAKD,KA3SyB;;AAAA,UA6S1BO,WA7S0B,yEA6SZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACRP,cAAAA,WADQ,GACM,MAAK9C,KAAL,CAAWkD,UAAX,CAAsBI,KAAtB,CAA4BC,MAA5B,CAAmCC,YADzC;;AAEZ,kBAAIV,WAAW,CAACW,OAAZ,IAAuBX,WAAW,CAACW,OAAZ,CAAoB3B,EAA/C,EAAmD;AACjDgB,gBAAAA,WAAW,CAAC,qBAAD,CAAX,GAAqCA,WAAW,CAACW,OAAZ,CAAoB3B,EAAzD;AACD;;AAJW;AAAA,qBAKe,MAAKpB,OAAL,CAAa;AACtCE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cADc;AAEtCtB,gBAAAA,MAAM,EAAEhB,UAAU,CAAC6D,gBAFmB;AAGtC5C,gBAAAA,QAAQ,EACNjB,UAAU,CAAC8D,iBAAX,GACA,GADA,GAEA,MAAKL,KAAL,CAAWM,aAAX,CAAyB9B,EAFzB,GAGA,uBAPoC;AAQtCf,gBAAAA,IAAI,EAAE+B;AARgC,eAAb,CALf;;AAAA;AAKZ,oBAAK7C,aALO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7SY;AAAA,UA8T1B4D,oBA9T0B,yEA8TH;AAAA;AAAA;AAAA;AAAA;AACrB,oBAAKC,YAAL;;AADqB;AAAA,qBAGsB,MAAKpD,OAAL,CAAa;AACtDE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cAD8B;AAEtDtB,gBAAAA,MAAM,EAAEhB,UAAU,CAAC6D,gBAFmC;AAGtD5C,gBAAAA,QAAQ,EACNjB,UAAU,CAACkE,mBAAX,GACA,GADA,GAEA,MAAKT,KAAL,CAAWM,aAAX,CAAyB9B,EAFzB,GAGA;AAPoD,eAAb,CAHtB;;AAAA;AAGrB,oBAAKrB,6BAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9TG;;AAAA,UA4U1BuD,mCA5U0B,GA4UY,UAACtB,GAAD,EAAc;AAClDuB,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ,EAAyExB,GAAzE;AACD,KA9UyB;;AAAA,UAgV1ByB,mCAhV0B,GAgVY,UAACC,KAAD,EAAgB;AACpDH,MAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ,EAAyEE,KAAzE;AACD,KAlVyB;;AAAA,UAoV1BC,wBApV0B,yEAoVC;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB,oBAAKP,YAAL;;AAEMQ,cAAAA,QAHmB,GAGR,MAAKhB,KAAL,CAAWR,WAHH;AAAA;AAAA,qBAIG,MAAKpC,OAAL,CAAa;AACvCE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cADe;AAEvCtB,gBAAAA,MAAM,EAAEhB,UAAU,CAACuC,gBAFoB;AAGvCtB,gBAAAA,QAAQ,EAAEjB,UAAU,CAAC0E,uBAAX,GAAqCD,QAAQ,CAACE;AAHjB,eAAb,CAJH;;AAAA;AAIzB,oBAAKtE,cAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApVD;AAAA,UA+V1BuE,wBA/V0B,yEA+VC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQ,MAAK/D,OAAL,CAAa;AAC5CE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cADoB;AAE5CtB,gBAAAA,MAAM,EAAEhB,UAAU,CAACuC,gBAFyB;AAG5CtB,gBAAAA,QAAQ,EACNjB,UAAU,CAACkE,mBAAX,GACA,GADA,GAEA,MAAKT,KAAL,CAAWM,aAAX,CAAyB9B,EAFzB,GAGA;AAP0C,eAAb,CADR;;AAAA;AACzB,oBAAK3B,mBADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/VD;;AAAA,UA2W1B2D,YA3W0B,GA2WX,YAAM;AACnB,YAAK7B,QAAL,CAAc,UAAAyC,SAAS;AAAA,eAAK;AAC1BC,UAAAA,MAAM,EAAE,CAACD,SAAS,CAACC;AADO,SAAL;AAAA,OAAvB;AAGD,KA/WyB;;AAAA,UAiX1BC,iBAjX0B,GAiXN,YAAM;AACxB,UAAMC,SAAS,GAAGC,MAAM,CAACC,OAAP,CAChB,uCADgB,CAAlB;;AAGA,UAAIF,SAAJ,EAAe;AACb,cAAKR,wBAAL;AACD,OAFD,MAEO;AACL,cAAKR,oBAAL;AACD;AACF,KA1XyB;;AAAA,UA4X1BmB,UA5X0B,yEA4Xb;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,kBAAI,MAAK1B,KAAL,CAAW2B,WAAX,KAA2B,KAA/B,EAAsC;AACpC,sBAAKC,iBAAL,GADoC,CAEpC;;AACD,eAHD,MAGO;AACCpD,gBAAAA,EADD,GACM,MAAKwB,KAAL,CAAWM,aADjB;AAEDuB,gBAAAA,SAFC,GAEW,IAAIC,QAAJ,EAFX;AAGLD,gBAAAA,SAAS,CAACE,MAAV,CAAiB,UAAjB,EAA6BvD,EAA7B;;AACA,sBAAKwD,kBAAL,GAJK,CAKL;;AACD;;AAVU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5Xa;AAAA,UAyY1BA,kBAzY0B,yEAyYL;AAAA;AAAA;AAAA;AAAA;AAAA;AACXxD,cAAAA,EADW,GACJ,MAAKwB,KAAL,CAAWM,aADP,CACX9B,EADW;AAEfnB,cAAAA,IAFe,GAER;AACT4E,gBAAAA,QAAQ,EAAEzD,EADD;AAET0D,gBAAAA,KAAK,EAAE;AAFE,eAFQ;AAAA;AAAA,qBAMQ,MAAK9E,OAAL,CAAa;AACtCI,gBAAAA,QAAQ,EAAEjB,UAAU,CAAC4F,yBADiB;AAEtC7E,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cAFc;AAGtCtB,gBAAAA,MAAM,EAAEhB,UAAU,CAAC6F,iBAHmB;AAItC3E,gBAAAA,IAAI,EAAEJ;AAJgC,eAAb,CANR;;AAAA;AAMnB,oBAAKL,aANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAzYK;;AAAA,UAuZ1BqF,mBAvZ0B;AAAA,4EAuZJ,mBAAOC,iBAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdC,gBAAAA,IADc;AAAA,wCAE4B,MAAKvC,KAAL,CAAWM,aAAX,CAAyBkC,OAAzB,CAAiCC,UAF7D,EAEZC,KAFY,yBAEZA,KAFY,EAELC,SAFK,yBAELA,SAFK,EAEMC,iBAFN,yBAEMA,iBAFN;AAIhBC,gBAAAA,OAJgB,GAIN;AACZC,kBAAAA,WAAW,EAAE,8BADD;AAEZ;AACAC,kBAAAA,QAAQ,EAAE,KAHE;AAIZC,kBAAAA,GAAG,EAAE,yBAJO;AAIoB;AAChCC,kBAAAA,MAAM,YAAMC,UAAU,CAAC,MAAKlD,KAAL,CAAWM,aAAX,CAAyB6C,KAA1B,CAAV,CAA2CC,OAA3C,CAAmD,CAAnD,IAAwD,GAA9D,CALM;AAMZC,kBAAAA,OAAO,EAAE,iBAAUC,QAAV,EAAoB;AAC3Bf,oBAAAA,IAAI,CAACgB,mBAAL,CAAyBD,QAAzB;AACD,mBARW;AASZE,kBAAAA,IAAI,EAAE,mBATM;AAUZvB,kBAAAA,QAAQ,EAAEK,iBAVE;AAWZmB,kBAAAA,OAAO,EAAE;AACPf,oBAAAA,KAAK,EAAEA,KADA;AAEPgB,oBAAAA,OAAO,EAAEd,iBAFF;AAGPY,oBAAAA,IAAI,EAAEb;AAHC,mBAXG,CAgBZ;;AAhBY,iBAJM;AAsBhBgB,gBAAAA,IAtBgB,GAsBT,IAAIC,QAAJ,CAAaf,OAAb,CAtBS;AAuBpBc,gBAAAA,IAAI,CAACE,EAAL,CAAQ,gBAAR,EAA0B,UAAUP,QAAV,EAAoB;AAC5C9B,kBAAAA,MAAM,CAACsC,MAAP,CAAc,CAAC;AAAEC,oBAAAA,OAAO,EAAET,QAAQ,CAACxC,KAAT,CAAegC,WAA1B;AAAuCkB,oBAAAA,IAAI,EAAE;AAA7C,mBAAD,CAAd;AACAzB,kBAAAA,IAAI,CAAChC,oBAAL;AACAgC,kBAAAA,IAAI,CAAC7F,KAAL,CAAWuH,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,oBAAAA,QAAQ,EAAE;AADY,mBAAxB;AAGD,iBAND;AAOAR,gBAAAA,IAAI,CAACS,IAAL,CAAUvB,OAAV;;AA9BoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAvZI;;AAAA;AAAA;AAAA;AAAA;;AAAA,UAwb1BU,mBAxb0B;AAAA,4EAwbJ,mBAAOc,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAElB/B,gBAAAA,iBAFkB,GAKhB+B,aALgB,CAElB/B,iBAFkB,EAGlBgC,mBAHkB,GAKhBD,aALgB,CAGlBC,mBAHkB,EAIlBC,kBAJkB,GAKhBF,aALgB,CAIlBE,kBAJkB;AAOhBC,gBAAAA,YAPgB,GAOD;AACjBlC,kBAAAA,iBAAiB,EAAEA,iBADF;AAEjBgC,kBAAAA,mBAAmB,EAAEA,mBAFJ;AAGjBC,kBAAAA,kBAAkB,EAAEA;AAHH,iBAPC;AAAA;AAAA,uBAYU,MAAKnH,OAAL,CAAa;AACzCI,kBAAAA,QAAQ,EAAEjB,UAAU,CAACkI,yBADoB;AAEzCnH,kBAAAA,WAAW,EAAEf,UAAU,CAACsC,cAFiB;AAGzCtB,kBAAAA,MAAM,EAAEhB,UAAU,CAAC6F,iBAHsB;AAIzC3E,kBAAAA,IAAI,EAAE+G;AAJmC,iBAAb,CAZV;;AAAA;AAYpB,sBAAKvH,gBAZe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxbI;;AAAA;AAAA;AAAA;AAAA;;AAAA,UA4c1B2E,iBA5c0B,yEA4cN;AAAA;AAAA;AAAA;AAAA;AAAA;AACZvE,cAAAA,IADY,GACL;AACXqH,gBAAAA,OAAO,EAAE,MAAK1E,KAAL,CAAWM,aAAX,CAAyB9B,EADvB;AAEXmG,gBAAAA,OAAO,EAAE,KAFE;AAGXC,gBAAAA,aAAa,EAAE;AAHJ,eADK;AAAA;AAAA,qBAMQ,MAAKxH,OAAL,CAAa;AACrCE,gBAAAA,WAAW,EAAEf,UAAU,CAACsC,cADa;AAErCtB,gBAAAA,MAAM,EAAEhB,UAAU,CAAC6F,iBAFkB;AAGrC5E,gBAAAA,QAAQ,EAAEjB,UAAU,CAACsI,qBAHgB;AAIrCpH,gBAAAA,IAAI,EAAEJ;AAJ+B,eAAb,CANR;;AAAA;AAMlB,oBAAKN,YANa;AAYlBY,cAAAA,YAAY,CAACmH,UAAb,CAAwB,aAAxB;;AAZkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5cM;;AAAA,UA2d1BC,4BA3d0B,GA2dK,UAAC3F,GAAD,EAAc;AAC3C,UAAIA,GAAJ,EAAS;AACP,cAAK1C,KAAL,CAAWuH,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,UAAAA,QAAQ,EAAE,eADY;AAEtBnE,UAAAA,KAAK,EAAE;AACLgF,YAAAA,YAAY,EAAE,IADT;AAELnD,YAAAA,SAAS,EAAE;AACToD,cAAAA,KAAK,EAAE;AACLC,gBAAAA,SAAS,EAAE9F,GAAG,CAAC6F,KAAJ,CAAUC,SADhB;AAEL/B,gBAAAA,KAAK,EAAE/D,GAAG,CAAC6F,KAAJ,CAAU9B;AAFZ;AADE;AAFN;AAFe,SAAxB;AAaD;;AAEDxF,MAAAA,YAAY,CAACmH,UAAb,CAAwB,aAAxB;AAGD,KA/eyB;;AAAA,UAif1BK,YAjf0B,GAifX,YAAM;AACnB,YAAKzI,KAAL,CAAWuH,OAAX,CAAmBC,IAAnB,CAAwB,WAAxB;AACD,KAnfyB;;AAExB,UAAKkB,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf,CAFwB,CAIxB;;AACA,UAAKC,kBAAL,GAA0B,CAACjJ,OAAO,CAACD,WAAW,CAACmJ,sBAAb,CAAR,CAA1B;AAEA,UAAKvF,KAAL,GAAa;AACX2B,MAAAA,WAAW,EAAE,QADF;AAEX6D,MAAAA,SAAS,EAAE,EAFA;AAGXlF,MAAAA,aAAa,EAAE,EAHJ;AAIXd,MAAAA,WAAW,EAAE,EAJF;AAKX8C,MAAAA,iBAAiB,EAAE;AALR,KAAb,CAPwB,CAcxB;;AACAhG,IAAAA,SAAS,CAACmJ,mBAAV,gCAA8C,MAAKH,kBAAnD;AAfwB;AAgBzB;;;;;wFAED;AAAA;AAAA;AAAA;AAAA;AAAA;AACQE,gBAAAA,SADR,GACoB,KAAK9I,KAAL,CAAWuH,OAAX,CAAmByB,QAAnB,CAA4B1F,KAA5B,CAAkC2F,IADtD;AAEQnG,gBAAAA,WAFR,GAEsB,KAAK9C,KAAL,CAAWuH,OAAX,CAAmByB,QAAnB,CAA4B1F,KAA5B,CAAkCR,WAFxD;AAGQoG,gBAAAA,oBAHR,GAG+B,KAAKlJ,KAAL,CAAWuH,OAAX,CAAmByB,QAAnB,CAA4B1F,KAA5B,CAAkC6F,oBAHjE;AAIQvF,gBAAAA,aAJR,GAIwB,KAAK5D,KAAL,CAAWuH,OAAX,CAAmByB,QAAnB,CAA4B1F,KAA5B,CAAkCwF,SAJ1D;AAKE,qBAAK7G,QAAL,CAAc;AAAE6G,kBAAAA,SAAS,EAAEA,SAAb;AAAwBhG,kBAAAA,WAAW,EAAEA,WAArC;AAAkDoG,kBAAAA,oBAAoB,EAAEA,oBAAxE;AAA8FtF,kBAAAA,aAAa,EAAEA;AAA7G,iBAAd;AACA;;AACA,oBAAIwF,CAAC,CAACC,SAAF,CAAY7H,IAAI,CAAC8H,KAAL,CAAWrI,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,EAAgDqI,WAA5D,KAA4E,IAAhF,EAAsF;AACpF,uBAAKtH,QAAL,CAAc;AACZgD,oBAAAA,WAAW,EAAE;AADD,mBAAd;AAGD;AACD;;;AACA,oBAAImE,CAAC,CAACC,SAAF,CAAY7H,IAAI,CAAC8H,KAAL,CAAWrI,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,EAAgDqI,WAA5D,KAA4E,OAAhF,EAAyF;AACvF,uBAAKtH,QAAL,CAAc;AACZgD,oBAAAA,WAAW,EAAE;AADD,mBAAd;AAGD;;AAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2FAoBA;AAAA;AAAA;AAAA;AAAA;AACErF,gBAAAA,SAAS,CAAC4J,uBAAV,CAAkC,IAAlC,EAAwC,KAAKZ,kBAA7C;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAKA,mBAAca,IAAd,EAA4BpC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAEA,oBAAI1H,OAAO,CAACD,WAAW,CAACmJ,sBAAb,CAAP,KAAgDxB,OAAO,CAACvF,EAA5D,EAAgE;AACxD4H,kBAAAA,gBADwD,GACrCrC,OAAO,CAACsC,OAAR,CACvBhK,OAAO,CAACD,WAAW,CAACkK,0BAAb,CADgB,CADqC;AAK1DC,kBAAAA,YAL0D,GAK3CxC,OAAO,CAACsC,OAAR,CACjBhK,OAAO,CAACD,WAAW,CAACoK,6BAAb,CADU,CAL2C;AAS1DC,kBAAAA,YAT0D,GAS3C1C,OAAO,CAACsC,OAAR,CACjBhK,OAAO,CAACD,WAAW,CAACsK,2BAAb,CADU,CAT2C;;AAa9D,sBAAIN,gBAAgB,KAAK,KAAKO,kBAA9B,EAAkD;AAChD,yBAAKhI,QAAL,CAAc;AACZiI,sBAAAA,SAAS,EAAE,IADC;AAEZhI,sBAAAA,UAAU,EAAE;AAFA,qBAAd;AAID;;AACD,sBAAI2H,YAAY,IAAIA,YAAY,CAAClJ,IAAjC,EAAuC;AAErC,wBAAI+I,gBAAgB,KAAK,KAAKtJ,cAA9B,EAA8C,CAC7C,CADD,MACO,IAAIsJ,gBAAgB,KAAK,KAAKrJ,YAA9B,EAA4C;AACjD,0BAAIwJ,YAAJ,EAAkB;AAChB,6BAAK7J,KAAL,CAAWuH,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,0BAAAA,QAAQ,EAAE,eADY;AAEtBnE,0BAAAA,KAAK,EAAE;AACL6B,4BAAAA,SAAS,EAAE;AACToD,8BAAAA,KAAK,EAAE;AACLC,gCAAAA,SAAS,EAAEqB,YAAY,CAAClJ,IAAb,CAAkB6H,SADxB;AAEL/B,gCAAAA,KAAK,EAAEoD,YAAY,CAAClJ,IAAb,CAAkB8F;AAFpB;AADE;AADN;AAFe,yBAAxB;AAYD;AACF;;AACD,wBAAIiD,gBAAgB,KAAK,KAAKpJ,aAA9B,EAA6C;AAC3C,2BAAKqF,mBAAL,CACEkE,YAAY,CAAClJ,IAAb,CAAkB4H,KAAlB,CAAwB5H,IAAxB,CAA6BoF,UAA7B,CAAwCH,iBAD1C;AAGD,qBAJD,MAIO,IAAI8D,gBAAgB,KAAK,KAAKnJ,gBAA9B,EAAgD;AACrD,2BAAK8H,4BAAL,CAAkCwB,YAAY,CAAClJ,IAA/C;AACD;AACF;;AACD,sBAAIkJ,YAAY,IAAIA,YAAY,CAACxC,OAAjC,EAA0C;AAExC,wBAAIqC,gBAAgB,KAAK,KAAKvJ,mBAA9B,EAAmD;AAEjD,0BACE0J,YAAY,CAACxC,OAAb,KACA,6BAFF,EAGE;AACA,6BAAKrC,UAAL;AACD,uBALD,MAKO;AACLF,wBAAAA,MAAM,CAACsC,MAAP,CAAc,CAAC;AAAEC,0BAAAA,OAAO,EAAEwC,YAAY,CAACM,MAAxB;AAAgC7C,0BAAAA,IAAI,EAAE;AAAtC,yBAAD,CAAd;AACD;AACF,qBAVD,MAUO,IAAIoC,gBAAgB,KAAK,KAAKxJ,cAA9B,EAA8C;AACnD,0BACE2J,YAAY,CAACxC,OAAb,KACA,+DAFF,EAGE;AACAvC,wBAAAA,MAAM,CAACsC,MAAP,CAAc,CAAC;AAAEC,0BAAAA,OAAO,EAAEwC,YAAY,CAACxC,OAAxB;AAAiCC,0BAAAA,IAAI,EAAE;AAAvC,yBAAD,CAAd;AACD,uBALD,MAKO;AACL,6BAAK7C,wBAAL;AACD;AACF,qBATM,MASA,IAAIiF,gBAAgB,KAAK,KAAKtJ,cAA9B,EAA8C,CACpD,CADM,MACA,IAAIsJ,gBAAgB,KAAK,KAAKrJ,YAA9B,EAA4C;AACjD,2BAAK4B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,KADD;AAEZ/C,wBAAAA,OAAO,EAAEwC,YAAY,CAACxC,OAFV;AAGZgD,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE,KAJA;AAKZoI,wBAAAA,aAAa,EAAE;AALH,uBAAd;AAOD,qBARM,MAQA,IAAIZ,gBAAgB,KAAK,KAAKpJ,aAA9B,EAA6C;AAClD,2BAAK2B,QAAL,CAAc;AACZC,wBAAAA,UAAU,EAAE;AADA,uBAAd;AAGD,qBAJM,MAIA,IAAIwH,gBAAgB,KAAK,KAAKnJ,gBAA9B,EAAgD;AACrD,2BAAKsD,oBAAL;AACA,2BAAK5B,QAAL,CAAc;AACZC,wBAAAA,UAAU,EAAE;AADA,uBAAd;AAGD,qBALM,MAKA,IAAIwH,gBAAgB,KAAK,KAAKjJ,6BAA9B,EAA6D;AAClE,2BAAK0D,mCAAL,CAAyC0F,YAAY,CAACxC,OAAtD;AACD;AACF;;AACD,sBAAIwC,YAAY,IAAIA,YAAY,CAACM,MAAjC,EAAyC;AACvC,wBAAIT,gBAAgB,KAAK,KAAKvJ,mBAA9B,EAAmD;AACjD,2BAAK8B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAEwC,YAAY,CAACM,MAFV;AAGZE,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPD,MAOO,IAAIwH,gBAAgB,KAAK,KAAKxJ,cAA9B,EAA8C;AACnD,2BAAK+B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAEwC,YAAY,CAACM,MAFV;AAGZE,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE,KAJA;AAKZoI,wBAAAA,aAAa,EAAE;AALH,uBAAd;AAOD,qBARM,MAQA,IAAIZ,gBAAgB,KAAK,KAAKtJ,cAA9B,EAA8C,CACpD,CADM,MACA,IAAIsJ,gBAAgB,KAAK,KAAKrJ,YAA9B,EAA4C;AACjD,2BAAK4B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAEwC,YAAY,CAACM,MAFV;AAGZE,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPM,MAOA,IAAIwH,gBAAgB,KAAK,KAAKpJ,aAA9B,EAA6C;AAClD,2BAAK2B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAEwC,YAAY,CAACM,MAFV;AAGZE,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPM,MAOA,IAAIwH,gBAAgB,KAAK,KAAKnJ,gBAA9B,EAAgD;AACrD,2BAAK0B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAEwC,YAAY,CAACM,MAFV;AAGZE,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD;AACF;;AACD,sBAAI6H,YAAJ,EAAkB;AAChB,wBAAIL,gBAAgB,KAAK,KAAKlJ,uBAA9B,EAAuD;AACrD,2BAAKyB,QAAL,CAAc;AACZC,wBAAAA,UAAU,EAAE;AADA,uBAAd;AAGD;;AACD,wBAAIwH,gBAAgB,KAAK,KAAKpH,gBAA9B,EAAgD;AAC9C,2BAAKL,QAAL,CAAc;AACZC,wBAAAA,UAAU,EAAE;AADA,uBAAd;AAGD;;AACD,wBAAIwH,gBAAgB,KAAK,KAAKa,oBAA9B,EAAoD;AAClD,2BAAKtI,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAE0C,YAFG;AAGZM,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPD,MAOO,IAAIwH,gBAAgB,KAAK,KAAKzJ,aAA9B,EAA6C;AAClD,2BAAKgC,QAAL,CAAc;AACZC,wBAAAA,UAAU,EAAE;AADA,uBAAd;AAGD,qBAJM,MAIA,IAAIwH,gBAAgB,KAAK,KAAKvJ,mBAA9B,EAAmD;AACxD,2BAAK8B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAE0C,YAFG;AAGZM,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPM,MAOA,IAAIwH,gBAAgB,KAAK,KAAKtJ,cAA9B,EAA8C,CACpD,CADM,MACA,IAAIsJ,gBAAgB,KAAK,KAAKrJ,YAA9B,EAA4C;AACjD,2BAAK4B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAE0C,YAFG;AAGZM,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPM,MAOA,IAAIwH,gBAAgB,KAAK,KAAKpJ,aAA9B,EAA6C;AAClD,2BAAK2B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAE0C,YAFG;AAGZM,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD,qBAPM,MAOA,IAAIwH,gBAAgB,KAAK,KAAKnJ,gBAA9B,EAAgD;AACrD,2BAAK0B,QAAL,CAAc;AACZmI,wBAAAA,WAAW,EAAE,IADD;AAEZ/C,wBAAAA,OAAO,EAAE0C,YAFG;AAGZM,wBAAAA,cAAc,EAAE,IAHJ;AAIZnI,wBAAAA,UAAU,EAAE;AAJA,uBAAd;AAMD;AACF;AACF,iBAzLH,CA0LE;;;AA1LF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EA1DkDzC,c;;SAA/BM,sB","sourcesContent":["//@ts-nocheck\nimport React from \"react\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nexport const configJSON = require(\"./config\");\n\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  history: any;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  paymentType: string;\n  cardtData: any;\n  wholeCartData: any;\n  addressData: any;\n  razorpay_order_id: any;\n  isOpen: any;\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class OrderSummaryController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  saveAddressId: any;\n  checkZipcodeId: any;\n  checkAvailabilityId: any;\n  releaseBlockId: any;\n  placeOrderId: any;\n  createOrderId: any;\n  verifyRazorPayId: any;\n  getUserProfileApiCallId: any;\n  releaseBlockQuantityApiCallId: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n\n    this.state = {\n      paymentType: \"stripe\",\n      cardtData: \"\",\n      wholeCartData: \"\",\n      addressData: \"\",\n      razorpay_order_id: \"\"\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  async componentDidMount() {\n    const cardtData = this.props.history.location.state.cart;\n    const addressData = this.props.history.location.state.addressData;\n    const billing_address_data = this.props.history.location.state.billing_address_Data;\n    const wholeCartData = this.props.history.location.state.cardtData;\n    this.setState({ cardtData: cardtData, addressData: addressData, billing_address_data: billing_address_data, wholeCartData: wholeCartData })\n    /* @ts-ignore */\n    if (_.lowerCase(JSON.parse(localStorage.getItem('countryCode')).countryName) == 'uk') {\n      this.setState({\n        paymentType: \"stripe\"\n      })\n    }\n    /* @ts-ignore */\n    if (_.lowerCase(JSON.parse(localStorage.getItem('countryCode')).countryName) == 'india') {\n      this.setState({\n        paymentType: \"razorpay\"\n      })\n    }\n  }\n\n  async componentWillUnmount() {\n    runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n  }\n\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      if (apiRequestCallId === this.emptyCartApiCallId) {\n        this.setState({\n          emptyCart: true,\n          isFetching: false\n        });\n      }\n      if (responseJson && responseJson.data) {\n\n        if (apiRequestCallId === this.releaseBlockId) {\n        } else if (apiRequestCallId === this.placeOrderId) {\n          if (responseJson) {\n            this.props.history.push({\n              pathname: '/order-placed',\n              state: {\n                orderData: {\n                  order: {\n                    placed_at: responseJson.data.placed_at,\n                    total: responseJson.data.total\n                  }\n                }\n              }\n            })\n\n          }\n        }\n        if (apiRequestCallId === this.createOrderId) {\n          this.razorpayAddonMethod(\n            responseJson.data.order.data.attributes.razorpay_order_id\n          );\n        } else if (apiRequestCallId === this.verifyRazorPayId) {\n          this.onVerifyAddonRazorpaySuccess(responseJson.data);\n        }\n      }\n      if (responseJson && responseJson.message) {\n\n        if (apiRequestCallId === this.checkAvailabilityId) {\n\n          if (\n            responseJson.message ===\n            \"All products are available.\"\n          ) {\n            this.placeOrder();\n          } else {\n            window.notify([{ message: responseJson.errors, type: \"error\" }]);\n          }\n        } else if (apiRequestCallId === this.checkZipcodeId) {\n          if (\n            responseJson.message ===\n            \"Sorry, currently delivery is not available for this location.\"\n          ) {\n            window.notify([{ message: responseJson.message, type: \"error\" }]);\n          } else {\n            this.checkProductAvailability();\n          }\n        } else if (apiRequestCallId === this.releaseBlockId) {\n        } else if (apiRequestCallId === this.placeOrderId) {\n          this.setState({\n            isShowError: false,\n            message: responseJson.message,\n            showAlertModal: true,\n            isFetching: false,\n            isValidCoupon: false\n          });\n        } else if (apiRequestCallId === this.createOrderId) {\n          this.setState({\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.verifyRazorPayId) {\n          this.releaseBlockQuantity();\n          this.setState({\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.releaseBlockQuantityApiCallId) {\n          this.releaseBlockQuantityFailureCallBack(responseJson.message);\n        }\n      }\n      if (responseJson && responseJson.errors) {\n        if (apiRequestCallId === this.checkAvailabilityId) {\n          this.setState({\n            isShowError: true,\n            message: responseJson.errors,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.checkZipcodeId) {\n          this.setState({\n            isShowError: true,\n            message: responseJson.errors,\n            showAlertModal: true,\n            isFetching: false,\n            isValidCoupon: false\n          });\n        } else if (apiRequestCallId === this.releaseBlockId) {\n        } else if (apiRequestCallId === this.placeOrderId) {\n          this.setState({\n            isShowError: true,\n            message: responseJson.errors,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.createOrderId) {\n          this.setState({\n            isShowError: true,\n            message: responseJson.errors,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.verifyRazorPayId) {\n          this.setState({\n            isShowError: true,\n            message: responseJson.errors,\n            showAlertModal: true,\n            isFetching: false\n          });\n        }\n      }\n      if (errorReponse) {\n        if (apiRequestCallId === this.getUserProfileApiCallId) {\n          this.setState({\n            isFetching: false\n          });\n        }\n        if (apiRequestCallId === this.getCartProductId) {\n          this.setState({\n            isFetching: false\n          });\n        }\n        if (apiRequestCallId === this.getCartListApiCallId) {\n          this.setState({\n            isShowError: true,\n            message: errorReponse,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.saveAddressId) {\n          this.setState({\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.checkAvailabilityId) {\n          this.setState({\n            isShowError: true,\n            message: errorReponse,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.releaseBlockId) {\n        } else if (apiRequestCallId === this.placeOrderId) {\n          this.setState({\n            isShowError: true,\n            message: errorReponse,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.createOrderId) {\n          this.setState({\n            isShowError: true,\n            message: errorReponse,\n            showAlertModal: true,\n            isFetching: false\n          });\n        } else if (apiRequestCallId === this.verifyRazorPayId) {\n          this.setState({\n            isShowError: true,\n            message: errorReponse,\n            showAlertModal: true,\n            isFetching: false\n          });\n        }\n      }\n    }\n    // Customizable Area End\n  }\n\n  apiCall = async (data: any) => {\n    const { contentType, method, endPoint, body } = data;\n    const token = localStorage.getItem(\"token\");\n    const header = {\n      \"Content-Type\": contentType,\n      token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      endPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      method\n    );\n    body &&\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(body)\n      );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return requestMessage.messageId;\n  };\n\n  getCartHasProduct = async () => {\n    this.setState({ isFetching: false });\n    this.getCartProductId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint: configJSON.cartHasProductAPIEndPoint\n    });\n  };\n\n  getUserProfile = async () => {\n    this.getUserProfileApiCallId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint: configJSON.userProfileApiEndPoint\n    });\n  };\n\n  getUserProfileSuccessCallBack = async (res: any) => {\n    this.setState({ profileData: res, isFetching: false });\n  };\n\n  onSetAddress = (isFromShipping: boolean, addressData: any) => {\n    if (isFromShipping) {\n      this.setState({ shippingAddressData: addressData });\n    } else {\n      this.setState({ billingAddressData: addressData });\n    }\n  };\n\n  onAddAddress = (isFromShipping: boolean) => {\n    this.props.navigation.navigate(\"SavedAddress\", {\n      isFromCheckout: true,\n      onSetAddress: (addressData: any) =>\n        this.onSetAddress(isFromShipping, addressData)\n    });\n  };\n\n  saveAddress = async () => {\n    let addressData = this.props.navigation.state.params.checkoutData;\n    if (addressData.address && addressData.address.id) {\n      addressData['delivery_address_id'] = addressData.address.id\n    }\n    this.saveAddressId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypePut,\n      endPoint:\n        configJSON.addAddressToOrder +\n        \"/\" +\n        this.state.wholeCartData.id +\n        \"/add_address_to_order\",\n      body: addressData\n    });\n  };\n\n  releaseBlockQuantity = async () => {\n    this.toggleIsOpen();\n\n    this.releaseBlockQuantityApiCallId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypePut,\n      endPoint:\n        configJSON.cartListAPiEndPoint +\n        \"/\" +\n        this.state.wholeCartData.id +\n        \"/release_products\"\n    });\n  };\n\n  releaseBlockQuantitySuccessCallBack = (res: any) => {\n    console.log('@@@ Release Block Quantity Success CallBack =============', res);\n  }\n\n  releaseBlockQuantityFailureCallBack = (error: any) => {\n    console.log('@@@ Release Block Quantity Failure CallBack =============', error);\n  }\n\n  checkZipcodeAvailability = async () => {\n    this.toggleIsOpen();\n\n    const shipping = this.state.addressData;\n    this.checkZipcodeId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint: configJSON.checkZipCodeApiEndPoint + shipping.zip_code\n    });\n  };\n\n  checkProductAvailability = async () => {\n    this.checkAvailabilityId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint:\n        configJSON.cartListAPiEndPoint +\n        \"/\" +\n        this.state.wholeCartData.id +\n        \"/check_availability\"\n    });\n  };\n\n  toggleIsOpen = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }))\n  }\n\n  onConfirmingOrder = () => {\n    const confirVal = window.confirm(\n      \"Are you sure want to place the order?\");\n\n    if (confirVal) {\n      this.checkZipcodeAvailability()\n    } else {\n      this.releaseBlockQuantity()\n    }\n  };\n\n  placeOrder = async () => {\n    if (this.state.paymentType === \"cod\") {\n      this.placeConfirmOrder();\n      //localStorage.removeItem(\"cart_length\");\n    } else {\n      const id = this.state.wholeCartData;\n      let orderData = new FormData();\n      orderData.append(\"order_id\", id);\n      this.getRazorpayOrderId();\n      //   localStorage.removeItem(\"cart_length\");\n    }\n  };\n\n  getRazorpayOrderId = async () => {\n    const { id } = this.state.wholeCartData;\n    let data = {\n      order_id: id,\n      value: 1500\n    };\n    this.createOrderId = await this.apiCall({\n      endPoint: configJSON.createRazorpayApiEndPoint,\n      contentType: configJSON.ApiContentType,\n      method: configJSON.ApiMethodPostType,\n      body: data\n    });\n  };\n\n  razorpayAddonMethod = async (razorpay_order_id: any) => {\n    const self = this;\n    const { email, full_name, full_phone_number } = this.state.wholeCartData.account.attributes;\n\n    var options = {\n      description: 'Credits towards consultation',\n      // image: 'https://i.imgur.com/3g7nmJC.png',\n      currency: 'INR',\n      key: 'rzp_test_QDC256wNFutX9J', // Your api key\n      amount: `${(parseFloat(this.state.wholeCartData.total).toFixed(2) * 100)}`,\n      handler: function (response) {\n        self.verifyAddonRazorPay(response);\n      },\n      name: 'Branded Wholesale',\n      order_id: razorpay_order_id,\n      prefill: {\n        email: email,\n        contact: full_phone_number,\n        name: full_name\n      },\n      //  theme: { color: APP_COLORS.app_theme_green_color }\n    }\n    var rzp1 = new Razorpay(options);\n    rzp1.on('payment.failed', function (response) {\n      window.notify([{ message: response.error.description, type: \"error\" }]);\n      self.releaseBlockQuantity();\n      self.props.history.push({\n        pathname: '/transactionfailed',\n      })\n    });\n    rzp1.open(options);\n  }\n\n  verifyAddonRazorPay = async (razorPay_data: any) => {\n    const {\n      razorpay_order_id,\n      razorpay_payment_id,\n      razorpay_signature\n    } = razorPay_data;\n\n    let razorPayData = {\n      razorpay_order_id: razorpay_order_id,\n      razorpay_payment_id: razorpay_payment_id,\n      razorpay_signature: razorpay_signature\n    };\n    this.verifyRazorPayId = await this.apiCall({\n      endPoint: configJSON.verifyRazorpayApiEndPoint,\n      contentType: configJSON.ApiContentType,\n      method: configJSON.ApiMethodPostType,\n      body: razorPayData\n    });\n  };\n\n  placeConfirmOrder = async () => {\n    const data = {\n      cart_id: this.state.wholeCartData.id,\n      is_gift: false,\n      schedule_time: \"\"\n    };\n    this.placeOrderId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.ApiMethodPostType,\n      endPoint: configJSON.placeOrderAPIEndPoint,\n      body: data\n    });\n    localStorage.removeItem(\"cart_length\");\n  };\n\n  onVerifyAddonRazorpaySuccess = (res: any) => {\n    if (res) {\n      this.props.history.push({\n        pathname: '/order-placed',\n        state: {\n          orderSuccess: true,\n          orderData: {\n            order: {\n              placed_at: res.order.placed_at,\n              total: res.order.total\n            }\n          }\n        }\n      })\n\n    }\n\n    localStorage.removeItem(\"cart_length\");\n\n\n  };\n\n  onHandleBack = () => {\n    this.props.history.push(\"/checkout\");\n  }\n}\n"]},"metadata":{},"sourceType":"module"}