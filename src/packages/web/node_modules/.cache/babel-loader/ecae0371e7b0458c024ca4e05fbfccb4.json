{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck;\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\"; // @ts-ignore\n\nimport isEmpty from \"lodash/isEmpty\"; // @ts-ignore\n\nimport cloneDeep from \"lodash/cloneDeep\"; // @ts-ignore\n\nimport map from \"lodash/map\";\nexport var configJSON = require('./config');\n;\n;\n;\n\nvar CheckoutController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(CheckoutController, _BlockComponent);\n\n  var _super = _createSuper(CheckoutController);\n\n  function CheckoutController(props) {\n    var _this;\n\n    _classCallCheck(this, CheckoutController);\n\n    _this = _super.call(this, props);\n    _this.addNewAddressAPICallId = \"\";\n    _this.getUserDeliveryAddressAPICallId = \"\";\n    _this.updateDeliveryAddressByIdAPICallId = \"\";\n    _this.deleteDeliveryAddressByIdAPICallId = \"\";\n    _this.calculateShippingAddressChargeCallId = \"\";\n    _this.releaseShippingAddressChargeCallId = \"\";\n    _this.backListener = void 0;\n    _this.auth = window.localStorage.getItem(\"token\");\n    _this.GetCartApiCallId = \"\";\n    _this.putUpdateCartQuantityApiCallId = \"\";\n    _this.delCartItemApiCallId = \"\";\n    _this.postWishlistApiCallId = \"\";\n    _this.postApplyCouponApiCallId = \"\";\n    _this.delCouponApiCallId = \"\";\n    _this.postBuyNowApiCallId = \"\";\n    _this.updateDeliveryAddressAPiCallID = \"\";\n\n    _this.addNewAddressHandler = function (values) {\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      var requestBody = {};\n      var checkingExistedData = _this.state.userAddress && _this.state.userAddress.length > 0 ? false : true;\n\n      if (values.billing_address.id) {\n        var address = values.isShippingAddressSame ? \"delivery_address_id\" : \"billing_address_id\";\n        requestBody = _defineProperty({}, address, values.billing_address.id);\n      }\n\n      if (values.isShippingAddressSame == true) {\n        requestBody = _objectSpread(_objectSpread({}, requestBody), {}, {\n          billing_same_as_shipping: values.isShippingAddressSame,\n          // delivery_address_id: values.billing_address.id,\n          address: {\n            \"name\": values.billing_address.name,\n            \"flat_no\": values.billing_address.flat_no,\n            \"address\": values.billing_address.address,\n            \"address_line_2\": values.billing_address.address_line_2,\n            \"city\": values.billing_address.city,\n            \"state\": values.billing_address.state,\n            \"country\": values.billing_address.country,\n            \"zip_code\": values.billing_address.zip_code,\n            \"phone_number\": values.billing_address.phone_number,\n            \"is_default\": checkingExistedData,\n            billing_address: {\n              \"name\": values.billing_address.name,\n              \"flat_no\": values.billing_address.flat_no,\n              \"address\": values.billing_address.address,\n              \"address_line_2\": values.billing_address.address_line_2,\n              \"city\": values.billing_address.city,\n              \"state\": values.billing_address.state,\n              \"country\": values.billing_address.country,\n              \"zip_code\": values.billing_address.zip_code,\n              \"phone_number\": values.billing_address.phone_number,\n              \"is_default\": checkingExistedData\n            }\n          }\n        });\n      } else {\n        requestBody = _objectSpread(_objectSpread({}, requestBody), {}, {\n          billing_same_as_shipping: values.isShippingAddressSame,\n          // delivery_address_id: values.billing_address.id,\n          address: {\n            \"name\": values.address.name,\n            \"flat_no\": values.address.flat_no,\n            \"address\": values.address.address,\n            \"address_line_2\": values.address.address_line_2,\n            \"city\": values.address.city,\n            \"state\": values.address.state,\n            \"country\": values.address.country,\n            \"zip_code\": values.address.zip_code,\n            \"phone_number\": values.address.phone_number,\n            \"is_default\": checkingExistedData,\n            billing_address: {\n              \"name\": values.billing_address.name,\n              \"flat_no\": values.billing_address.flat_no,\n              \"address\": values.billing_address.address,\n              \"address_line_2\": values.billing_address.address_line_2,\n              \"city\": values.billing_address.city,\n              \"state\": values.billing_address.state,\n              \"country\": values.billing_address.country,\n              \"zip_code\": values.billing_address.zip_code,\n              \"phone_number\": values.billing_address.phone_number,\n              \"is_default\": checkingExistedData\n            }\n          }\n        });\n      }\n\n      _this.addNewAddressAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.addAddressToOrder + \"/\" + _this.state.wholeCart.id + \"/add_address_to_order\");\n      console.log(requestBody, \"+++++++++++++++++request body+++++++++++++++++++++=\");\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n\n      _this.updateDeliveryAddress(_this.state.deliveryId, values.billing_address.zip_code);\n\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.getDeliveryAddressList = function () {\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var token = localStorage.getItem(\"token\");\n      _this.getUserDeliveryAddressAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getUserDeliveryAddressAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.calculateShippingAddressCharge = function () {\n      var _this$state, _this$state2, _this$state2$delivery;\n\n      // this.setState({\n      //     loading: true\n      // })\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var token = localStorage.getItem(\"token\");\n      var httpBody = {\n        cart_id: (_this$state = _this.state) === null || _this$state === void 0 ? void 0 : _this$state.cartId,\n        zipcode: isEmpty(_this.state.zipCode) ? (_this$state2 = _this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$delivery = _this$state2.deliveryAddressID) === null || _this$state2$delivery === void 0 ? void 0 : _this$state2$delivery.zip_code : _this.state.zipCode\n      }; //@ts-ignore\n\n      window.notify([{\n        type: 'info',\n        message: 'Please Wait your ZipCode Validating!'\n      }]);\n      _this.calculateShippingAddressChargeCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.calculateShippingAddressChargeAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.releaseShippingCharge = function () {\n      var _this$state3;\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var token = localStorage.getItem(\"token\");\n      var httpBody = {\n        cart_id: (_this$state3 = _this.state) === null || _this$state3 === void 0 ? void 0 : _this$state3.cartId\n      };\n      _this.releaseShippingAddressChargeCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.releaseShippingAddressChargeAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.getCart = function () {\n      var headers = {\n        \"Content-Type\": configJSON.validationApiContentType,\n        token: localStorage.getItem(\"token\")\n      };\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.GetCartApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiGetIsCartCreated);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    _this.postApplyCoupon = function (code, amount) {\n      var header = {\n        \"Content-Type\": configJSON.validationApiContentType,\n        token: localStorage.getItem(\"token\")\n      };\n      var httpBody = {\n        \"code\": code,\n        \"cart_value\": amount\n      };\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.postApplyCouponApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPostApplyCoupon + \"\".concat(_this.state.cartId, \"/apply_coupon\"));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.exampleAPiMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    _this.postBuyNow = function (catalogue_id, catalogue_variant_id) {\n      var header = {\n        \"Content-Type\": configJSON.validationApiContentType,\n        token: localStorage.getItem(\"token\")\n      };\n      var httpBody = {\n        \"catalogue_id\": catalogue_id,\n        \"catalogue_variant_id\": catalogue_variant_id,\n        \"quantity\": 1\n      };\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.postBuyNowApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApipostBuyNow);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(httpBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.exampleAPiMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    _this.deleteCoupon = function () {\n      var header = {\n        \"Content-Type\": configJSON.validationApiContentType,\n        token: localStorage.getItem(\"token\")\n      };\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.delCouponApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.endPointApiPostApplyCoupon + \"\".concat(_this.state.cartId));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.delAPiMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n      return true;\n    };\n\n    _this.toApplyCoupon = function (code, amount) {\n      _this.state.cartId && _this.postApplyCoupon(code, amount);\n    };\n\n    _this.setZipCode = function (value) {\n      _this.setState({\n        zipCode: value,\n        isCheckedShippingCharge: false\n      });\n    };\n\n    _this.checkShippingAggressCharge = function () {\n      var _this$state4 = _this.state,\n          zipCode = _this$state4.zipCode,\n          isCheckedShippingCharge = _this$state4.isCheckedShippingCharge,\n          countryName = _this$state4.countryName; //@ts-ignore\n\n      if (countryName.toLowerCase() == 'india') {\n        if (zipCode.trim().length > 5 && zipCode.trim().length < 7 && !isCheckedShippingCharge) {\n          _this.calculateShippingAddressCharge();\n        }\n      } else {\n        if (zipCode.trim().length >= 3) {\n          _this.calculateShippingAddressCharge();\n        }\n      } // if (zipCode.trim().length > 5 && zipCode.trim().length < 7 && !isCheckedShippingCharge) {\n      //     this.calculateShippingAddressCharge();\n      // }\n\n    };\n\n    _this.updateDeliveryAddress = function (id, pincode) {\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.updateDeliveryAddressAPiCallID = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.updateAddressOnIdAPIEndPoint + '/' + id);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: localStorage.getItem('token')\n      };\n      var requestBody = {\n        \"address\": {\n          \"zip_code\": pincode\n        }\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.AlertMessage), getName(MessageEnum.RestAPIResponceMessage)];\n    _this.state = {\n      selectedAddress: {\n        name: '',\n        flat_no: '',\n        address: '',\n        address_line_2: '',\n        city: '',\n        state: '',\n        country: '',\n        zip_code: '',\n        phone_number: '',\n        id: ''\n      },\n      deliveryId: '',\n      isShippingAddressSame: true,\n      billingAndAddressSame: false,\n      cart: [],\n      wholeCart: \"\",\n      cartId: \"\",\n      catalogue_id: \"\",\n      couponSuccess: \"\",\n      zipCode: \"\",\n      isCheckedShippingCharge: false\n    };\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(CheckoutController, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                window.addEventListener('popstate', function (event) {\n                  _this2.props.history.push({\n                    pathname: \"/cart\",\n                    state: {\n                      refetchCart: true\n                    }\n                  });\n\n                  _this2.releaseShippingCharge();\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(from, message) {\n        var _this3 = this;\n\n        var apiRequestCallId, responseJson, errorReponse, _responseJson$data$, _responseJson$data$$a, _responseJson$data$2, _responseJson$data$3, _responseJson$data$4, _responseJson$data$4$, _responseJson$data$4$2, _responseJson$data, _responseJson$errors, title, AlertBodyMessage;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.addNewAddressAPICallId) {\n                    if (responseJson) {\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        userAddedAddressDeatails: responseJson === null || responseJson === void 0 ? void 0 : responseJson.data,\n                        addingNewAddressCheck: false,\n                        selectAddressCheck: false\n                      })); // @ts-ignore\n\n                      window.notify([{\n                        message: responseJson === null || responseJson === void 0 ? void 0 : responseJson.message,\n                        type: \"success\"\n                      }]);\n                      this.getDeliveryAddressList();\n                    }\n                  } // get cart\n\n\n                  if (apiRequestCallId === this.GetCartApiCallId) {\n                    if (responseJson.data) {\n                      this.setState({\n                        cart: responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data$ = responseJson.data[0]) === null || _responseJson$data$ === void 0 ? void 0 : (_responseJson$data$$a = _responseJson$data$.attributes) === null || _responseJson$data$$a === void 0 ? void 0 : _responseJson$data$$a.order_items,\n                        cartId: responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data$2 = responseJson.data[0]) === null || _responseJson$data$2 === void 0 ? void 0 : _responseJson$data$2.id,\n                        wholeCart: responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data$3 = responseJson.data[0]) === null || _responseJson$data$3 === void 0 ? void 0 : _responseJson$data$3.attributes\n                      });\n                      localStorage.setItem(\"cart_length\", responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data$4 = responseJson.data[0]) === null || _responseJson$data$4 === void 0 ? void 0 : (_responseJson$data$4$ = _responseJson$data$4.attributes) === null || _responseJson$data$4$ === void 0 ? void 0 : (_responseJson$data$4$2 = _responseJson$data$4$.order_items) === null || _responseJson$data$4$2 === void 0 ? void 0 : _responseJson$data$4$2.length);\n                    }\n                  } //post buynow \n\n\n                  if (apiRequestCallId === this.postBuyNowApiCallId) {\n                    console.log(responseJson.data, \"postbuy\");\n                    this.setState({\n                      cart: responseJson.data.attributes.order_items,\n                      cartId: responseJson.data.id,\n                      wholeCart: responseJson.data.attributes //loading: false\n\n                    });\n                    localStorage.setItem(\"cart_length\", responseJson.data.attributes.order_items.length); // if (responseJson && responseJson.data) {\n                    // }\n                    // if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    //   this.setState({\n                    //     loading: false\n                    //   })\n                    //   localStorage.removeItem(\"cart_length\")\n                    //   //@ts-ignore\n                    //   //window.notify([{ type: 'error', message: responseJson.errors[0].message }])\n                    // }\n                  } //apply coupon \n\n\n                  if (apiRequestCallId === this.postApplyCouponApiCallId) {\n                    if (responseJson.data) {\n                      console.log(responseJson, \"apply coupon\"); // @ts-ignore\n\n                      window.notify([{\n                        message: responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data = responseJson.data) === null || _responseJson$data === void 0 ? void 0 : _responseJson$data.message,\n                        type: \"success\"\n                      }]);\n                      this.getCart();\n                    } else {\n                      // @ts-ignore\n                      window.notify([{\n                        message: responseJson === null || responseJson === void 0 ? void 0 : responseJson.message,\n                        type: \"warning\"\n                      }]);\n                    }\n                  } // delete coupon \n                  else if (apiRequestCallId === this.delCouponApiCallId) {\n                      console.log(responseJson, \"delete coupon\"); // @ts-ignore\n\n                      window.notify([{\n                        message: \"Coupon deleted successfully\",\n                        type: \"success\"\n                      }]);\n                      this.getCart();\n                    } else if (apiRequestCallId === this.getUserDeliveryAddressAPICallId) {\n                      if (responseJson && responseJson.data) {\n                        map(responseJson.data, function (address) {\n                          var _address$attributes;\n\n                          if ((_address$attributes = address.attributes) === null || _address$attributes === void 0 ? void 0 : _address$attributes.is_default) {\n                            var _address$attributes2;\n\n                            var clonedAddress = cloneDeep(address === null || address === void 0 ? void 0 : address.attributes);\n\n                            if ((clonedAddress === null || clonedAddress === void 0 ? void 0 : clonedAddress.address_line_2) === null) {\n                              // @ts-ignore\n                              clonedAddress.address_line_2 = \"\";\n                            }\n\n                            _this3.setState({\n                              deliveryAddressID: clonedAddress,\n                              deliveryId: address === null || address === void 0 ? void 0 : (_address$attributes2 = address.attributes) === null || _address$attributes2 === void 0 ? void 0 : _address$attributes2.id\n                            });\n                          }\n                        });\n                        this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                          userAddress: responseJson.data,\n                          defaultAddressCheck: responseJson.data.attributes && responseJson.data.attributes.is_default // deliveryAddressID: responseJson.data.atrributes && responseJson.data.attributes.id\n\n                        }));\n                      } else {\n                        this.parseApiErrorResponse(responseJson);\n                      }\n                    }\n\n                  if (apiRequestCallId === this.calculateShippingAddressChargeCallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        isCheckedShippingCharge: true //  loading: false\n\n                      }); //@ts-ignore\n\n                      window.notify([{\n                        type: 'success',\n                        message: 'ZipCode Validate Successfully!'\n                      }]);\n                      this.getCart();\n                    }\n\n                    if (responseJson && responseJson.errors) {\n                      this.setState({\n                        isCheckedShippingCharge: false // loading: false\n\n                      });\n                      this.getCart(); //@ts-ignore\n\n                      window.notify([{\n                        message: responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$errors = responseJson.errors) === null || _responseJson$errors === void 0 ? void 0 : _responseJson$errors.message,\n                        type: \"error\"\n                      }]);\n                    }\n                  } // Release Shipping charges\n\n\n                  if (apiRequestCallId === this.releaseShippingAddressChargeCallId) {\n                    this.props.history.push({\n                      pathname: \"/cart\",\n                      state: {\n                        refetchCart: true\n                      }\n                    });\n                  }\n\n                  if (apiRequestCallId === this.updateDeliveryAddressAPiCallID) {\n                    if (responseJson) {}\n                  }\n                } else if (getName(MessageEnum.AlertMessage) === message.id) {\n                  title = message.getData(getName(MessageEnum.AlertTitleMessage));\n                  AlertBodyMessage = message.getData(getName(MessageEnum.AlertBodyMessage));\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return CheckoutController;\n}(BlockComponent);\n\nexport { CheckoutController as default };\n;","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/shoppingcart/src/CheckoutController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","isEmpty","cloneDeep","map","configJSON","require","CheckoutController","props","addNewAddressAPICallId","getUserDeliveryAddressAPICallId","updateDeliveryAddressByIdAPICallId","deleteDeliveryAddressByIdAPICallId","calculateShippingAddressChargeCallId","releaseShippingAddressChargeCallId","backListener","auth","window","localStorage","getItem","GetCartApiCallId","putUpdateCartQuantityApiCallId","delCartItemApiCallId","postWishlistApiCallId","postApplyCouponApiCallId","delCouponApiCallId","postBuyNowApiCallId","updateDeliveryAddressAPiCallID","addNewAddressHandler","values","token","requestMessage","RestAPIRequestMessage","headers","requestBody","checkingExistedData","state","userAddress","length","billing_address","id","address","isShippingAddressSame","billing_same_as_shipping","name","flat_no","address_line_2","city","country","zip_code","phone_number","messageId","addData","RestAPIResponceEndPointMessage","addAddressToOrder","wholeCart","console","log","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","putAPiMethod","updateDeliveryAddress","deliveryId","sendMessage","getDeliveryAddressList","getUserDeliveryAddressAPIEndPoint","validationApiMethodType","calculateShippingAddressCharge","httpBody","cart_id","cartId","zipcode","zipCode","deliveryAddressID","notify","type","message","calculateShippingAddressChargeAPIEndPoint","releaseShippingCharge","releaseShippingAddressChargeAPIEndPoint","getCart","validationApiContentType","endPointApiGetIsCartCreated","postApplyCoupon","code","amount","header","endPointApiPostApplyCoupon","exampleAPiMethod","postBuyNow","catalogue_id","catalogue_variant_id","endPointApipostBuyNow","deleteCoupon","delAPiMethod","toApplyCoupon","setZipCode","value","setState","isCheckedShippingCharge","checkShippingAggressCharge","countryName","toLowerCase","trim","pincode","updateAddressOnIdAPIEndPoint","subScribedMessages","AccoutLoginSuccess","AlertMessage","RestAPIResponceMessage","selectedAddress","billingAndAddressSame","cart","couponSuccess","receive","bind","attachBuildingBlock","addEventListener","event","history","push","pathname","refetchCart","from","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","userAddedAddressDeatails","data","addingNewAddressCheck","selectAddressCheck","attributes","order_items","setItem","is_default","clonedAddress","defaultAddressCheck","parseApiErrorResponse","errors","title","AlertTitleMessage","AlertBodyMessage"],"mappings":"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","sourcesContent":["//@ts-nocheck;\nimport React from 'react';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\n// @ts-ignore\nimport isEmpty from \"lodash/isEmpty\";\n// @ts-ignore\nimport cloneDeep from \"lodash/cloneDeep\";\n// @ts-ignore\nimport map from \"lodash/map\";\n\nexport const configJSON = require('./config');\n\n\nexport interface Props {\n    // Customizable Area Start\n    history: any\n    // Customizable Area End\n};\n\ninterface S {\n    activeTab?: any;\n    addingNewAddressCheck?: boolean;\n    selectAddressCheck?: boolean;\n    addressIndex?: number;\n    editAddressChecked?: boolean;\n    userAddedAddressDeatails?: any;\n    userToken?: any;\n    //get all deliveryAddress list\n    userAddress?: Array<any>;\n    //edit /delete deliveryAddress data\n    deliveryAddressID?: any;\n    defaultAddressCheck?: boolean;\n    selectedAddress: {\n        name: string,\n        flat_no: string,\n        address: string,\n        address_line_2: string,\n        city: string,\n        state: string,\n        country: string,\n        zip_code: string,\n        phone_number: string,\n        id: any\n    };\n    deliveryId: any;\n    isShippingAddressSame: boolean;\n    billingAndAddressSame: boolean;\n    cart: any;\n    wholeCart: any;\n    cartId: any;\n    catalogue_id: any;\n    couponSuccess: any;\n    zipCode: \"\",\n    isCheckedShippingCharge: boolean;\n    countryName?: any;\n    loading?: boolean;\n};\n\ninterface SS {\n    id: any;\n    history: any\n};\n\n\n\nexport default class CheckoutController extends BlockComponent<Props, S, SS>{\n    addNewAddressAPICallId: string = \"\";\n    getUserDeliveryAddressAPICallId: string = \"\";\n    updateDeliveryAddressByIdAPICallId: string = \"\";\n    deleteDeliveryAddressByIdAPICallId: string = \"\";\n    calculateShippingAddressChargeCallId: string = \"\";\n    releaseShippingAddressChargeCallId: string = \"\";\n    backListener: any;\n    auth: string | null | undefined = window.localStorage.getItem(\"token\");\n    GetCartApiCallId: string = \"\";\n    putUpdateCartQuantityApiCallId: string = \"\";\n    delCartItemApiCallId: string = \"\";\n    postWishlistApiCallId: string = \"\";\n    postApplyCouponApiCallId: string = \"\";\n    delCouponApiCallId: string = \"\";\n    postBuyNowApiCallId: string = \"\"\n    updateDeliveryAddressAPiCallID: string = \"\";\n    constructor(props: Props) {\n        super(props);\n        this.subScribedMessages = [\n            getName(MessageEnum.AccoutLoginSuccess),\n            getName(MessageEnum.AlertMessage),\n            getName(MessageEnum.RestAPIResponceMessage),\n        ];\n        this.state = {\n            selectedAddress: {\n                name: '',\n                flat_no: '',\n                address: '',\n                address_line_2: '',\n                city: '',\n                state: '',\n                country: '',\n                zip_code: '',\n                phone_number: '',\n                id: ''\n            },\n            deliveryId: '',\n            isShippingAddressSame: true,\n            billingAndAddressSame: false,\n            cart: [],\n            wholeCart: \"\",\n            cartId: \"\",\n            catalogue_id: \"\",\n            couponSuccess: \"\",\n            zipCode: \"\",\n            isCheckedShippingCharge: false,\n        };\n        this.receive = this.receive.bind(this);\n        runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n    };\n\n    async componentDidMount() {\n        window.addEventListener('popstate', (event) => {\n            this.props.history.push({\n                pathname: \"/cart\",\n                state: { refetchCart: true }\n            });\n            this.releaseShippingCharge();\n        });\n    }\n\n\n    async receive(from: string, message: Message) {\n        if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n            const apiRequestCallId = message.getData(\n                getName(MessageEnum.RestAPIResponceDataMessage)\n            );\n            var responseJson = message.getData(\n                getName(MessageEnum.RestAPIResponceSuccessMessage)\n            );\n            var errorReponse = message.getData(\n                getName(MessageEnum.RestAPIResponceErrorMessage)\n            );\n            if (apiRequestCallId === this.addNewAddressAPICallId) {\n                if (responseJson) {\n                    this.setState({\n                        ...this.state,\n                        userAddedAddressDeatails: responseJson?.data,\n                        addingNewAddressCheck: false,\n                        selectAddressCheck: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson?.message, type: \"success\" }]);\n                    this.getDeliveryAddressList();\n                }\n            }\n            // get cart\n            if (apiRequestCallId === this.GetCartApiCallId) {\n                if (responseJson.data) {\n                    this.setState({\n                        cart: responseJson?.data[0]?.attributes?.order_items,\n                        cartId: responseJson?.data[0]?.id,\n                        wholeCart: responseJson?.data[0]?.attributes\n                    })\n                    localStorage.setItem(\"cart_length\", responseJson?.data[0]?.attributes?.order_items?.length)\n                }\n\n            }\n\n            //post buynow \n            if (apiRequestCallId === this.postBuyNowApiCallId) {\n                console.log(responseJson.data, \"postbuy\")\n                this.setState({\n                    cart: responseJson.data.attributes.order_items,\n                    cartId: responseJson.data.id,\n                    wholeCart: responseJson.data.attributes,\n                    //loading: false\n                })\n                localStorage.setItem(\"cart_length\", responseJson.data.attributes.order_items.length)\n                // if (responseJson && responseJson.data) {\n\n\n\n\n                // }\n                // if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                //   this.setState({\n                //     loading: false\n                //   })\n                //   localStorage.removeItem(\"cart_length\")\n\n\n                //   //@ts-ignore\n                //   //window.notify([{ type: 'error', message: responseJson.errors[0].message }])\n                // }\n\n\n            }\n\n\n            //apply coupon \n            if (apiRequestCallId === this.postApplyCouponApiCallId) {\n                if (responseJson.data) {\n                    console.log(responseJson, \"apply coupon\");\n                    // @ts-ignore\n                    window.notify([{ message: responseJson?.data?.message, type: \"success\" }]);\n                    this.getCart()\n                }\n                else {\n                    // @ts-ignore\n                    window.notify([{ message: responseJson?.message, type: \"warning\" }]);\n                }\n            }\n\n            // delete coupon \n            else if (apiRequestCallId === this.delCouponApiCallId) {\n                console.log(responseJson, \"delete coupon\");\n                // @ts-ignore\n                window.notify([{ message: \"Coupon deleted successfully\", type: \"success\" }]);\n                this.getCart()\n            }\n            else if (apiRequestCallId === this.getUserDeliveryAddressAPICallId) {\n                if (responseJson && responseJson.data) {\n                    map(responseJson.data, (address: any) => {\n                        if (address.attributes?.is_default) {\n                            let clonedAddress = cloneDeep(address?.attributes)\n                            if (clonedAddress?.address_line_2 === null) {\n                                // @ts-ignore\n                                clonedAddress.address_line_2 = \"\"\n                            }\n                            this.setState({\n                                deliveryAddressID: clonedAddress,\n                                deliveryId: address?.attributes?.id\n                            })\n                        }\n                    });\n\n                    this.setState({\n                        ...this.state,\n                        userAddress: responseJson.data,\n                        defaultAddressCheck: responseJson.data.attributes && responseJson.data.attributes.is_default,\n                        // deliveryAddressID: responseJson.data.atrributes && responseJson.data.attributes.id\n                    });\n                } else {\n                    this.parseApiErrorResponse(responseJson);\n                }\n            }\n\n            if (apiRequestCallId === this.calculateShippingAddressChargeCallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        isCheckedShippingCharge: true,\n                        //  loading: false\n                    });\n                    //@ts-ignore\n                    window.notify([{ type: 'success', message: 'ZipCode Validate Successfully!' }])\n                    this.getCart();\n                }\n                if (responseJson && responseJson.errors) {\n                    this.setState({\n                        isCheckedShippingCharge: false,\n                        // loading: false\n                    });\n                    this.getCart();\n                    //@ts-ignore\n                    window.notify([{ message: responseJson?.errors?.message, type: \"error\" }]);\n                }\n            }\n            // Release Shipping charges\n            if (apiRequestCallId === this.releaseShippingAddressChargeCallId) {\n                this.props.history.push({\n                    pathname: \"/cart\",\n                    state: { refetchCart: true }\n                });\n            }\n            if (apiRequestCallId === this.updateDeliveryAddressAPiCallID) {\n                if (responseJson) {\n\n                }\n            }\n        }\n        else if (getName(MessageEnum.AlertMessage) === message.id) {\n            const title = message.getData(\n                getName(MessageEnum.AlertTitleMessage)\n            );\n            let AlertBodyMessage = message.getData(\n                getName(MessageEnum.AlertBodyMessage)\n            );\n\n        }\n    };\n    //add a new address\n    addNewAddressHandler = (values: any) => {\n        const token = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n        let requestBody = {};\n        const checkingExistedData = this.state.userAddress && this.state.userAddress.length > 0 ? false : true;\n\n        if (values.billing_address.id) {\n            const address = values.isShippingAddressSame ? \"delivery_address_id\" : \"billing_address_id\"\n            requestBody = { [address]: values.billing_address.id }\n        }\n\n        if (values.isShippingAddressSame == true) {\n\n            requestBody = {\n                ...requestBody,\n                billing_same_as_shipping: values.isShippingAddressSame,\n                // delivery_address_id: values.billing_address.id,\n                address: {\n                    \"name\": values.billing_address.name,\n                    \"flat_no\": values.billing_address.flat_no,\n                    \"address\": values.billing_address.address,\n                    \"address_line_2\": values.billing_address.address_line_2,\n                    \"city\": values.billing_address.city,\n                    \"state\": values.billing_address.state,\n                    \"country\": values.billing_address.country,\n                    \"zip_code\": values.billing_address.zip_code,\n                    \"phone_number\": values.billing_address.phone_number,\n                    \"is_default\": checkingExistedData,\n                    billing_address: {\n                        \"name\": values.billing_address.name,\n                        \"flat_no\": values.billing_address.flat_no,\n                        \"address\": values.billing_address.address,\n                        \"address_line_2\": values.billing_address.address_line_2,\n                        \"city\": values.billing_address.city,\n                        \"state\": values.billing_address.state,\n                        \"country\": values.billing_address.country,\n                        \"zip_code\": values.billing_address.zip_code,\n                        \"phone_number\": values.billing_address.phone_number,\n                        \"is_default\": checkingExistedData\n                    }\n                }\n            }\n        } else {\n            requestBody = {\n                ...requestBody,\n                billing_same_as_shipping: values.isShippingAddressSame,\n                // delivery_address_id: values.billing_address.id,\n                address: {\n                    \"name\": values.address.name,\n                    \"flat_no\": values.address.flat_no,\n                    \"address\": values.address.address,\n                    \"address_line_2\": values.address.address_line_2,\n                    \"city\": values.address.city,\n                    \"state\": values.address.state,\n                    \"country\": values.address.country,\n                    \"zip_code\": values.address.zip_code,\n                    \"phone_number\": values.address.phone_number,\n                    \"is_default\": checkingExistedData,\n                    billing_address: {\n                        \"name\": values.billing_address.name,\n                        \"flat_no\": values.billing_address.flat_no,\n                        \"address\": values.billing_address.address,\n                        \"address_line_2\": values.billing_address.address_line_2,\n                        \"city\": values.billing_address.city,\n                        \"state\": values.billing_address.state,\n                        \"country\": values.billing_address.country,\n                        \"zip_code\": values.billing_address.zip_code,\n                        \"phone_number\": values.billing_address.phone_number,\n                        \"is_default\": checkingExistedData\n                    }\n                }\n            }\n        }\n\n        this.addNewAddressAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage),\n            configJSON.addAddressToOrder +\n            \"/\" +\n            this.state.wholeCart.id +\n            \"/add_address_to_order\");\n        console.log(requestBody, \"+++++++++++++++++request body+++++++++++++++++++++=\")\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n\n        this.updateDeliveryAddress(this.state.deliveryId, values.billing_address.zip_code);\n\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n\n    //get a delivery address by user Id\n    getDeliveryAddressList = () => {\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const token = localStorage.getItem(\"token\");\n\n        this.getUserDeliveryAddressAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getUserDeliveryAddressAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.validationApiMethodType);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n\n\n    calculateShippingAddressCharge = () => {\n        // this.setState({\n        //     loading: true\n        // })\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const token = localStorage.getItem(\"token\");\n        const httpBody = {\n            cart_id: this.state?.cartId,\n            zipcode: isEmpty(this.state.zipCode) ? this.state?.deliveryAddressID?.zip_code : this.state.zipCode\n        };\n        //@ts-ignore\n        window.notify([{ type: 'info', message: 'Please Wait your ZipCode Validating!' }])\n\n        this.calculateShippingAddressChargeCallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.calculateShippingAddressChargeAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestBodyMessage),\n            JSON.stringify(httpBody)\n        );\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n\n    releaseShippingCharge = () => {\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const token = localStorage.getItem(\"token\");\n        const httpBody = {\n            cart_id: this.state?.cartId,\n        };\n        this.releaseShippingAddressChargeCallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.releaseShippingAddressChargeAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestBodyMessage),\n            JSON.stringify(httpBody)\n        );\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n\n    // get cart items\n    getCart = (): boolean => {\n        const headers = {\n            \"Content-Type\": configJSON.validationApiContentType,\n            token: localStorage.getItem(\"token\"),\n        };\n\n        const requestMessage = new Message(\n            getName(MessageEnum.RestAPIRequestMessage)\n        );\n\n        this.GetCartApiCallId = requestMessage.messageId;\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIResponceEndPointMessage),\n            configJSON.endPointApiGetIsCartCreated\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestHeaderMessage),\n            JSON.stringify(headers)\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestMethodMessage),\n            configJSON.validationApiMethodType\n        );\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n\n        return true;\n    };\n\n    // apply coupon\n    postApplyCoupon = (code: any, amount: any): boolean => {\n        const header = {\n            \"Content-Type\": configJSON.validationApiContentType,\n            token: localStorage.getItem(\"token\"),\n\n        };\n        const httpBody = {\n            \"code\": code,\n            \"cart_value\": amount\n        };\n        const requestMessage = new Message(\n            getName(MessageEnum.RestAPIRequestMessage)\n        );\n\n        this.postApplyCouponApiCallId = requestMessage.messageId;\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIResponceEndPointMessage),\n            configJSON.endPointApiPostApplyCoupon + `${this.state.cartId}/apply_coupon`\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestHeaderMessage),\n            JSON.stringify(header)\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestBodyMessage),\n            JSON.stringify(httpBody)\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestMethodMessage),\n            configJSON.exampleAPiMethod\n        );\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n\n        return true;\n    };\n\n    //buy now post\n    postBuyNow = (catalogue_id: any, catalogue_variant_id: any): boolean => {\n\n        const header = {\n            \"Content-Type\": configJSON.validationApiContentType,\n            token: localStorage.getItem(\"token\"),\n        };\n        const httpBody = {\n            \"catalogue_id\": catalogue_id,\n            \"catalogue_variant_id\": catalogue_variant_id,\n            \"quantity\": 1\n        };\n\n\n        const requestMessage = new Message(\n            getName(MessageEnum.RestAPIRequestMessage)\n        );\n\n        this.postBuyNowApiCallId = requestMessage.messageId;\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIResponceEndPointMessage),\n            configJSON.endPointApipostBuyNow\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestHeaderMessage),\n            JSON.stringify(header)\n        );\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestBodyMessage),\n            JSON.stringify(httpBody)\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestMethodMessage),\n            configJSON.exampleAPiMethod\n        );\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n\n        return true;\n    }\n\n    // delete coupon\n    deleteCoupon = (): boolean => {\n\n        const header = {\n            \"Content-Type\": configJSON.validationApiContentType,\n            token: localStorage.getItem(\"token\"),\n\n        };\n\n        const requestMessage = new Message(\n            getName(MessageEnum.RestAPIRequestMessage)\n        );\n\n        this.delCouponApiCallId = requestMessage.messageId;\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIResponceEndPointMessage),\n            configJSON.endPointApiPostApplyCoupon + `${this.state.cartId}`\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestHeaderMessage),\n            JSON.stringify(header)\n        );\n\n        requestMessage.addData(\n            getName(MessageEnum.RestAPIRequestMethodMessage),\n            configJSON.delAPiMethod\n        );\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n        return true;\n    };\n\n\n    // to apply coupon\n\n    toApplyCoupon = (code: any, amount: any) => {\n        this.state.cartId && this.postApplyCoupon(code, amount)\n    }\n\n    setZipCode = (value: any) => {\n        this.setState({ zipCode: value, isCheckedShippingCharge: false })\n    }\n    checkShippingAggressCharge = () => {\n        const { zipCode, isCheckedShippingCharge, countryName } = this.state;\n        //@ts-ignore\n        if (countryName.toLowerCase() == 'india') {\n            if (zipCode.trim().length > 5 && zipCode.trim().length < 7 && !isCheckedShippingCharge) {\n                this.calculateShippingAddressCharge();\n            }\n        }\n        else {\n            if (zipCode.trim().length >= 3) {\n                this.calculateShippingAddressCharge();\n            }\n        }\n        // if (zipCode.trim().length > 5 && zipCode.trim().length < 7 && !isCheckedShippingCharge) {\n        //     this.calculateShippingAddressCharge();\n        // }\n    };\n    //Update the Address\n    updateDeliveryAddress = (id: number, pincode: any) => {\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.updateDeliveryAddressAPiCallID = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.updateAddressOnIdAPIEndPoint + '/' + id);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token: localStorage.getItem('token')\n        };\n        const requestBody = {\n            \"address\": {\n                \"zip_code\": pincode\n            }\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.putAPiMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n};"]},"metadata":{},"sourceType":"module"}