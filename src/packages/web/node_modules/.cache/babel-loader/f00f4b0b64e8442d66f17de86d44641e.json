{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nexport var configJSON = require('./config');\n;\n;\n;\n\nvar OTPConfirmationController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(OTPConfirmationController, _BlockComponent);\n\n  var _super = _createSuper(OTPConfirmationController);\n\n  // emailRegistrationApiCallId: string;\n  function OTPConfirmationController(props) {\n    var _this;\n\n    _classCallCheck(this, OTPConfirmationController);\n\n    _this = _super.call(this, props);\n    _this.resendOTPEmailAPICallId = void 0;\n    _this.sendEmailOTPApiCallId = void 0;\n    _this.registerEmailAPICallId = void 0;\n\n    _this.sendEmailOTP = function (values) {\n      // const token = localStorage.getItem(\"SignUPtoken\");\n      var token = localStorage.getItem('token');\n\n      _this.setState({\n        showSpinner: true\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.sendEmailOTPApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.verfiyEmailOTPAPIEndPoint);\n      var requestBody = {\n        \"token\": token,\n        \"pin\": values.otp\n      };\n      var headers = {\n        'content-type': 'application/json'\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.resendOTP = function () {\n      var user = JSON.parse(localStorage.getItem(\"signUpUser\")); // this.setState({\n      //     showSpinner: false\n      // });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.resendOTPEmailAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.resendEmailOTPAPIEndPoint);\n      var requestBody = {\n        \"data\": {\n          \"type\": \"email_account\",\n          \"process\": \"register\",\n          \"attributes\": {\n            \"email\": user.Email\n          }\n        }\n      };\n      var headers = {\n        'content-type': 'application/json'\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.SignUp = function () {\n      var user = JSON.parse(localStorage.getItem(\"signUpUser\")); // const token = localStorage.getItem('SignUPtoken');\n\n      var token = localStorage.getItem('token');\n      var userName = localStorage.getItem('userFullName');\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.registerEmailAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.emailRegistrationAPIEndPoint); // const generateUUid = localStorage.getItem('guestUUID');\n      // let requestBody;\n      // if (generateUUid) {\n      //     requestBody = {\n      //         \"token\": token,\n      //         \"data\":\n      //         {\n      //             \"attributes\":\n      //             {\n      //                 \"full_name\": user.FullName,\n      //                 \"email\": user.Email,\n      //                 \"password\": user.password,\n      //                 \"full_phone_number\": user.fullPhoneNumber,\n      //                 \"uuid\": generateUUid\n      //             },\n      //             \"type\": \"email_account\",\n      //             \"process\": \"register\"\n      //         }\n      //     };\n      // }\n      // else {\n      //     requestBody = {\n      //         \"token\": token,\n      //         \"data\":\n      //         {\n      //             \"attributes\":\n      //             {\n      //                 \"full_name\": user.FullName,\n      //                 \"email\": user.Email,\n      //                 \"password\": user.password,\n      //                 \"full_phone_number\": user.fullPhoneNumber\n      //             },\n      //             \"type\": \"email_account\",\n      //             \"process\": \"register\"\n      //         }\n      //     };\n      // }\n\n      var requestBody = {\n        \"token\": token,\n        \"data\": {\n          \"attributes\": {\n            \"first_name\": userName,\n            // \"full_name\": user.FullName,\n            \"full_name\": userName,\n            \"email\": user.Email,\n            \"password\": user.password,\n            \"full_phone_number\": user.fullPhoneNumber\n          },\n          \"type\": \"email_account\",\n          \"process\": \"register\"\n        }\n      };\n      var headers = {\n        'content-type': 'application/json'\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.AlertMessage)];\n    _this.state = {\n      timer: 60\n    };\n    _this.timer = 60;\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_this));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(OTPConfirmationController, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      // @ts-ignore\n      if (this.timer == 60 && this.state.timer > 0) {\n        // @ts-ignore\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      // @ts-ignore\n      var timer = this.state.timer - 1;\n      this.setState({\n        timer: timer,\n        showSpinner: false\n      }); // Check if we're at zero.\n\n      if (timer == 0) {\n        // @ts-ignore\n        clearInterval(this.timer);\n      }\n    }\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(from, message) {\n        var apiRequestCallId, responseJson, errorReponse, data, meta, _data$attributes, _data$attributes2, _this$props, _this$props$history, _data, _meta, dat;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runEngine.debugLog('Message Received', message);\n\n                if (!(message.id === getName(MessageEnum.RestAPIResponceMessage))) {\n                  _context.next = 17;\n                  break;\n                }\n\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                if (!(apiRequestCallId === this.sendEmailOTPApiCallId)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!(responseJson && responseJson.data && responseJson.meta)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                this.setState({\n                  showSpinner: false\n                }); // @ts-ignore\n\n                window.notify([{\n                  message: responseJson.meta && responseJson.meta.message,\n                  type: \"success\"\n                }]);\n                data = responseJson.data, meta = responseJson.meta;\n                localStorage.setItem('token', meta.token);\n                _context.next = 13;\n                return this.SignUp();\n\n              case 13:\n                if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                  this.setState({\n                    showSpinner: false\n                  }); // @ts-ignore\n\n                  window.notify([{\n                    message: responseJson.errors[0].pin && responseJson.errors[0].pin,\n                    type: \"danger\"\n                  }]);\n                }\n\n                _context.next = 17;\n                break;\n\n              case 16:\n                if (apiRequestCallId === this.resendOTPEmailAPICallId) {\n                  if (responseJson && responseJson.data && responseJson.meta) {\n                    this.timer = 60;\n                    this.setState({\n                      showSpinner: false,\n                      timer: 60\n                    }, this.startTimer);\n                    localStorage.setItem(\"token\", responseJson.meta.token && responseJson.meta.token); //@ts-ignore\n\n                    window.notify([{\n                      message: 'OTP Hasbeen sent to you',\n                      type: \"success\"\n                    }]);\n                  }\n\n                  if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    this.setState({\n                      showSpinner: false\n                    }); // @ts-ignore\n\n                    window.notify([{\n                      message: responseJson.errors[0].account && responseJson.errors[0].account || \"Something went wrong\",\n                      type: \"danger\"\n                    }]);\n                  }\n                } else if (apiRequestCallId === this.registerEmailAPICallId) {\n                  if (responseJson && responseJson.data && responseJson.meta) {\n                    localStorage.removeItem('signUpUser');\n                    localStorage.removeItem('userFullName');\n                    _data = responseJson.data, _meta = responseJson.meta;\n                    localStorage.setItem(\"user\", JSON.stringify(_data));\n                    dat = {\n                      'email': _data.attributes.email,\n                      'name': _data.attributes.full_name\n                    };\n                    localStorage.setItem('userData', JSON.stringify(dat));\n                    localStorage.setItem('profileImage', ((_data$attributes = _data.attributes) === null || _data$attributes === void 0 ? void 0 : _data$attributes.image_url) && ((_data$attributes2 = _data.attributes) === null || _data$attributes2 === void 0 ? void 0 : _data$attributes2.image_url)); // localStorage.setItem(\"SignUPtoken\", responseJson.meta.token && responseJson.meta.token);\n\n                    localStorage.setItem('token', _meta === null || _meta === void 0 ? void 0 : _meta.token); //@ts-ignore\n\n                    window.notify([{\n                      message: 'Registered Successfully !',\n                      type: \"success\"\n                    }]); //@ts-ignore\n\n                    (_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$history = _this$props.history) === null || _this$props$history === void 0 ? void 0 : _this$props$history.push('/home-page');\n                  }\n\n                  if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    this.setState({\n                      showSpinner: false\n                    }); // @ts-ignore\n\n                    window.notify([{\n                      message: responseJson.errors[0].account && responseJson.errors[0].account || \"Something went wrong\",\n                      type: \"danger\"\n                    }]);\n                  }\n                }\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return OTPConfirmationController;\n}(BlockComponent);\n\nexport { OTPConfirmationController as default };\n;","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/otp-input-confirmation/src/OTPConfirmationController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","configJSON","require","OTPConfirmationController","props","resendOTPEmailAPICallId","sendEmailOTPApiCallId","registerEmailAPICallId","sendEmailOTP","values","token","localStorage","getItem","setState","showSpinner","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","verfiyEmailOTPAPIEndPoint","requestBody","otp","headers","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","JSON","stringify","RestAPIRequestMethodMessage","apiPostMethod","sendMessage","id","resendOTP","user","parse","resendEmailOTPAPIEndPoint","Email","SignUp","userName","emailRegistrationAPIEndPoint","password","fullPhoneNumber","subScribedMessages","RestAPIResponceMessage","AccoutLoginSuccess","AlertMessage","state","timer","receive","bind","startTimer","countDown","attachBuildingBlock","setInterval","clearInterval","from","message","debugLog","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","data","meta","window","notify","type","setItem","errors","length","pin","account","removeItem","dat","attributes","email","full_name","image_url","history","push"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport React from 'react';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\n\nexport const configJSON = require('./config');\n\nexport interface Props {\n\n};\n\n\ninterface S {\n    otpError?: any;\n    showSpinner?: boolean;\n    otpToken?: boolean;\n    timer: number;\n    isResendClicked?: boolean;\n};\n\ninterface SS {\n    id: any;\n};\n\n\nexport default class OTPConfirmationController extends BlockComponent<Props, S, SS>{\n    resendOTPEmailAPICallId: string;\n    sendEmailOTPApiCallId: string;\n    registerEmailAPICallId: string;\n    // emailRegistrationApiCallId: string;\n    constructor(props: Props) {\n        super(props);\n        this.subScribedMessages = [\n            getName(MessageEnum.RestAPIResponceMessage),\n            getName(MessageEnum.AccoutLoginSuccess),\n            getName(MessageEnum.AlertMessage)\n        ];\n        this.state = {\n            timer: 60,\n        }\n        this.timer = 60;\n        this.receive = this.receive.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n        runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n    };\n\n    startTimer() {\n        // @ts-ignore\n        if (this.timer == 60 && this.state.timer > 0) {\n            // @ts-ignore\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    };\n\n    countDown() {\n        // @ts-ignore\n        let timer = this.state.timer - 1;\n        this.setState({\n            timer: timer,\n            showSpinner: false\n        });\n\n        // Check if we're at zero.\n        if (timer == 0) {\n            // @ts-ignore\n            clearInterval(this.timer);\n        }\n    };\n\n\n    async receive(from: String, message: Message) {\n        runEngine.debugLog('Message Received', message);\n        if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n            const apiRequestCallId = message.getData(\n                getName(MessageEnum.RestAPIResponceDataMessage)\n            );\n            var responseJson = message.getData(\n                getName(MessageEnum.RestAPIResponceSuccessMessage)\n            );\n            var errorReponse = message.getData(\n                getName(MessageEnum.RestAPIResponceErrorMessage)\n            );\n            if (apiRequestCallId === this.sendEmailOTPApiCallId) {\n                if (responseJson && responseJson.data && responseJson.meta) {\n                    this.setState({\n                        showSpinner: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.meta && responseJson.meta.message, type: \"success\" }]);\n                    const { data, meta } = responseJson;\n                    localStorage.setItem('token', meta.token);\n                    await this.SignUp();\n                    // this.props?.history?.push('/')\n\n                }\n                if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    this.setState({\n                        showSpinner: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.errors[0].pin && responseJson.errors[0].pin, type: \"danger\" }]);\n                }\n            }\n            else if (apiRequestCallId === this.resendOTPEmailAPICallId) {\n                if (responseJson && responseJson.data && responseJson.meta) {\n                    this.timer = 60;\n                    this.setState({\n                        showSpinner: false,\n                        timer: 60,\n                    }, this.startTimer);\n                    localStorage.setItem(\"token\", responseJson.meta.token && responseJson.meta.token);\n                    //@ts-ignore\n                    window.notify([{ message: 'OTP Hasbeen sent to you', type: \"success\" }])\n\n                }\n                if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    this.setState({\n                        showSpinner: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.errors[0].account && responseJson.errors[0].account || \"Something went wrong\", type: \"danger\" }]);\n                }\n            }\n            else if (apiRequestCallId === this.registerEmailAPICallId) {\n                if (responseJson && responseJson.data && responseJson.meta) {\n                    localStorage.removeItem('signUpUser');\n                    localStorage.removeItem('userFullName');\n                    const { data, meta } = responseJson;\n                    localStorage.setItem(\"user\", JSON.stringify(data));\n                    let dat = {\n                        'email': data.attributes.email,\n                        'name': data.attributes.full_name\n                    }\n                    localStorage.setItem('userData', JSON.stringify(dat));\n                    localStorage.setItem('profileImage', data.attributes?.image_url && data.attributes?.image_url);\n                    // localStorage.setItem(\"SignUPtoken\", responseJson.meta.token && responseJson.meta.token);\n                    localStorage.setItem('token', meta?.token);\n                    //@ts-ignore\n                    window.notify([{ message: 'Registered Successfully !', type: \"success\" }]);\n                    //@ts-ignore\n                    this.props?.history?.push('/home-page');\n                }\n                if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    this.setState({\n                        showSpinner: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.errors[0].account && responseJson.errors[0].account || \"Something went wrong\", type: \"danger\" }]);\n                }\n            }\n        }\n    };\n\n    //Email verfiyOTP \n    sendEmailOTP = (values: any) => {\n        // const token = localStorage.getItem(\"SignUPtoken\");\n        const token = localStorage.getItem('token');\n        this.setState({\n            showSpinner: true\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n        this.sendEmailOTPApiCallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.verfiyEmailOTPAPIEndPoint);\n\n        const requestBody = {\n            \"token\": token,\n            \"pin\": values.otp\n        };\n        const headers = {\n            'content-type': 'application/json'\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    //resend OTP method\n    resendOTP = () => {\n        const user = JSON.parse(localStorage.getItem(\"signUpUser\"));\n        // this.setState({\n        //     showSpinner: false\n        // });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n        this.resendOTPEmailAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.resendEmailOTPAPIEndPoint);\n\n        let requestBody = {\n            \"data\": {\n                \"type\": \"email_account\",\n                \"process\": \"register\",\n                \"attributes\": {\n                    \"email\": user.Email\n                }\n            }\n        };\n        let headers = {\n            'content-type': 'application/json'\n        };\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    SignUp = () => {\n        const user = JSON.parse(localStorage.getItem(\"signUpUser\"));\n        // const token = localStorage.getItem('SignUPtoken');\n        const token = localStorage.getItem('token');\n        const userName = localStorage.getItem('userFullName');\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n        this.registerEmailAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.emailRegistrationAPIEndPoint);\n        // const generateUUid = localStorage.getItem('guestUUID');\n        // let requestBody;\n        // if (generateUUid) {\n        //     requestBody = {\n        //         \"token\": token,\n        //         \"data\":\n        //         {\n        //             \"attributes\":\n        //             {\n        //                 \"full_name\": user.FullName,\n        //                 \"email\": user.Email,\n        //                 \"password\": user.password,\n        //                 \"full_phone_number\": user.fullPhoneNumber,\n        //                 \"uuid\": generateUUid\n        //             },\n        //             \"type\": \"email_account\",\n        //             \"process\": \"register\"\n        //         }\n        //     };\n        // }\n        // else {\n        //     requestBody = {\n        //         \"token\": token,\n        //         \"data\":\n        //         {\n        //             \"attributes\":\n        //             {\n        //                 \"full_name\": user.FullName,\n        //                 \"email\": user.Email,\n        //                 \"password\": user.password,\n        //                 \"full_phone_number\": user.fullPhoneNumber\n        //             },\n        //             \"type\": \"email_account\",\n        //             \"process\": \"register\"\n        //         }\n        //     };\n        // }\n        let requestBody = {\n            \"token\": token,\n            \"data\":\n            {\n                \"attributes\":\n                {\n                    \"first_name\": userName,\n                    // \"full_name\": user.FullName,\n                    \"full_name\": userName,\n                    \"email\": user.Email,\n                    \"password\": user.password,\n                    \"full_phone_number\": user.fullPhoneNumber\n                },\n                \"type\": \"email_account\",\n                \"process\": \"register\"\n            }\n        }\n            ;\n        let headers = {\n            'content-type': 'application/json'\n        };\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}