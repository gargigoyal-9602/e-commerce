{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck;\nimport { Message } from \"../../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../../framework/src/RunEngine\"; // @ts-ignore\n\nimport map from \"lodash/map\";\nimport axios from \"axios\";\nimport { uuid } from 'uuidv4';\nexport var configJSON = require(\"./config\");\n;\n\nvar EmailAccountRegistrationController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(EmailAccountRegistrationController, _BlockComponent);\n\n  var _super = _createSuper(EmailAccountRegistrationController);\n\n  // Customizable Area Start\n  // Customizable Area End\n  function EmailAccountRegistrationController(props) {\n    var _this;\n\n    _classCallCheck(this, EmailAccountRegistrationController);\n\n    _this = _super.call(this, props);\n    _this.apiEmailLoginCallId = \"\";\n    _this.validationApiCallId = \"\";\n    _this.emailReg = void 0;\n    _this.labelTitle = \"\";\n    _this.verfiySocialLoginApiCallId = void 0;\n    _this.registartionEmailCallId = void 0;\n    _this.guestRegisterApiCallId = void 0;\n    _this.sendOTPAPICallId = void 0;\n\n    _this.showPassword = function (e) {\n      e.preventDefault();\n\n      _this.setState(function (prevState) {\n        return {\n          showPass: !prevState.showPass\n        };\n      }); // setShowPass(!showPass);\n\n    };\n\n    _this.signupUser = function (values) {\n      _this.setState({\n        showSpinner: true\n      }); // const data = {\n      //   user: {\n      //     name: values.FullName,\n      //     email: values.Email,\n      //     password: values.password,\n      //   },\n      // };\n\n\n      var data = {\n        data: {\n          type: \"email_account\",\n          attributes: {\n            email: values.Email,\n            full_name: values.FullName,\n            phone_number: values.fullPhoneNumber\n          },\n          process: \"register\"\n        }\n      };\n      localStorage.setItem(\"signUpUser\", JSON.stringify(values));\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.sendOTPAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.sendEmailOTPAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n      return runEngine.sendMessage(requestMessage.id, requestMessage);\n      axios.post(\"https://ecommerceapp-39394-ruby.39394.dev.ap-southeast-1.aws.svc.builder.ai/account/accounts/send_otp\", data).then(function (res) {\n        if (res.data && res.data.meta) {\n          var _data$data, _data$data$attributes;\n\n          var _data = res.data;\n          var name = _data === null || _data === void 0 ? void 0 : (_data$data = _data.data) === null || _data$data === void 0 ? void 0 : (_data$data$attributes = _data$data.attributes) === null || _data$data$attributes === void 0 ? void 0 : _data$data$attributes.full_name;\n          debugger; // localStorage.setItem(\"SignUPtoken\", res.data.meta.token)\n\n          localStorage.setItem('token', res.data.meta.token);\n          localStorage.setItem(\"signUpUser\", JSON.stringify(values));\n          localStorage.setItem('userFullName', name);\n        }\n\n        if (res.data) {\n          _this.props.history.push({\n            pathname: '/otpconfirm',\n            state: {\n              data: res.data.data.user\n            }\n          });\n        } // @ts-ignore\n\n\n        window.notify([{\n          message: \"OTP has beed sent to you\",\n          type: \"success\"\n        }]);\n      }).catch(function (error) {\n        var _error$request, _error$request2;\n\n        console.error(error);\n        console.log(error.request.response, \"EEEEEEEEEEEEEEEE\", error);\n\n        if ((error === null || error === void 0 ? void 0 : (_error$request = error.request) === null || _error$request === void 0 ? void 0 : _error$request.response) && (error === null || error === void 0 ? void 0 : (_error$request2 = error.request) === null || _error$request2 === void 0 ? void 0 : _error$request2.status) !== 0) {\n          var response = JSON.parse(error.request.response);\n          map(response === null || response === void 0 ? void 0 : response.errors, function (errorMesage) {\n            map(errorMesage, function (val, key) {\n              console.log(key); // @ts-ignore\n\n              window.notify([{\n                message: val || \"Something went wrong!!!\",\n                type: \"danger\"\n              }]);\n            });\n          });\n        }\n      }).finally(function () {\n        _this.setState({\n          showSpinner: false\n        });\n      }); // post(`/users`, data)\n      //   .then((res) => {\n      //     console.log(res);\n      //     console.log('kolap ,', res.data.data.user);\n      //     if (qparams.get('redirect')) {\n      //       props.history.push({\n      //         pathname: '/signupconfirm',\n      //         search: '?redirect=' + qparams.get('redirect'),\n      //         state: {\n      //           data: res.data.data.user,\n      //         },\n      //       });\n      //     } else {\n      //       props.history.push({\n      //         pathname: '/signupconfirm',\n      //         state: {\n      //           data: res.data.data.user,\n      //         },\n      //       });\n      //     }\n      //   })\n      //   .catch((err) => {\n      //     console.log('login error', err.request?.response);\n      //     if (err.request.response && err.request.status !== 0) {\n      //       let response = JSON.parse(err.request.response);\n      //       setEmailErr(response.error);\n      //     } else {\n      //       setEmailErr('Unable to sign up with the credentials.');\n      //     }\n      //   })\n      //   .finally(() => {\n      //     setShowSpinner(false);\n      //   });\n    };\n\n    _this.registartionEmail = function (values) {\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.registartionEmailCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.registrationThorughEmailAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n      var requestBody = {\n        \"data\": {\n          \"type\": \"email_account\",\n          \"process\": \"register\",\n          \"attributes\": {\n            \"email\": values.Email\n          }\n        }\n      }; //setting userDeatils to state\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        userEmail: values.Email,\n        userPassword: values.password,\n        userName: values.FullName\n      }));\n\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.verifyEmailBeforeRegistartion = function (resultData, socialMediaName) {\n      //@ts-ignore\n      var guestuserID = localStorage.getItem('guestUUID');\n      var requestBody;\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.verfiySocialLoginApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.socialRegistartionAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n\n      if (guestuserID) {\n        requestBody = {\n          \"uuid\": guestuserID,\n          \"data\": {\n            \"type\": \"social_account\",\n            \"attributes\": {\n              \"provider\": socialMediaName,\n              \"access_token\": resultData.credential && resultData.credential.accessToken\n            }\n          }\n        };\n      } else {\n        requestBody = {\n          \"data\": {\n            \"type\": \"social_account\",\n            \"attributes\": {\n              \"provider\": socialMediaName,\n              \"access_token\": resultData.credential && resultData.credential.accessToken\n            }\n          }\n        };\n      }\n\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.guestRegister = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true\n      }));\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.guestRegisterApiCallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.guestRegistrationAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n      var generateUUId = uuid();\n      localStorage.setItem('guestUUID', generateUUId);\n      var requestBody = {\n        \"data\": {\n          \"type\": \"guest_account\",\n          \"attributes\": {\n            \"uuid\": generateUUId\n          }\n        }\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    _this.signupUser = _this.signupUser.bind(_assertThisInitialized(_this)); // Customizable Area Start\n\n    _this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.AlertMessage), getName(MessageEnum.CountryCodeMessage), getName(MessageEnum.ReciveUserCredentials)];\n    _this.state = {\n      showSpinner: false,\n      loginError: \"\",\n      showPass: false,\n      emailErr: \"\"\n    };\n    _this.emailReg = new RegExp(\"\");\n    _this.labelTitle = configJSON.labelTitle; // Customizable Area End\n\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(EmailAccountRegistrationController, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.send(new Message(getName(MessageEnum.RequestUserCredentials))); // Customizable Area Start\n                // Customizable Area End\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(from, message) {\n        var _this2 = this;\n\n        var apiRequestCallId, responseJson, errorResponse, _this$state$socialMed, user, credential, additionalUserInfo, dat, GuestUserId, _this$props$history, _data$attributes, _responseJson$data, data, name, _responseJson$errors$, _responseJson$errors$2;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                runEngine.debugLog('Message Received', message);\n\n                if (!(message.id === getName(MessageEnum.RestAPIResponceMessage))) {\n                  _context2.next = 31;\n                  break;\n                }\n\n                apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                errorResponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                if (!(apiRequestCallId === this.registartionEmailCallId)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                if (responseJson && responseJson.data && responseJson.meta) {\n                  this.setState(_objectSpread({}, this.state));\n                }\n\n                if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                  this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                    showAlert: true,\n                    messageType: 'danger',\n                    message: responseJson.errors[0].account\n                  }));\n                }\n\n                _context2.next = 29;\n                break;\n\n              case 10:\n                if (!(apiRequestCallId === this.verfiySocialLoginApiCallId)) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                if (!responseJson) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                if (!this.state.socialMediaResult) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                _this$state$socialMed = this.state.socialMediaResult, user = _this$state$socialMed.user, credential = _this$state$socialMed.credential, additionalUserInfo = _this$state$socialMed.additionalUserInfo;\n                dat = {\n                  'email': user.email,\n                  'name': user.displayName\n                };\n                console.log(user.photoURL, \"user.photoURL\", JSON.stringify(dat), \"this.state\", this.state.socialMediaResult);\n                GuestUserId = localStorage.getItem('guestUUID');\n\n                if (GuestUserId) {\n                  setTimeout(function () {\n                    _this2.props.history.push('/cart');\n                  }, 1000);\n                } else {\n                  setTimeout(function () {\n                    _this2.props.history.push('/home-page');\n                  }, 1000);\n                }\n\n                _context2.next = 20;\n                return localStorage.setItem('user', JSON.stringify(responseJson.data));\n\n              case 20:\n                _context2.next = 22;\n                return localStorage.setItem('token', responseJson.meta.token);\n\n              case 22:\n                _context2.next = 24;\n                return localStorage.setItem('profileImage', user.photoURL);\n\n              case 24:\n                _context2.next = 26;\n                return localStorage.setItem('userData', JSON.stringify(dat));\n\n              case 26:\n                _context2.next = 29;\n                break;\n\n              case 28:\n                if (apiRequestCallId === this.guestRegisterApiCallId) {\n                  if (responseJson && responseJson.data && responseJson.meta) {\n                    this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                      loading: false\n                    }));\n                    localStorage.setItem('guestUserData', JSON.stringify(responseJson.data));\n                    localStorage.setItem('token', responseJson.meta.token); //@ts-ignore\n\n                    window.notify([{\n                      type: 'success',\n                      message: 'Welcome to Our Store!'\n                    }]);\n                    (_this$props$history = this.props.history) === null || _this$props$history === void 0 ? void 0 : _this$props$history.push('/home-page');\n                  }\n                } else if (apiRequestCallId === this.sendOTPAPICallId) {\n                  if (responseJson && responseJson.data && responseJson.meta) {\n                    this.setState({\n                      showSpinner: false\n                    });\n                    data = responseJson.data;\n                    name = data === null || data === void 0 ? void 0 : (_data$attributes = data.attributes) === null || _data$attributes === void 0 ? void 0 : _data$attributes.full_name;\n                    localStorage.setItem('token', responseJson.meta.token);\n                    localStorage.setItem('userFullName', name);\n                    this.props.history.push({\n                      pathname: '/otpconfirm',\n                      state: {\n                        data: (_responseJson$data = responseJson.data) === null || _responseJson$data === void 0 ? void 0 : _responseJson$data.user\n                      }\n                    }); // @ts-ignore\n\n                    window.notify([{\n                      message: \"OTP has beed sent to you\",\n                      type: \"success\"\n                    }]);\n                  }\n\n                  if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    this.setState({\n                      showSpinner: false\n                    }); //@ts-ignore\n\n                    window.notify([{\n                      message: ((_responseJson$errors$ = responseJson.errors[0]) === null || _responseJson$errors$ === void 0 ? void 0 : _responseJson$errors$.phone_number) || ((_responseJson$errors$2 = responseJson.errors[0]) === null || _responseJson$errors$2 === void 0 ? void 0 : _responseJson$errors$2.account) || 'something went wrong!',\n                      type: 'danger'\n                    }]);\n                  }\n                }\n\n              case 29:\n                _context2.next = 31;\n                break;\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }() //Registeration through Email\n\n  }]);\n\n  return EmailAccountRegistrationController;\n}(BlockComponent);\n\nexport { EmailAccountRegistrationController as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/email-account-registration/src/EmailAccountRegistration.Web/EmailAccountRegistrationController.web.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","runEngine","map","axios","uuid","configJSON","require","EmailAccountRegistrationController","props","apiEmailLoginCallId","validationApiCallId","emailReg","labelTitle","verfiySocialLoginApiCallId","registartionEmailCallId","guestRegisterApiCallId","sendOTPAPICallId","showPassword","e","preventDefault","setState","prevState","showPass","signupUser","values","showSpinner","data","type","attributes","email","Email","full_name","FullName","phone_number","fullPhoneNumber","process","localStorage","setItem","JSON","stringify","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","sendEmailOTPAPIEndPoint","headers","RestAPIRequestHeaderMessage","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","apiMethodTypeAddDetail","sendMessage","id","post","then","res","meta","name","token","history","push","pathname","state","user","window","notify","message","catch","error","console","log","request","response","status","parse","errors","errorMesage","val","key","finally","registartionEmail","registrationThorughEmailAPIEndPoint","requestBody","userEmail","userPassword","password","userName","verifyEmailBeforeRegistartion","resultData","socialMediaName","guestuserID","getItem","socialRegistartionAPIEndPoint","credential","accessToken","guestRegister","loading","guestRegistrationAPIEndPoint","generateUUId","receive","bind","subScribedMessages","RestAPIResponceMessage","AccoutLoginSuccess","AlertMessage","CountryCodeMessage","ReciveUserCredentials","loginError","emailErr","RegExp","attachBuildingBlock","send","RequestUserCredentials","from","debugLog","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorResponse","RestAPIResponceErrorMessage","length","showAlert","messageType","account","socialMediaResult","additionalUserInfo","dat","displayName","photoURL","GuestUserId","setTimeout"],"mappings":"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","sourcesContent":["//@ts-nocheck;\nimport { IBlock } from \"../../../../framework/src/IBlock\";\nimport { Message } from \"../../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName\n} from \"../../../../framework/src/Messages/MessageEnum\";\nimport { runEngine } from \"../../../../framework/src/RunEngine\";\n// @ts-ignore\nimport map from \"lodash/map\";\nimport axios from \"axios\";\nimport { uuid } from 'uuidv4';\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  id: string;\n  history: any\n  isPopup: boolean\n  // Customizable Area Start\n  // Customizable Area End\n};\n\ninterface S {\n  // Customizable Area Start\n  showSpinner: boolean;\n  loginError: string;\n  showPass: boolean;\n  emailErr: string;\n\n  //success Email Response Data\n  userToken?: string;\n  userEmail?: string;\n  userName?: string;\n  userPassword?: string;\n\n  //social media result\n  socialMediaResult?: any;\n\n\n  // showing alerts\n  showAlert?: boolean;\n  messageType?: any;\n  message?: any;\n\n  loading?: boolean;\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  id: any;\n  // Customizable Area End\n}\n\nexport default class EmailAccountRegistrationController extends BlockComponent<Props, S, SS> {\n\n  // Customizable Area Start\n  apiEmailLoginCallId: string = \"\";\n  validationApiCallId: string = \"\";\n  emailReg: RegExp;\n  labelTitle: string = \"\";\n  verfiySocialLoginApiCallId: string;\n  registartionEmailCallId: string;\n  guestRegisterApiCallId: string;\n  sendOTPAPICallId: string;\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n    this.signupUser = this.signupUser.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.AccoutLoginSuccess),\n      getName(MessageEnum.AlertMessage),\n      getName(MessageEnum.CountryCodeMessage),\n      getName(MessageEnum.ReciveUserCredentials)\n    ];\n    this.state = {\n      showSpinner: false,\n      loginError: \"\",\n      showPass: false,\n      emailErr: \"\"\n    };\n\n    this.emailReg = new RegExp(\"\");\n    this.labelTitle = configJSON.labelTitle;\n    // Customizable Area End\n\n    this.receive = this.receive.bind(this);\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  };\n\n  async componentDidMount() {\n    this.send(new Message(getName(MessageEnum.RequestUserCredentials)));\n    // Customizable Area Start\n    // Customizable Area End\n  }\n\n  showPassword = (e: any) => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      showPass: !prevState.showPass\n    }))\n    // setShowPass(!showPass);\n  };\n\n  signupUser = (values: any) => {\n    this.setState({ showSpinner: true });\n    // const data = {\n    //   user: {\n    //     name: values.FullName,\n    //     email: values.Email,\n    //     password: values.password,\n    //   },\n    // };\n    const data = {\n      data: {\n        type: \"email_account\",\n        attributes: {\n          email: values.Email,\n          full_name: values.FullName,\n          phone_number: values.fullPhoneNumber\n        },\n        process: \"register\"\n      }\n    }\n    localStorage.setItem(\"signUpUser\", JSON.stringify(values));\n\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.sendOTPAPICallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.sendEmailOTPAPIEndPoint);\n\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n\n\n    return runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    axios.post(\"https://ecommerceapp-39394-ruby.39394.dev.ap-southeast-1.aws.svc.builder.ai/account/accounts/send_otp\", data)\n      .then(res => {\n        if (res.data && res.data.meta) {\n          const { data } = res;\n          const name = data?.data?.attributes?.full_name;\n          debugger;\n          // localStorage.setItem(\"SignUPtoken\", res.data.meta.token)\n          localStorage.setItem('token', res.data.meta.token);\n          localStorage.setItem(\"signUpUser\", JSON.stringify(values));\n          localStorage.setItem('userFullName', name);\n        }\n        if (res.data) {\n          this.props.history.push({\n            pathname: '/otpconfirm',\n            state: {\n              data: res.data.data.user,\n            },\n          });\n        }\n        // @ts-ignore\n        window.notify([{ message: \"OTP has beed sent to you\", type: \"success\" }]);\n      })\n      .catch(error => {\n        console.error(error);\n        console.log(error.request.response, \"EEEEEEEEEEEEEEEE\", error);\n\n        if (error?.request?.response && error?.request?.status !== 0) {\n          let response = JSON.parse(error.request.response);\n          map(response?.errors, (errorMesage: any) => {\n            map(errorMesage, (val: any, key: any) => {\n              console.log(key)\n              // @ts-ignore\n              window.notify([{ message: val || \"Something went wrong!!!\", type: \"danger\" }]);\n            })\n          })\n        }\n      })\n      .finally(() => {\n        this.setState({ showSpinner: false });\n      })\n\n\n    // post(`/users`, data)\n    //   .then((res) => {\n    //     console.log(res);\n\n    //     console.log('kolap ,', res.data.data.user);\n    //     if (qparams.get('redirect')) {\n    //       props.history.push({\n    //         pathname: '/signupconfirm',\n    //         search: '?redirect=' + qparams.get('redirect'),\n    //         state: {\n    //           data: res.data.data.user,\n    //         },\n    //       });\n    //     } else {\n    //       props.history.push({\n    //         pathname: '/signupconfirm',\n    //         state: {\n    //           data: res.data.data.user,\n    //         },\n    //       });\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.log('login error', err.request?.response);\n    //     if (err.request.response && err.request.status !== 0) {\n    //       let response = JSON.parse(err.request.response);\n    //       setEmailErr(response.error);\n    //     } else {\n    //       setEmailErr('Unable to sign up with the credentials.');\n    //     }\n    //   })\n    //   .finally(() => {\n    //     setShowSpinner(false);\n    //   });\n  };\n\n  async receive(from: String, message: Message) {\n    runEngine.debugLog('Message Received', message);\n    if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n      let apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n      var responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n      var errorResponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n      if (apiRequestCallId === this.registartionEmailCallId) {\n        if (responseJson && responseJson.data && responseJson.meta) {\n          this.setState({\n            ...this.state,\n          });\n        }\n        if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n          this.setState({\n            ...this.state,\n            showAlert: true,\n            messageType: 'danger',\n            message: responseJson.errors[0].account\n          })\n        }\n      }\n      else if (apiRequestCallId === this.verfiySocialLoginApiCallId) {\n        if (responseJson) {\n          if (this.state.socialMediaResult) {\n            const { user, credential, additionalUserInfo } = this.state.socialMediaResult;\n            let dat = {\n              'email': user.email,\n              'name': user.displayName\n            }\n            console.log(user.photoURL, \"user.photoURL\", JSON.stringify(dat), \"this.state\", this.state.socialMediaResult);\n            const GuestUserId = localStorage.getItem('guestUUID');\n            if (GuestUserId) {\n              setTimeout(() => {\n                this.props.history.push('/cart');\n              }, 1000);\n            } else {\n              setTimeout(() => {\n                this.props.history.push('/home-page');\n              }, 1000);\n            }\n            await localStorage.setItem('user', JSON.stringify(responseJson.data));\n            await localStorage.setItem('token', responseJson.meta.token);\n            await localStorage.setItem('profileImage', user.photoURL);\n            await localStorage.setItem('userData', JSON.stringify(dat));\n          }\n        }\n      }\n      else if (apiRequestCallId === this.guestRegisterApiCallId) {\n        if (responseJson && responseJson.data && responseJson.meta) {\n          this.setState({\n            ...this.state,\n            loading: false\n          });\n          localStorage.setItem('guestUserData', JSON.stringify(responseJson.data));\n          localStorage.setItem('token', responseJson.meta.token);\n          //@ts-ignore\n          window.notify([{ type: 'success', message: 'Welcome to Our Store!' }]);\n          this.props.history?.push('/home-page');\n        }\n      }\n      else if (apiRequestCallId === this.sendOTPAPICallId) {\n        if (responseJson && responseJson.data && responseJson.meta) {\n          this.setState({ showSpinner: false });\n          const { data } = responseJson;\n          const name = data?.attributes?.full_name;\n          localStorage.setItem('token', responseJson.meta.token);\n          localStorage.setItem('userFullName', name);\n          this.props.history.push({\n            pathname: '/otpconfirm',\n            state: {\n              data: responseJson.data?.user,\n            },\n          });\n          // @ts-ignore\n          window.notify([{ message: \"OTP has beed sent to you\", type: \"success\" }]);\n        }\n        if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n          this.setState({ showSpinner: false });\n          //@ts-ignore\n          window.notify([{ message: responseJson.errors[0]?.phone_number || responseJson.errors[0]?.account || 'something went wrong!', type: 'danger' }]);\n        }\n      }\n    }\n    else {\n\n    }\n  }\n\n  //Registeration through Email\n  registartionEmail = (values: any) => {\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n    this.registartionEmailCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.registrationThorughEmailAPIEndPoint);\n\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    const requestBody = {\n      \"data\": {\n        \"type\": \"email_account\",\n        \"process\": \"register\",\n        \"attributes\": {\n          \"email\": values.Email,\n        },\n      }\n    };\n\n    //setting userDeatils to state\n    this.setState({\n      ...this.state,\n      userEmail: values.Email,\n      userPassword: values.password,\n      userName: values.FullName\n    });\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n\n  //registartion through social Login\n  verifyEmailBeforeRegistartion = (resultData: any, socialMediaName: string) => {\n    //@ts-ignore\n    const guestuserID = localStorage.getItem('guestUUID');\n    let requestBody;\n\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n    this.verfiySocialLoginApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.socialRegistartionAPIEndPoint);\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (guestuserID) {\n      requestBody = {\n        \"uuid\": guestuserID,\n        \"data\": {\n          \"type\": \"social_account\",\n          \"attributes\": {\n            \"provider\": socialMediaName,\n            \"access_token\": resultData.credential && resultData.credential.accessToken,\n          }\n        }\n      };\n    } else {\n      requestBody = {\n        \"data\": {\n          \"type\": \"social_account\",\n          \"attributes\": {\n            \"provider\": socialMediaName,\n            \"access_token\": resultData.credential && resultData.credential.accessToken\n          }\n        }\n      };\n    }\n\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n\n  //guest user Registration\n  guestRegister = () => {\n    this.setState({\n      ...this.state,\n      loading: true\n    });\n\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n    this.guestRegisterApiCallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.guestRegistrationAPIEndPoint);\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const generateUUId = uuid();\n    localStorage.setItem('guestUUID', generateUUId);\n    const requestBody = {\n      \"data\": {\n        \"type\": \"guest_account\",\n        \"attributes\": {\n          \"uuid\": generateUUId\n        }\n      }\n    };\n\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypeAddDetail);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}