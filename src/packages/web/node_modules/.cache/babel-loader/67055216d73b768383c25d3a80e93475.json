{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\n// Customizable Area Start\n// Customizable Area End\nexport var configJSON = require(\"./config\");\n\n// Customizable Area Start\n// Customizable Area End\nvar ForgotPasswordController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(ForgotPasswordController, _BlockComponent);\n\n  var _super = _createSuper(ForgotPasswordController);\n\n  // Customizable Area Start\n  // Customizable Area End\n  function ForgotPasswordController(props) {\n    var _this;\n\n    _classCallCheck(this, ForgotPasswordController);\n\n    _this = _super.call(this, props);\n    _this.validationAPICallId = void 0;\n    _this.resetPasswordAPICallId = \"\";\n\n    _this.setNewPass = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        var token, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(values);\n                _context.next = 3;\n                return localStorage.getItem('token');\n\n              case 3:\n                token = _context.sent;\n\n                // const token = localStorage.getItem(\"token\");\n                // setShowSpinner(true);\n                _this.setState({\n                  showSpinner: true\n                });\n\n                data = {\n                  token: token,\n                  data: {\n                    password: values.password,\n                    password_confirmation: values.confirmpassword\n                  }\n                };\n                return _context.abrupt(\"return\", _this.handleResetPassword(data));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.showPassword = function (e) {\n      e.preventDefault(); // setShowPass(!showPass);\n\n      _this.setState({\n        showPass: !_this.state.showPass\n      });\n    };\n\n    _this.showConfirmPassword = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        showConfirmPass: !_this.state.showConfirmPass\n      }); // setConfirmPass(!showConfirmPass);\n\n    };\n\n    _this.handleResetPassword = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        var requestMessage, headers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n                _this.resetPasswordAPICallId = requestMessage.messageId;\n                requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.resetPasswordAPIEndPoint);\n                headers = {\n                  'Content-Type': 'application/json'\n                };\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPutMethod);\n                runEngine.sendMessage(requestMessage.id, requestMessage);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.subScribedMessages = [// Customizable Area Start\n    getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.NavigationPayLoadMessage), getName(MessageEnum.CountryCodeMessage) // Customizable Area End\n    ];\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages); // Customizable Area Start\n\n    _this.state = {\n      showPass: false,\n      showConfirmPass: false,\n      message: \"\",\n      invalidPass: \"\",\n      showSpinner: false\n    }; // Customizable Area End\n\n    return _this;\n  }\n\n  _createClass(ForgotPasswordController, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(from, message) {\n        var apiRequestCallId, responseJson, errorResponse, _responseJson$data, _responseJson$data2, _responseJson$data2$m, _responseJson$errors, _responseJson$errors2, data1, data2;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                runEngine.debugLog('Message Received', message);\n\n                if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorResponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.resetPasswordAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        showSpinner: false\n                      });\n                      this.setState({\n                        invalidPass: \"\"\n                      });\n                      localStorage.setItem(\"token\", \"\");\n                      this.props.history.push({\n                        pathname: \"/login\",\n                        state: {\n                          activeTab: 2\n                        }\n                      });\n\n                      if (responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data = responseJson.data) === null || _responseJson$data === void 0 ? void 0 : _responseJson$data.meta) {\n                        // @ts-ignore\n                        window.notify([{\n                          message: responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data2 = responseJson.data) === null || _responseJson$data2 === void 0 ? void 0 : (_responseJson$data2$m = _responseJson$data2.meta) === null || _responseJson$data2$m === void 0 ? void 0 : _responseJson$data2$m.message,\n                          type: \"success\"\n                        }]);\n                      }\n                    }\n\n                    if (responseJson && responseJson.errors) {\n                      this.setState({\n                        showSpinner: false\n                      });\n                      data1 = (_responseJson$errors = responseJson.errors) === null || _responseJson$errors === void 0 ? void 0 : _responseJson$errors.full_phone_number[0];\n                      data2 = data1 + ' ' + ((_responseJson$errors2 = responseJson.errors) === null || _responseJson$errors2 === void 0 ? void 0 : _responseJson$errors2.full_phone_number[1]); //@ts-ignore\n\n                      window.notify([{\n                        type: 'danger',\n                        message: data2 || 'Something Went Wrong!'\n                      }]);\n\n                      if (responseJson.errors.length > 0) {\n                        this.setState({\n                          showSpinner: false\n                        }); //@ts-ignore\n\n                        window.notify([{\n                          type: 'danger',\n                          message: responseJson.errors[0].email || 'Something Went Wrong!'\n                        }]);\n                      }\n                    }\n                  }\n                } else {}\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function receive(_x3, _x4) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return ForgotPasswordController;\n}(BlockComponent);\n\nexport { ForgotPasswordController as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/forgot-password/src/NewPasswordController.web.tsx"],"names":["BlockComponent","runEngine","Message","MessageEnum","getName","configJSON","require","ForgotPasswordController","props","validationAPICallId","resetPasswordAPICallId","setNewPass","values","console","log","localStorage","getItem","token","setState","showSpinner","data","password","password_confirmation","confirmpassword","handleResetPassword","showPassword","e","preventDefault","showPass","state","showConfirmPassword","showConfirmPass","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","resetPasswordAPIEndPoint","headers","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","httpPutMethod","sendMessage","id","subScribedMessages","RestAPIResponceMessage","NavigationPayLoadMessage","CountryCodeMessage","receive","bind","attachBuildingBlock","message","invalidPass","from","debugLog","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorResponse","RestAPIResponceErrorMessage","setItem","history","push","pathname","activeTab","meta","window","notify","type","errors","data1","full_phone_number","data2","length","email"],"mappings":"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","sourcesContent":["import { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport axios from \"axios\";\n// @ts-ignore\nimport map from \"lodash/map\";\n//@ts-ignore\nimport StroageProvider from \"../../../framework/src/StorageProvider.web\";\n// Customizable Area Start\n// Customizable Area End\n\nexport const configJSON = require(\"./config\");\n\nexport interface Props {\n  navigation: any;\n  history: any;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  showPass: boolean;\n  showConfirmPass: boolean;\n  message: string;\n  invalidPass: string;\n  showSpinner: boolean;\n  // Customizable Area End\n}\n\ninterface SS {\n  // Customizable Area Start\n  navigation: any;\n  // Customizable Area End\n}\n\n// Customizable Area Start\n\n// Customizable Area End\n\nexport default class ForgotPasswordController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  // Customizable Area Start\n  validationAPICallId: any;\n  resetPasswordAPICallId: string = \"\";\n\n  // Customizable Area End\n\n  constructor(props: Props) {\n    super(props);\n    this.subScribedMessages = [\n      // Customizable Area Start\n      getName(MessageEnum.RestAPIResponceMessage),\n      getName(MessageEnum.NavigationPayLoadMessage),\n      getName(MessageEnum.CountryCodeMessage)\n      // Customizable Area End\n    ];\n\n    this.receive = this.receive.bind(this);\n\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n\n    // Customizable Area Start\n\n    this.state = {\n      showPass: false,\n      showConfirmPass: false,\n      message: \"\",\n      invalidPass: \"\",\n      showSpinner: false\n    };\n    // Customizable Area End\n  }\n\n  async componentDidMount() {\n  }\n\n\n  async receive(from: string, message: Message) {\n    runEngine.debugLog('Message Received', message);\n    if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n      let apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n      var responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n      var errorResponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n      if (apiRequestCallId === this.resetPasswordAPICallId) {\n        if (responseJson && responseJson.data) {\n          this.setState({ showSpinner: false });\n          this.setState({ invalidPass: \"\" })\n          localStorage.setItem(\"token\", \"\");\n          this.props.history.push({ pathname: \"/login\", state: { activeTab: 2 } });\n          if (responseJson?.data?.meta) {\n            // @ts-ignore\n            window.notify([{ message: responseJson?.data?.meta?.message, type: \"success\" }])\n          }\n        }\n        if (responseJson && responseJson.errors) {\n          this.setState({ showSpinner: false });\n          const data1 = responseJson.errors?.full_phone_number[0];\n          const data2 = data1 + ' ' + responseJson.errors?.full_phone_number[1];\n          //@ts-ignore\n          window.notify([{ type: 'danger', message: data2 || 'Something Went Wrong!' }])\n          if (responseJson.errors.length > 0) {\n            this.setState({ showSpinner: false });\n            //@ts-ignore\n            window.notify([{ type: 'danger', message: responseJson.errors[0].email || 'Something Went Wrong!' }])\n          }\n        }\n      }\n    }\n    else {\n\n    }\n  }\n\n  setNewPass = async (values: any) => {\n    console.log(values);\n    const token = await localStorage.getItem('token');\n    // const token = localStorage.getItem(\"token\");\n    // setShowSpinner(true);\n    this.setState({ showSpinner: true });\n    let data = {\n      token,\n      data: {\n        password: values.password,\n        password_confirmation: values.confirmpassword\n      }\n    }\n    return this.handleResetPassword(data);\n  };\n\n  showPassword = (e: any) => {\n    e.preventDefault();\n    // setShowPass(!showPass);\n    this.setState({ showPass: !this.state.showPass })\n  };\n  showConfirmPassword = (e: any) => {\n    e.preventDefault();\n    this.setState({ showConfirmPass: !this.state.showConfirmPass })\n    // setConfirmPass(!showConfirmPass);\n  };\n\n  //Reset Password \n  handleResetPassword = async (data: any) => {\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.resetPasswordAPICallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.resetPasswordAPIEndPoint);\n\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPutMethod);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}