{"ast":null,"code":"import _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { runEngine } from '../../../framework/src/RunEngine';\nimport { Message } from '../../../framework/src/Message';\nimport MessageEnum, { getName } from '../../../framework/src/Messages/MessageEnum';\n\nvar InfoPageAdapter = /*#__PURE__*/function () {\n  function InfoPageAdapter() {\n    _classCallCheck(this, InfoPageAdapter);\n\n    this.send = void 0;\n\n    this.convert = function (from) {\n      var title = from.getData(getName(MessageEnum.InfoPageTitleMessage));\n      var body = from.getData(getName(MessageEnum.InfoPageBodyMessage));\n      var buttonText = from.getData(getName(MessageEnum.InfoPageButtonTextMessage));\n      var navigationBarTitle = from.getData(getName(MessageEnum.NavigationScreenNameMessage));\n      var buttonNavigationMessage = from.getData(getName(MessageEnum.NavigationRaiseMessage));\n\n      if (from.id === getName(MessageEnum.AccoutResgistrationSuccess)) {\n        title = 'Account Creation';\n        body = 'Account was sucessfuly created.';\n        buttonText = 'Ok';\n        navigationBarTitle = 'Account Creation';\n        buttonNavigationMessage = new Message(getName(MessageEnum.NavigationHomeScreenMessage));\n      } else if (from.id === getName(MessageEnum.AccoutLoginSuccess)) {\n        title = 'Account Login';\n        body = 'Account was sucessfuly logged in.';\n        buttonText = 'Ok';\n        navigationBarTitle = 'Account Login';\n        buttonNavigationMessage = new Message(getName(MessageEnum.NavigationHomeScreenMessage));\n      }\n\n      var to = new Message(getName(MessageEnum.NavigationMessage));\n      to.addData(getName(MessageEnum.NavigationTargetMessage), 'InfoPage');\n      to.addData(getName(MessageEnum.NavigationPropsMessage), from.getData(getName(MessageEnum.NavigationPropsMessage)));\n      to.addData(getName(MessageEnum.NavigationScreenNameMessage), navigationBarTitle);\n      var raiseMessage = new Message(getName(MessageEnum.NavigationPayLoadMessage));\n      raiseMessage.addData(getName(MessageEnum.InfoPageTitleMessage), title);\n      raiseMessage.addData(getName(MessageEnum.InfoPageBodyMessage), body);\n      raiseMessage.addData(getName(MessageEnum.InfoPageButtonTextMessage), buttonText);\n      buttonNavigationMessage.addData(getName(MessageEnum.NavigationPropsMessage), from.getData(getName(MessageEnum.NavigationPropsMessage)));\n      raiseMessage.addData(getName(MessageEnum.InfoPageNavigationScreenMessage), buttonNavigationMessage);\n      to.addData(getName(MessageEnum.NavigationRaiseMessage), raiseMessage);\n      return to;\n    };\n\n    var blockId = uuidv4();\n\n    this.send = function (message) {\n      return runEngine.sendMessage(blockId, message);\n    };\n\n    runEngine.attachBuildingBlock(this, [getName(MessageEnum.NavigationInfoPageMessage), getName(MessageEnum.AccoutResgistrationSuccess), getName(MessageEnum.AccoutLoginSuccess)]);\n  }\n\n  _createClass(InfoPageAdapter, [{\n    key: \"receive\",\n    value: function receive(from, message) {\n      this.send(this.convert(message));\n    }\n  }]);\n\n  return InfoPageAdapter;\n}();\n\nexport { InfoPageAdapter as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/adapters/src/InfoPageAdapter.tsx"],"names":["v4","uuidv4","runEngine","Message","MessageEnum","getName","InfoPageAdapter","send","convert","from","title","getData","InfoPageTitleMessage","body","InfoPageBodyMessage","buttonText","InfoPageButtonTextMessage","navigationBarTitle","NavigationScreenNameMessage","buttonNavigationMessage","NavigationRaiseMessage","id","AccoutResgistrationSuccess","NavigationHomeScreenMessage","AccoutLoginSuccess","to","NavigationMessage","addData","NavigationTargetMessage","NavigationPropsMessage","raiseMessage","NavigationPayLoadMessage","InfoPageNavigationScreenMessage","blockId","message","sendMessage","attachBuildingBlock","NavigationInfoPageMessage"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { runEngine } from '../../../framework/src/RunEngine';\nimport { IBlock } from '../../../framework/src/IBlock';\nimport { Message } from '../../../framework/src/Message';\nimport MessageEnum, {\n  getName\n} from '../../../framework/src/Messages/MessageEnum';\n\nexport default class InfoPageAdapter {\n  send: (message: Message) => void;\n\n  constructor() {\n    const blockId = uuidv4();\n    this.send = message => runEngine.sendMessage(blockId, message);\n    runEngine.attachBuildingBlock(this as IBlock, [\n      getName(MessageEnum.NavigationInfoPageMessage),\n      getName(MessageEnum.AccoutResgistrationSuccess),\n      getName(MessageEnum.AccoutLoginSuccess)\n    ]);\n  }\n\n  convert = (from: Message): Message => {\n    let title = from.getData(getName(MessageEnum.InfoPageTitleMessage));\n    let body = from.getData(getName(MessageEnum.InfoPageBodyMessage));\n    let buttonText = from.getData(\n      getName(MessageEnum.InfoPageButtonTextMessage)\n    );\n    let navigationBarTitle = from.getData(\n      getName(MessageEnum.NavigationScreenNameMessage)\n    );\n    let buttonNavigationMessage = from.getData(\n      getName(MessageEnum.NavigationRaiseMessage)\n    );\n\n    if (from.id === getName(MessageEnum.AccoutResgistrationSuccess)) {\n      title = 'Account Creation';\n      body = 'Account was sucessfuly created.';\n      buttonText = 'Ok';\n      navigationBarTitle = 'Account Creation';\n      buttonNavigationMessage = new Message(\n        getName(MessageEnum.NavigationHomeScreenMessage)\n      );\n    } else if (from.id === getName(MessageEnum.AccoutLoginSuccess)) {\n      title = 'Account Login';\n      body = 'Account was sucessfuly logged in.';\n      buttonText = 'Ok';\n      navigationBarTitle = 'Account Login';\n      buttonNavigationMessage = new Message(\n        getName(MessageEnum.NavigationHomeScreenMessage)\n      );\n    }\n\n    const to = new Message(getName(MessageEnum.NavigationMessage));\n    to.addData(getName(MessageEnum.NavigationTargetMessage), 'InfoPage');\n\n    to.addData(\n      getName(MessageEnum.NavigationPropsMessage),\n      from.getData(getName(MessageEnum.NavigationPropsMessage))\n    );\n\n    to.addData(\n      getName(MessageEnum.NavigationScreenNameMessage),\n      navigationBarTitle\n    );\n\n    const raiseMessage: Message = new Message(\n      getName(MessageEnum.NavigationPayLoadMessage)\n    );\n    raiseMessage.addData(getName(MessageEnum.InfoPageTitleMessage), title);\n    raiseMessage.addData(getName(MessageEnum.InfoPageBodyMessage), body);\n    raiseMessage.addData(\n      getName(MessageEnum.InfoPageButtonTextMessage),\n      buttonText\n    );\n\n    buttonNavigationMessage.addData(\n      getName(MessageEnum.NavigationPropsMessage),\n      from.getData(getName(MessageEnum.NavigationPropsMessage))\n    );\n\n    raiseMessage.addData(\n      getName(MessageEnum.InfoPageNavigationScreenMessage),\n      buttonNavigationMessage\n    );\n\n    to.addData(getName(MessageEnum.NavigationRaiseMessage), raiseMessage);\n\n    return to;\n  };\n\n  receive(from: string, message: Message): void {\n    this.send(this.convert(message));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}