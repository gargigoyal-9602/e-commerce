{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck;\nimport 'react-router-dom';\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nexport var configJSON = require('./config');\nexport var getValidationsSchema = require('../../../components/src/Validations/ValidationSchema');\n\nvar ProfilebioController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(ProfilebioController, _BlockComponent);\n\n  var _super = _createSuper(ProfilebioController);\n\n  function ProfilebioController(props) {\n    var _this;\n\n    _classCallCheck(this, ProfilebioController);\n\n    _this = _super.call(this, props);\n    _this.updateProfileAPICallId = void 0;\n    _this.updateProfilePasswrdAPICallId = void 0;\n    _this.getUserProfileAPICallId = void 0;\n\n    _this.updatePasswordHandler = function (values) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true,\n        showSpinner: true\n      }));\n\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.updateProfilePasswrdAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.updateProfilePasswordAPIEndPoint);\n      var headers = {\n        'content-type': 'application/json'\n      };\n      var requestBody = {\n        token: token,\n        \"data\": {\n          \"current_password\": values.currentPassword,\n          \"password\": values.newPassword,\n          \"password_confirmation\": values.confirmPassword\n        }\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.updateProfileHandler = function (values) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true,\n        showSpinner: true\n      }));\n\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.updateProfileAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.updateProfileAPIEndPoint);\n      var headers = {};\n      var formData = new FormData();\n      formData.append('token', token);\n      formData.append(\"data[full_name]\", values.name);\n      formData.append(\"data[email]\", values.email);\n      formData.append(\"data[full_phone_number]\", values.phone); //@ts-ignore\n\n      _this.state.removeClicked && _this.state.newProfileImgBase64 == '' ? formData.append(\"data[remove_profile]\", true) : ''; // formData.append(`data[image]`, this.state.newProfileImgBase64 && this.state.newProfileImgBase64);\n\n      _this.state.isNewImageAdded && _this.state.newProfileImgBase64 ? formData.append(\"data[image]\", _this.state.newProfileImgBase64) : '';\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), formData);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.getUserProfileHandler = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true\n      }));\n\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.getUserProfileAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getProfileDetails);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.state = {\n      activeTab: '1',\n      showAlertPassword: false,\n      passwordError: '',\n      currentPasswordErr: '',\n      confirmPasswordError: ''\n    };\n    _this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage), getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.AlertMessage)];\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(ProfilebioController, [{\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(from, message) {\n        var apiRequestCallId, responseJson, errorReponse, dat, title, AlertBodyMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runEngine.debugLog('Message Received', message);\n\n                if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.getUserProfileAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        loading: false,\n                        getUserDeatils: responseJson.data,\n                        newProfileImgBase64: responseJson.data && responseJson.data.attributes && responseJson.data.attributes.image_url\n                      }));\n                      dat = {\n                        'name': responseJson.data && responseJson.data.attributes && responseJson.data.attributes.full_name,\n                        'email': responseJson.data && responseJson.data.attributes && responseJson.data.attributes.email\n                      }; //@ts-ignore\n\n                      localStorage.setItem('userData', JSON.stringify(dat));\n                      localStorage.setItem('user', JSON.stringify(responseJson.data));\n                      localStorage.setItem('profileImage', responseJson.data.attributes.image_url);\n                      this.props.updateProfile();\n                    } else {\n                      this.parseApiErrorResponse(responseJson);\n                    }\n                  } else if (apiRequestCallId === this.updateProfilePasswrdAPICallId) {\n                    if (responseJson && responseJson.message) {\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        loading: false,\n                        isPasswordUpdated: true,\n                        isChangePassword: false,\n                        showSpinner: false\n                      })); // @ts-ignore\n\n                      window.notify([{\n                        message: responseJson.message || 'something went wrong!!!',\n                        type: \"success\"\n                      }]);\n                    }\n\n                    if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                      console.log(\"I am coming\", this.state);\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        showSpinner: false,\n                        showAlertPassword: true,\n                        loading: false,\n                        messageType: responseJson.errors[0].message ? 'danger' : '',\n                        message: responseJson.errors[0].message\n                      })); // @ts-ignore\n\n                      window.notify([{\n                        message: responseJson.errors[0].message || 'something went wrong!!!',\n                        type: \"danger\"\n                      }]);\n                    } else {\n                      this.parseApiErrorResponse(responseJson);\n                    }\n                  } else if (apiRequestCallId === this.updateProfileAPICallId) {\n                    if (responseJson && responseJson.message) {\n                      this.setState({\n                        loading: false,\n                        showSpinner: false\n                      }); // @ts-ignore\n\n                      window.notify([{\n                        message: responseJson.message || 'something went wrong!!!',\n                        type: \"danger\"\n                      }]);\n                    }\n\n                    if (responseJson && responseJson.data) {\n                      if (responseJson && responseJson.data && responseJson.meta) {\n                        this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                          loading: false,\n                          userDetails: responseJson.data,\n                          editProfile: false,\n                          showSpinner: false\n                        })); // @ts-ignore\n\n                        window.notify([{\n                          message: responseJson.meta.message || 'something went wrong!!!',\n                          type: \"success\"\n                        }]);\n                        this.getUserProfileHandler();\n                      }\n\n                      ;\n                    } else {\n                      this.parseApiErrorResponse(responseJson);\n                    }\n                  }\n                } else if (getName(MessageEnum.AlertMessage) === message.id) {\n                  title = message.getData(getName(MessageEnum.AlertTitleMessage));\n                  AlertBodyMessage = message.getData(getName(MessageEnum.AlertBodyMessage));\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return ProfilebioController;\n}(BlockComponent);\n\nexport { ProfilebioController as default };\n;","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/profilebio/src/ProfilebioController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","configJSON","require","getValidationsSchema","ProfilebioController","props","updateProfileAPICallId","updateProfilePasswrdAPICallId","getUserProfileAPICallId","updatePasswordHandler","values","setState","state","loading","showSpinner","token","localStorage","getItem","requestMessage","RestAPIRequestMessage","messageId","addData","RestAPIResponceEndPointMessage","updateProfilePasswordAPIEndPoint","headers","requestBody","currentPassword","newPassword","confirmPassword","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","apiPutMethod","sendMessage","id","updateProfileHandler","updateProfileAPIEndPoint","formData","FormData","append","name","email","phone","removeClicked","newProfileImgBase64","isNewImageAdded","getUserProfileHandler","getProfileDetails","apiGetMethod","activeTab","showAlertPassword","passwordError","currentPasswordErr","confirmPasswordError","subScribedMessages","RestAPIResponceMessage","AccoutLoginSuccess","AlertMessage","receive","bind","attachBuildingBlock","from","message","debugLog","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","data","getUserDeatils","attributes","image_url","dat","full_name","setItem","updateProfile","parseApiErrorResponse","isPasswordUpdated","isChangePassword","window","notify","type","errors","length","console","log","messageType","meta","userDetails","editProfile","title","AlertTitleMessage","AlertBodyMessage"],"mappings":"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","sourcesContent":["//@ts-nocheck;\nimport React from 'react';\nimport { } from 'react-router-dom';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nexport const configJSON = require('./config');\nexport const getValidationsSchema = require('../../../components/src/Validations/ValidationSchema');\n\nexport interface Props {\n    // Customizable Area Start\n    updateProfile?: any;\n    // Customizable Area End\n}\n\ninterface S {\n    // Customizable Area Start\n    // items: any[];\n    // routesConfig: any[];\n    activeTab: string;\n\n    editProfile?: boolean;\n    profileImgBase64?: string;\n    isChangePassword?: boolean;\n    newProfileImgBase64?: any;\n    removeClicked?: boolean;\n    isPasswordUpdated?: boolean;\n    isNewImageAdded?: boolean;\n    passwordError: string;\n    showPassword?: boolean;\n    showCurrentPassword?: boolean;\n    currentPasswordErr: string;\n    showConfirmPassword?: boolean;\n    confirmPasswordError: string;\n\n    //get details\n    getUserDeatils?: any;\n    userDetails?: any;\n\n    //alert Messages\n    messageType?: string;\n    message?: string;\n    showAlertPassword: boolean;\n    //logoutmodal\n    disableLogout?: boolean;\n\n    loading?: boolean;\n    showSpinner?: boolean;\n    // Customizable Area End\n}\n\ninterface SS {\n    id: any;\n}\n\nexport default class ProfilebioController extends BlockComponent<Props, S, SS>{\n    updateProfileAPICallId: string;\n    updateProfilePasswrdAPICallId: string;\n    getUserProfileAPICallId: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            activeTab: '1',\n            showAlertPassword: false,\n            passwordError: '',\n            currentPasswordErr: '',\n            confirmPasswordError: ''\n        };\n        this.subScribedMessages = [\n            getName(MessageEnum.RestAPIResponceMessage),\n            getName(MessageEnum.AccoutLoginSuccess),\n            getName(MessageEnum.AlertMessage)\n        ];\n        this.receive = this.receive.bind(this);\n        runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n    };\n\n    async receive(from: String, message: Message) {\n        runEngine.debugLog('Message Received', message);\n        if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n            const apiRequestCallId = message.getData(\n                getName(MessageEnum.RestAPIResponceDataMessage)\n            );\n\n            var responseJson = message.getData(\n                getName(MessageEnum.RestAPIResponceSuccessMessage)\n            );\n\n            var errorReponse = message.getData(\n                getName(MessageEnum.RestAPIResponceErrorMessage)\n            );\n            if (apiRequestCallId === this.getUserProfileAPICallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        ...this.state,\n                        loading: false,\n                        getUserDeatils: responseJson.data,\n                        newProfileImgBase64: responseJson.data && responseJson.data.attributes && responseJson.data.attributes.image_url\n                    });\n                    let dat = {\n                        'name': responseJson.data && responseJson.data.attributes && responseJson.data.attributes.full_name,\n                        'email': responseJson.data && responseJson.data.attributes && responseJson.data.attributes.email\n                    };\n                    //@ts-ignore\n                    localStorage.setItem('userData', JSON.stringify(dat));\n                    localStorage.setItem('user', JSON.stringify(responseJson.data));\n                    localStorage.setItem('profileImage', responseJson.data.attributes.image_url);\n                    this.props.updateProfile();\n                } else {\n                    this.parseApiErrorResponse(responseJson);\n                }\n            }\n            else if (apiRequestCallId === this.updateProfilePasswrdAPICallId) {\n                if (responseJson && responseJson.message) {\n                    this.setState({\n                        ...this.state,\n                        loading: false,\n                        isPasswordUpdated: true,\n                        isChangePassword: false,\n                        showSpinner: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.message || 'something went wrong!!!', type: \"success\" }]);\n                }\n                if (responseJson && responseJson.errors && responseJson.errors.length > 0) {\n                    console.log(\"I am coming\", this.state);\n                    this.setState({\n                        ...this.state,\n                        showSpinner: false,\n                        showAlertPassword: true,\n                        loading: false,\n                        messageType: responseJson.errors[0].message ? 'danger' : '',\n                        message: responseJson.errors[0].message\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.errors[0].message || 'something went wrong!!!', type: \"danger\" }]);\n                }\n                else {\n                    this.parseApiErrorResponse(responseJson);\n                }\n            }\n            else if (apiRequestCallId === this.updateProfileAPICallId) {\n                if(responseJson && responseJson.message){\n                    this.setState({\n                        loading:false,\n                        showSpinner: false,\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.message || 'something went wrong!!!', type: \"danger\" }]);\n                }\n                if (responseJson && responseJson.data) {\n                    if (responseJson && responseJson.data && responseJson.meta) {\n                        this.setState({\n                            ...this.state,\n                            loading: false,\n                            userDetails: responseJson.data,\n                            editProfile: false,\n                            showSpinner: false,\n                        });\n                        // @ts-ignore\n                        window.notify([{ message: responseJson.meta.message || 'something went wrong!!!', type: \"success\" }]);\n                        this.getUserProfileHandler();\n                    };\n                } else {\n                    this.parseApiErrorResponse(responseJson);\n                }\n            }\n        }\n        else if (getName(MessageEnum.AlertMessage) === message.id) {\n            const title = message.getData(\n                getName(MessageEnum.AlertTitleMessage)\n            );\n            let AlertBodyMessage = message.getData(\n                getName(MessageEnum.AlertBodyMessage)\n            );\n        }\n    };\n    //update userProfile Password\n    updatePasswordHandler = (values: any) => {\n        this.setState({\n            ...this.state,\n            loading: true,\n            showSpinner: true\n        });\n        const token = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n        this.updateProfilePasswrdAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.updateProfilePasswordAPIEndPoint);\n\n        const headers = {\n            'content-type': 'application/json'\n        };\n        const requestBody = {\n            token,\n            \"data\": {\n                \"current_password\": values.currentPassword,\n                \"password\": values.newPassword,\n                \"password_confirmation\": values.confirmPassword\n            }\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    //update userProfile Details\n    updateProfileHandler = (values: any) => {\n        this.setState({\n            ...this.state,\n            loading: true,\n            showSpinner: true\n        });\n        const token: any = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.updateProfileAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.updateProfileAPIEndPoint);\n\n        const headers = {\n        };\n        let formData = new FormData();\n        formData.append('token', token);\n        formData.append(`data[full_name]`, values.name);\n        formData.append(`data[email]`, values.email);\n        formData.append(`data[full_phone_number]`, values.phone);\n        //@ts-ignore\n        this.state.removeClicked && this.state.newProfileImgBase64 == '' ? formData.append(`data[remove_profile]`, true) : ''\n        // formData.append(`data[image]`, this.state.newProfileImgBase64 && this.state.newProfileImgBase64);\n        this.state.isNewImageAdded && this.state.newProfileImgBase64 ? formData.append(`data[image]`, this.state.newProfileImgBase64) : ''\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), formData);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    //get userProfile Details\n    getUserProfileHandler = () => {\n        this.setState({\n            ...this.state,\n            loading: true,\n        });\n        const token = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n        this.getUserProfileAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getProfileDetails);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        }\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n};"]},"metadata":{},"sourceType":"module"}