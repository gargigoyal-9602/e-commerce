{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck;\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\"; //@ts-ignore\n\nimport moment from 'moment';\nexport var configJSON = require('./config');\n;\n;\n;\n\nvar NotificationController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(NotificationController, _BlockComponent);\n\n  var _super = _createSuper(NotificationController);\n\n  function NotificationController(props) {\n    var _this;\n\n    _classCallCheck(this, NotificationController);\n\n    _this = _super.call(this, props);\n    _this.getAllNotificationsAPICallId = void 0;\n    _this.readAllNotificationsAPICallId = void 0;\n    _this.readSingleNotificationOnIDAPICallID = void 0;\n    _this.deleteAllNotificationAPICallID = void 0;\n    _this.deleteSingleNotificationOnIDAPICallID = void 0;\n\n    _this.getDays = function (data) {\n      var date = moment(data);\n\n      if (moment().diff(date, 'days') >= 1) {\n        return date.fromNow(); // '2 days ago' etc.\n      }\n\n      return date.calendar().split(' ')[0]; // 'Today', 'yesterday', 'tomorrow'\n    };\n\n    _this.getAllNotificationsList = function () {\n      _this.setState({\n        loader: true\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.getAllNotificationsAPICallId = requestMessage.messageId;\n      var pageNo = 1;\n\n      if (_this.state.isShowLoadMore) {\n        //@ts-ignore\n        pageNo = _this.state.currentPage + 1;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.getAllNotificationsAPIEndPoint, \"?page=\").concat(pageNo));\n      } else {\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), \"\".concat(configJSON.getAllNotificationsAPIEndPoint));\n      } //`${configJSON.getAllNotificationsAPIEndPoint}?page=${pageNo}`\n      // requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), `${configJSON.getAllNotificationsAPIEndPoint}?page=${pageNo}`);\n\n\n      var headers = {\n        'Content-Type': 'application/json',\n        token: localStorage.getItem('token')\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.readAllNotifications = function () {\n      _this.setState({\n        loader: true\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.readAllNotificationsAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.readAllNotificationsAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: localStorage.getItem('token')\n      };\n      var requestBody = {\n        \"read_all\": true\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.readSingleNotificationBasedOnId = function (id) {\n      _this.setState({\n        loader: true\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.readSingleNotificationOnIDAPICallID = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.readOneNotificationOnIdAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: localStorage.getItem('token')\n      };\n      var requestBody = {\n        \"read_all\": false,\n        \"notification_id\": id\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.deleteAllNotifications = function () {\n      _this.setState({\n        loader: true\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.deleteAllNotificationAPICallID = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.deleteAllNotificationsAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: localStorage.getItem('token')\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiDeleteMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.deleteSingleNotificationOnId = function () {\n      var _this$state;\n\n      _this.setState({\n        loader: true\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.deleteSingleNotificationOnIDAPICallID = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.deleteOneNotificationOnIdAPIEndPoint + '/' + ((_this$state = _this.state) === null || _this$state === void 0 ? void 0 : _this$state.deleteNotificationID));\n      var headers = {\n        'Content-Type': 'application/json',\n        token: localStorage.getItem('token')\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiDeleteMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.state = {};\n    _this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.AlertMessage), getName(MessageEnum.RestAPIResponceMessage)];\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(NotificationController, [{\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(from, message) {\n        var apiRequestCallId, responseJson, errorReponse, _this$state2, _meta$pagination, _meta$pagination2, notifications, data, meta, _responseJson$data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runEngine.debugLog('----Message DebugLog------', message);\n\n                if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (this.getAllNotificationsAPICallId === apiRequestCallId) {\n                    if (responseJson && responseJson.data) {\n                      notifications = responseJson.data.notifications;\n                      data = responseJson.data, meta = responseJson.meta; // let totalData: any = [];\n                      // //@ts-ignore\n                      // if (this.state?.notificationsList?.length > 0) {\n                      //     //@ts-ignore\n                      //     totalData = this.state?.notificationsList?.splice();\n                      //     totalData.push(notifications?.data);\n                      // } else {\n                      //     totalData.push(notifications?.data);\n                      // }\n\n                      this.setState({\n                        loader: false,\n                        //@ts-ignore\n                        notificationsList: this.state.isShowLoadMore ? [].concat(_toConsumableArray((_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.notificationsList), _toConsumableArray(notifications === null || notifications === void 0 ? void 0 : notifications.data)) : notifications === null || notifications === void 0 ? void 0 : notifications.data,\n                        // notificationsList: totalData,\n                        isShowLoadMore: meta === null || meta === void 0 ? void 0 : (_meta$pagination = meta.pagination) === null || _meta$pagination === void 0 ? void 0 : _meta$pagination.next_page,\n                        currentPage: meta === null || meta === void 0 ? void 0 : (_meta$pagination2 = meta.pagination) === null || _meta$pagination2 === void 0 ? void 0 : _meta$pagination2.current_page\n                      });\n                    }\n                  }\n\n                  if (this.readAllNotificationsAPICallId === apiRequestCallId) {\n                    if (responseJson) {\n                      this.setState({\n                        loader: false\n                      });\n                      this.getAllNotificationsList();\n                    }\n                  }\n\n                  if (this.readSingleNotificationOnIDAPICallID === apiRequestCallId) {\n                    if (responseJson) {\n                      this.setState({\n                        loader: false\n                      });\n                      this.getAllNotificationsList();\n                    }\n                  }\n\n                  if (this.deleteSingleNotificationOnIDAPICallID === apiRequestCallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        loader: false,\n                        deleteNotificationID: '',\n                        isDeleteNotificationCheck: false\n                      }); //@ts-ignore\n\n                      window.notify([{\n                        type: 'success',\n                        message: (responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$data = responseJson.data) === null || _responseJson$data === void 0 ? void 0 : _responseJson$data.message) || 'Something went Wrong!!!'\n                      }]);\n                      this.getAllNotificationsList();\n                    }\n                  }\n\n                  if (this.deleteAllNotificationAPICallID === apiRequestCallId) {\n                    if (responseJson) {\n                      this.setState({\n                        loader: false\n                      }); //@ts-ignore\n\n                      window.notify([{\n                        type: 'success',\n                        message: responseJson.message\n                      }]);\n                      this.getAllNotificationsList();\n                    }\n                  }\n                } else {}\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return NotificationController;\n}(BlockComponent);\n\nexport { NotificationController as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/profilebio/src/NotificationsController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","moment","configJSON","require","NotificationController","props","getAllNotificationsAPICallId","readAllNotificationsAPICallId","readSingleNotificationOnIDAPICallID","deleteAllNotificationAPICallID","deleteSingleNotificationOnIDAPICallID","getDays","data","date","diff","fromNow","calendar","split","getAllNotificationsList","setState","loader","requestMessage","RestAPIRequestMessage","messageId","pageNo","state","isShowLoadMore","currentPage","addData","RestAPIResponceEndPointMessage","getAllNotificationsAPIEndPoint","headers","token","localStorage","getItem","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestMethodMessage","apiGetMethod","sendMessage","id","readAllNotifications","readAllNotificationsAPIEndPoint","requestBody","RestAPIRequestBodyMessage","apiPutMethod","readSingleNotificationBasedOnId","readOneNotificationOnIdAPIEndPoint","deleteAllNotifications","deleteAllNotificationsAPIEndPoint","apiDeleteMethod","deleteSingleNotificationOnId","deleteOneNotificationOnIdAPIEndPoint","deleteNotificationID","subScribedMessages","AccoutLoginSuccess","AlertMessage","RestAPIResponceMessage","receive","bind","attachBuildingBlock","from","message","debugLog","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","notifications","meta","notificationsList","pagination","next_page","current_page","isDeleteNotificationCheck","window","notify","type"],"mappings":"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","sourcesContent":["//@ts-nocheck;\nimport React from 'react';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\n//@ts-ignore\nimport moment from 'moment';\nexport const configJSON = require('./config');\n\nexport interface Props {\n    total: any;\n};\n\ninterface S {\n    loader?: boolean;\n    notificationsList?: Array<any>;\n    activeTab?: any;\n    isDeleteNotificationCheck?: boolean;\n    deleteNotificationID?: any;\n    isShowLoadMore?: boolean;\n    currentPage?: number;\n};\n\ninterface SS {\n\n};\n\nexport default class NotificationController extends BlockComponent<Props, S, SS>{\n    getAllNotificationsAPICallId: string;\n    readAllNotificationsAPICallId: string;\n    readSingleNotificationOnIDAPICallID: string;\n    deleteAllNotificationAPICallID: string;\n    deleteSingleNotificationOnIDAPICallID: string;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n\n        };\n        this.subScribedMessages = [\n            getName(MessageEnum.AccoutLoginSuccess),\n            getName(MessageEnum.AlertMessage),\n            getName(MessageEnum.RestAPIResponceMessage),\n        ];\n        this.receive = this.receive.bind(this);\n        runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n    }\n\n    async receive(from: string, message: Message) {\n        runEngine.debugLog('----Message DebugLog------', message);\n        if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n            const apiRequestCallId = message.getData(\n                getName(MessageEnum.RestAPIResponceDataMessage)\n            );\n            var responseJson = message.getData(\n                getName(MessageEnum.RestAPIResponceSuccessMessage)\n            );\n            var errorReponse = message.getData(\n                getName(MessageEnum.RestAPIResponceErrorMessage)\n            );\n            if (this.getAllNotificationsAPICallId === apiRequestCallId) {\n                if (responseJson && responseJson.data) {\n                    const { notifications } = responseJson.data;\n                    const { data, meta } = responseJson;\n                    // let totalData: any = [];\n                    // //@ts-ignore\n                    // if (this.state?.notificationsList?.length > 0) {\n                    //     //@ts-ignore\n                    //     totalData = this.state?.notificationsList?.splice();\n                    //     totalData.push(notifications?.data);\n                    // } else {\n                    //     totalData.push(notifications?.data);\n                    // }\n                    this.setState({\n                        loader: false,\n                        //@ts-ignore\n                        notificationsList: this.state.isShowLoadMore ? [...this.state?.notificationsList, ...notifications?.data] : notifications?.data,\n                        // notificationsList: totalData,\n                        isShowLoadMore: meta?.pagination?.next_page,\n                        currentPage: meta?.pagination?.current_page\n                    });\n                }\n            }\n            if (this.readAllNotificationsAPICallId === apiRequestCallId) {\n                if (responseJson) {\n                    this.setState({\n                        loader: false\n                    });\n                    this.getAllNotificationsList();\n                }\n            }\n            if (this.readSingleNotificationOnIDAPICallID === apiRequestCallId) {\n                if (responseJson) {\n                    this.setState({\n                        loader: false\n                    });\n                    this.getAllNotificationsList();\n                }\n            }\n            if (this.deleteSingleNotificationOnIDAPICallID === apiRequestCallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        loader: false,\n                        deleteNotificationID: '',\n                        isDeleteNotificationCheck: false\n                    });\n                    //@ts-ignore\n                    window.notify([{ type: 'success', message: responseJson?.data?.message || 'Something went Wrong!!!' }])\n                    this.getAllNotificationsList();\n                }\n            }\n            if (this.deleteAllNotificationAPICallID === apiRequestCallId) {\n                if (responseJson) {\n                    this.setState({\n                        loader: false\n                    })\n                    //@ts-ignore\n                    window.notify([{ type: 'success', message: responseJson.message }]);\n                    this.getAllNotificationsList();\n                }\n            }\n        }\n        else {\n\n        }\n    };\n\n    //\n    getDays = (data: any) => {\n        let date = moment(data);\n        if (moment().diff(date, 'days') >= 1) {\n            return date.fromNow(); // '2 days ago' etc.\n        }\n        return date.calendar().split(' ')[0]; // 'Today', 'yesterday', 'tomorrow'\n    }\n\n    //Get All Notifications API\n    getAllNotificationsList = () => {\n        this.setState({\n            loader: true\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.getAllNotificationsAPICallId = requestMessage.messageId;\n\n        let pageNo = 1;\n        if (this.state.isShowLoadMore) {\n            //@ts-ignore\n            pageNo = this.state.currentPage + 1;\n            requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), `${configJSON.getAllNotificationsAPIEndPoint}?page=${pageNo}`);\n        }\n        else {\n            requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), `${configJSON.getAllNotificationsAPIEndPoint}`);\n        }\n        //`${configJSON.getAllNotificationsAPIEndPoint}?page=${pageNo}`\n        // requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), `${configJSON.getAllNotificationsAPIEndPoint}?page=${pageNo}`);\n        const headers = {\n            'Content-Type': 'application/json',\n            token: localStorage.getItem('token'),\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    //readAll Notifications API\n    readAllNotifications = () => {\n        this.setState({\n            loader: true,\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n\n        this.readAllNotificationsAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.readAllNotificationsAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token: localStorage.getItem('token'),\n        };\n        const requestBody = {\n            \"read_all\": true\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    //read single notification on Id\n    readSingleNotificationBasedOnId = (id: any) => {\n        this.setState({\n            loader: true,\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.readSingleNotificationOnIDAPICallID = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.readOneNotificationOnIdAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token: localStorage.getItem('token'),\n        };\n        const requestBody = {\n            \"read_all\": false,\n            \"notification_id\": id\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n\n    };\n\n    //deleteAll Notifications API\n    deleteAllNotifications = () => {\n        this.setState({\n            loader: true,\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.deleteAllNotificationAPICallID = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.deleteAllNotificationsAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token: localStorage.getItem('token'),\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiDeleteMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    //deleteSingle Notification on ID\n    deleteSingleNotificationOnId = () => {\n        this.setState({\n            loader: true,\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.deleteSingleNotificationOnIDAPICallID = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.deleteOneNotificationOnIdAPIEndPoint + '/' + this.state?.deleteNotificationID);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token: localStorage.getItem('token'),\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiDeleteMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n}"]},"metadata":{},"sourceType":"module"}