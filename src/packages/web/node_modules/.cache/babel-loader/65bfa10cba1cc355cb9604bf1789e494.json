{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// You can only update code inside the customizable area. Other changes will be detected during commit and your commit will be rejected.\nimport { BlockComponent } from '../../../framework/src/BlockComponent';\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from '../Messages/MessageEnum';\n\nvar NavigationBlock = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(NavigationBlock, _BlockComponent);\n\n  var _super = _createSuper(NavigationBlock);\n\n  function NavigationBlock() {\n    var _this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      navigation: null\n    };\n\n    _classCallCheck(this, NavigationBlock);\n\n    _this = _super.call(this, props);\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), [getName(MessageEnum.NavigationMessage), getName(MessageEnum.NavigationPropsMessage)]);\n    return _this;\n  }\n\n  _createClass(NavigationBlock, [{\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(from, message) {\n        var raiseMessage, self, screenTitle, props, _props$navigation, _props$navigation2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (message.id === getName(MessageEnum.NavigationMessage)) {\n                  // debugger;\n                  raiseMessage = message.getData(getName(MessageEnum.NavigationRaiseMessage));\n\n                  if (raiseMessage !== undefined) {\n                    self = this;\n                    setTimeout(function () {\n                      self.send(raiseMessage);\n                    }, 0);\n                  }\n\n                  screenTitle = message.getData(getName(MessageEnum.NavigationScreenNameMessage));\n                  props = message.getData(getName(MessageEnum.NavigationPropsMessage));\n\n                  if (props !== undefined && props.navigation !== undefined) {\n                    props === null || props === void 0 ? void 0 : (_props$navigation = props.navigation) === null || _props$navigation === void 0 ? void 0 : _props$navigation.set;\n                    props === null || props === void 0 ? void 0 : (_props$navigation2 = props.navigation) === null || _props$navigation2 === void 0 ? void 0 : _props$navigation2.navigate(message.getData(getName(MessageEnum.NavigationTargetMessage)), {\n                      navigationBarTitleText: screenTitle\n                    });\n                  }\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return NavigationBlock;\n}(BlockComponent);\n\nexport default NavigationBlock;","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/framework/src/Blocks/NavigationBlock.tsx"],"names":["BlockComponent","runEngine","MessageEnum","getName","NavigationBlock","props","navigation","receive","bind","attachBuildingBlock","NavigationMessage","NavigationPropsMessage","from","message","id","raiseMessage","getData","NavigationRaiseMessage","undefined","self","setTimeout","send","screenTitle","NavigationScreenNameMessage","set","navigate","NavigationTargetMessage","navigationBarTitleText"],"mappings":";;;;;;;AAAA;AAEA,SAASA,cAAT,QAA+B,uCAA/B;AAEA,SAASC,SAAT,QAA0B,kCAA1B;AAEA,OAAOC,WAAP,IAAsBC,OAAtB,QAAqC,yBAArC;;IAMMC,e;;;;;AACJ,6BAAiD;AAAA;;AAAA,QAArCC,KAAqC,uEAAtB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAsB;;AAAA;;AAC/C,8BAAMD,KAAN;AACA,UAAKE,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf;AACAP,IAAAA,SAAS,CAACQ,mBAAV,gCAA8C,CAC5CN,OAAO,CAACD,WAAW,CAACQ,iBAAb,CADqC,EAE5CP,OAAO,CAACD,WAAW,CAACS,sBAAb,CAFqC,CAA9C;AAH+C;AAOhD;;;;;8EAED,iBAAcC,IAAd,EAA4BC,OAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEE,oBAAIA,OAAO,CAACC,EAAR,KAAeX,OAAO,CAACD,WAAW,CAACQ,iBAAb,CAA1B,EAA2D;AACzD;AACMK,kBAAAA,YAFmD,GAE3BF,OAAO,CAACG,OAAR,CAC5Bb,OAAO,CAACD,WAAW,CAACe,sBAAb,CADqB,CAF2B;;AAKzD,sBAAIF,YAAY,KAAKG,SAArB,EAAgC;AACxBC,oBAAAA,IADwB,GACjB,IADiB;AAE9BC,oBAAAA,UAAU,CAAC,YAAW;AACpBD,sBAAAA,IAAI,CAACE,IAAL,CAAUN,YAAV;AACD,qBAFS,EAEP,CAFO,CAAV;AAGD;;AACKO,kBAAAA,WAXmD,GAWrCT,OAAO,CAACG,OAAR,CAClBb,OAAO,CAACD,WAAW,CAACqB,2BAAb,CADW,CAXqC;AAcnDlB,kBAAAA,KAdmD,GAc3CQ,OAAO,CAACG,OAAR,CACZb,OAAO,CAACD,WAAW,CAACS,sBAAb,CADK,CAd2C;;AAiBzD,sBAAIN,KAAK,KAAKa,SAAV,IAAuBb,KAAK,CAACC,UAAN,KAAqBY,SAAhD,EAA2D;AACzDb,oBAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,iCAAAA,KAAK,CAAEC,UAAP,wEAAmBkB,GAAnB;AACAnB,oBAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,kCAAAA,KAAK,CAAEC,UAAP,0EAAmBmB,QAAnB,CACEZ,OAAO,CAACG,OAAR,CAAgBb,OAAO,CAACD,WAAW,CAACwB,uBAAb,CAAvB,CADF,EAEE;AAAEC,sBAAAA,sBAAsB,EAAEL;AAA1B,qBAFF;AAID;AACF;;AA1BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EAV4BtB,c;;AAwC9B,eAAeI,eAAf","sourcesContent":["// You can only update code inside the customizable area. Other changes will be detected during commit and your commit will be rejected.\n\nimport { BlockComponent } from '../../../framework/src/BlockComponent';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport { Message } from \"../../../framework/src/Message\";\nimport MessageEnum, { getName } from '../Messages/MessageEnum';\n\ninterface Props {}\ninterface S {}\ninterface SS {}\n\nclass NavigationBlock extends BlockComponent<Props, S, SS> {\n  constructor(props: Props = { navigation: null }) {\n    super(props);\n    this.receive = this.receive.bind(this);\n    runEngine.attachBuildingBlock(this as IBlock, [\n      getName(MessageEnum.NavigationMessage),\n      getName(MessageEnum.NavigationPropsMessage)\n    ]);\n  }\n\n  async receive(from: string, message: Message) {\n\n    if (message.id === getName(MessageEnum.NavigationMessage)) {\n      // debugger;\n      const raiseMessage: Message = message.getData(\n        getName(MessageEnum.NavigationRaiseMessage)\n      );\n      if (raiseMessage !== undefined) {\n        const self = this;\n        setTimeout(function() {\n          self.send(raiseMessage);\n        }, 0);\n      }\n      const screenTitle = message.getData(\n        getName(MessageEnum.NavigationScreenNameMessage)\n      );\n      const props = message.getData(\n        getName(MessageEnum.NavigationPropsMessage)\n      );\n      if (props !== undefined && props.navigation !== undefined) {\n        props?.navigation?.set;\n        props?.navigation?.navigate(\n          message.getData(getName(MessageEnum.NavigationTargetMessage)),\n          { navigationBarTitleText: screenTitle }\n        );\n      }\n    }\n  }\n}\n\nexport default NavigationBlock;\n"]},"metadata":{},"sourceType":"module"}