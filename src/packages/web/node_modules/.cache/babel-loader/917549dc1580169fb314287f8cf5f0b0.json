{"ast":null,"code":"//@ts-nocheck;\nimport * as yup from 'yup';\n/** validations for EditProfileForm Start */\n// export function EditProfile() {\n//     const editFormValidations = validations();\n//     return yup.object().shape({\n//         name: editFormValidations.name.required('Name is Required'),\n//         email: editFormValidations.email.required('Email is Required'),\n//         phone: editFormValidations.phone.required('Phone Number is Required')\n//     });\n// };\n\n/** validations for EditProfileForm End */\n\n/**************************** Common Validations Start ***************************/\n\nexport default function validations() {\n  return {\n    email: yup.string().email('Email Format is Incorrect').required('Email is Required'),\n    password: yup.string().min(8, 'Minimum Password length is 8').max(16, 'Maximum Password length is 16').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, 'Password must contain atleast a Capital Letter, a Lowercase Letter, a Number and a Special Character').required('Password is Required'),\n    confirmpassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match').required('Password is Required'),\n    currentpassword: yup.string().required('Password is Required'),\n    mobile: yup.number().typeError('Only numbers are allowed.').positive('Negative numbers are not allowed').integer(\"Number can't contain a decimal\").min(1000000000, 'Minimum 10 digits are Required').max(9999999999, 'Maximum 10 digits are allowed.').required('Mobile number is Required'),\n    otp: yup.number().typeError('Only numbers are allowed').positive('Negative numbers are not allowed').integer(\"Number can't contain a decimal\").min(100000, 'Minimum 6 digits are required').max(999999, 'Maximum 6 digits are allowed').required('OTP is Required'),\n    accountNumber: yup.number().typeError('Only numbers are allowed').positive('Negative numbers are not allowed.').integer(\"Account Number can't contain a decimal\").min(100000, 'Minimum 6 digits are required').max(999999999999, 'Maximum 12 digits are allowed').required('Account number is Required'),\n    name: yup.string().min(3, 'Minimum 3 characters are required').max(20, 'Maximum 20 characters are allowed.').matches(/^[a-zA-Z ]+$/, 'Only letters are allowed'),\n    // .required('Name is Required'),\n    houseNumber: yup.string(),\n    address: yup.string().matches(/^[A-Za-z0-9 ]+$/, 'Special characters are not allow'),\n    city: yup.string(),\n    state: yup.string(),\n    country: yup.string(),\n    pincode: yup.number().typeError('Only numbers are allowed.').positive('Negative numbers are not allowed.').integer(\"Pincode can't contain a decimal\").min(100000, 'Minimum 6 digits are required').max(999999, 'Maximum 6 digits are allowed'),\n    phone: yup.number().transform(function (value) {\n      return isNaN(value) ? undefined : value;\n    }).typeError('Only numbers are allowed').positive('Negative numbers are not allowed.').integer(\"Phone can't contain a decimal\").min(1000000000, 'Minimum 10 digits are required').max(9999999999, 'Maximum 10 digits are allowed'),\n    description: yup.string().typeError('Message is required.').test('len', 'Minimum 30 characters are required', function (val) {\n      return (val === null || val === void 0 ? void 0 : val.length) > 29;\n    }),\n    subject: yup.string(),\n    comment: yup.string().typeError('Comment is Required.'),\n    rating: yup.number().required('Rating is Required')\n  };\n}\n/** Common Validations End */","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/components/src/Validations/ValidationSchema.js"],"names":["yup","validations","email","string","required","password","min","max","matches","confirmpassword","oneOf","ref","currentpassword","mobile","number","typeError","positive","integer","otp","accountNumber","name","houseNumber","address","city","state","country","pincode","phone","transform","value","isNaN","undefined","description","test","val","length","subject","comment","rating"],"mappings":"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","sourcesContent":["//@ts-nocheck;\nimport * as yup from 'yup';\n\n/** validations for EditProfileForm Start */\n// export function EditProfile() {\n//     const editFormValidations = validations();\n//     return yup.object().shape({\n//         name: editFormValidations.name.required('Name is Required'),\n//         email: editFormValidations.email.required('Email is Required'),\n//         phone: editFormValidations.phone.required('Phone Number is Required')\n//     });\n// };\n/** validations for EditProfileForm End */\n\n/**************************** Common Validations Start ***************************/\nexport default function validations() {\n  return {\n    email: yup\n      .string()\n      .email('Email Format is Incorrect')\n      .required('Email is Required'),\n    password: yup\n      .string()\n      .min(8, 'Minimum Password length is 8')\n      .max(16, 'Maximum Password length is 16')\n      .matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n        'Password must contain atleast a Capital Letter, a Lowercase Letter, a Number and a Special Character'\n      )\n      .required('Password is Required'),\n    confirmpassword: yup\n      .string()\n      .oneOf([yup.ref('password'), null], 'Passwords must match')\n      .required('Password is Required'),\n    currentpassword: yup.string().required('Password is Required'),\n    mobile: yup\n      .number()\n      .typeError('Only numbers are allowed.')\n      .positive('Negative numbers are not allowed')\n      .integer(\"Number can't contain a decimal\")\n      .min(1000000000, 'Minimum 10 digits are Required')\n      .max(9999999999, 'Maximum 10 digits are allowed.')\n      .required('Mobile number is Required'),\n    otp: yup\n      .number()\n      .typeError('Only numbers are allowed')\n      .positive('Negative numbers are not allowed')\n      .integer(\"Number can't contain a decimal\")\n      .min(100000, 'Minimum 6 digits are required')\n      .max(999999, 'Maximum 6 digits are allowed')\n      .required('OTP is Required'),\n    accountNumber: yup\n      .number()\n      .typeError('Only numbers are allowed')\n      .positive('Negative numbers are not allowed.')\n      .integer(\"Account Number can't contain a decimal\")\n      .min(100000, 'Minimum 6 digits are required')\n      .max(999999999999, 'Maximum 12 digits are allowed')\n      .required('Account number is Required'),\n    name: yup\n      .string()\n      .min(3, 'Minimum 3 characters are required')\n      .max(20, 'Maximum 20 characters are allowed.')\n      .matches(/^[a-zA-Z ]+$/, 'Only letters are allowed'),\n    // .required('Name is Required'),\n    houseNumber: yup.string(),\n    address: yup\n      .string()\n      .matches(/^[A-Za-z0-9 ]+$/, 'Special characters are not allow'),\n    city: yup.string(),\n    state: yup.string(),\n    country: yup.string(),\n    pincode: yup\n      .number()\n      .typeError('Only numbers are allowed.')\n      .positive('Negative numbers are not allowed.')\n      .integer(\"Pincode can't contain a decimal\")\n      .min(100000, 'Minimum 6 digits are required')\n      .max(999999, 'Maximum 6 digits are allowed'),\n    phone: yup\n      .number()\n      .transform((value) => (isNaN(value) ? undefined : value))\n      .typeError('Only numbers are allowed')\n      .positive('Negative numbers are not allowed.')\n      .integer(\"Phone can't contain a decimal\")\n      .min(1000000000, 'Minimum 10 digits are required')\n      .max(9999999999, 'Maximum 10 digits are allowed'),\n    description: yup\n      .string()\n      .typeError('Message is required.')\n      .test(\n        'len',\n        'Minimum 30 characters are required',\n        (val) => val?.length > 29\n      ),\n    subject: yup.string(),\n    comment: yup.string().typeError('Comment is Required.'),\n    rating: yup.number().required('Rating is Required'),\n  };\n}\n/** Common Validations End */\n"]},"metadata":{},"sourceType":"module"}