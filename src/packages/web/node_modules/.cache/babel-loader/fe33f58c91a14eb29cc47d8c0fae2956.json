{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck;\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nexport var configJSON = require('./config');\n;\n;\n;\n\nvar AddressController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(AddressController, _BlockComponent);\n\n  var _super = _createSuper(AddressController);\n\n  function AddressController(props) {\n    var _this;\n\n    _classCallCheck(this, AddressController);\n\n    _this = _super.call(this, props);\n    _this.addNewAddressAPICallId = void 0;\n    _this.getUserDeliveryAddressAPICallId = void 0;\n    _this.updateDeliveryAddressByIdAPICallId = void 0;\n    _this.deleteDeliveryAddressByIdAPICallId = void 0;\n    _this.changeDefaultAddressAPICallId = void 0;\n\n    _this.addNewAddressHandler = function (values) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true,\n        showSpinner: true\n      }));\n\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      var addressData = values.addressLine1;\n      addressData = addressData + values.addressLine2;\n      var checkingExistedData = _this.state.userAddress && _this.state.userAddress.length > 0 ? false : true;\n      var requestBody = {\n        \"address\": {\n          \"name\": values.name,\n          \"flat_no\": values.doorNo,\n          \"address\": values.addressLine1,\n          \"address_line_2\": values.addressLine2,\n          \"city\": values.city,\n          \"state\": values.state,\n          \"country\": values.country,\n          \"zip_code\": values.pinCode,\n          \"phone_number\": values.phone,\n          \"is_default\": checkingExistedData\n        }\n      };\n      _this.addNewAddressAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.createNewAddressAPIEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.updateAddressBasedonId = function (values, id) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true,\n        showSpinner: true\n      }));\n\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.updateDeliveryAddressByIdAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.editUserDeliveryAddressByIdAPIEndPoint + \"/\" + id);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      var addressData = values.addressLine1;\n      debugger;\n      addressData = addressData + values.addressLine2;\n      var requestBody = {\n        \"address\": {\n          \"name\": values.name,\n          \"flat_no\": values.doorNo,\n          \"address\": values.addressLine1,\n          \"address_line_2\": values.addressLine2,\n          \"city\": values.city,\n          \"state\": values.state,\n          \"country\": values.country,\n          \"zip_code\": values.pinCode,\n          \"phone_number\": values.phone,\n          \"is_default\": _this.state.defaultAddressID == id ? true : false\n        }\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.getDeliveryAddressList = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true\n      }));\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var token = localStorage.getItem(\"token\");\n      _this.getUserDeliveryAddressAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getUserDeliveryAddressAPIEndPoint);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.deleteAddressBasedOnId = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loading: true\n      }));\n\n      var token = localStorage.getItem(\"token\");\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.deleteDeliveryAddressByIdAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.deleteUserDeliveryAddressByIdAPIEndPoint + \"/\" + _this.state.deleteAddressId);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiDeleteMethod);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.handleDefaultAddress = function (id) {\n      _this.setState({\n        // ...this.state,\n        loading: true,\n        defaultAddressID: id\n      });\n\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      var token = localStorage.getItem(\"token\");\n      _this.changeDefaultAddressAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.changeDefaultAddressByIDAPIEndpoint + '/' + id);\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      var requestBody = {\n        \"address\": {\n          \"is_default\": true\n        }\n      };\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.subScribedMessages = [getName(MessageEnum.AccoutLoginSuccess), getName(MessageEnum.AlertMessage), getName(MessageEnum.RestAPIResponceMessage)];\n    _this.state = {};\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this));\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  }\n\n  _createClass(AddressController, [{\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(from, message) {\n        var apiRequestCallId, responseJson, errorReponse, title, AlertBodyMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runEngine.debugLog('Message Received', message);\n\n                if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.addNewAddressAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        loading: false,\n                        userAddedAddressDeatails: responseJson.data,\n                        addingNewAddressCheck: false,\n                        showSpinner: false\n                      })); // @ts-ignore\n\n                      window.notify([{\n                        message: 'Address Added Successfully !' || \"Something went wrong!!!\",\n                        type: \"success\"\n                      }]);\n                      this.getDeliveryAddressList();\n                    }\n                  } else if (apiRequestCallId === this.getUserDeliveryAddressAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        loading: false,\n                        userAddress: responseJson.data,\n                        defaultAddressCheck: responseJson.data.attributes && responseJson.data.attributes.is_default,\n                        deliveryAddressID: responseJson.data.atrributes && responseJson.data.attributes.id\n                      }));\n                    } else {\n                      this.parseApiErrorResponse(responseJson);\n                    }\n                  } else if (apiRequestCallId === this.deleteDeliveryAddressByIdAPICallId) {\n                    if (responseJson) {\n                      this.setState({\n                        loading: false,\n                        isDeleteAddressCheck: false\n                      }); // @ts-ignore\n\n                      window.notify([{\n                        message: responseJson.message || \"Something went wrong!!!\",\n                        type: \"success\"\n                      }]);\n                      this.getDeliveryAddressList();\n                    }\n                  } else if (apiRequestCallId === this.updateDeliveryAddressByIdAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n                        loading: false,\n                        editAddressChecked: false,\n                        showSpinner: false\n                      })); // @ts-ignore\n\n                      window.notify([{\n                        message: 'Address Updated Successfully !' || \"Something went wrong!!!\",\n                        type: \"success\"\n                      }]);\n                      this.getDeliveryAddressList();\n                    }\n                  } else if (apiRequestCallId === this.changeDefaultAddressAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        loading: false,\n                        defaultAddressID: responseJson.data.id\n                      }); // @ts-ignore\n\n                      window.notify([{\n                        message: 'Address Updated Successfully !' || \"Something went wrong!!!\",\n                        type: \"success\"\n                      }]);\n                      this.getDeliveryAddressList();\n                    }\n                  }\n                } else if (getName(MessageEnum.AlertMessage) === message.id) {\n                  title = message.getData(getName(MessageEnum.AlertTitleMessage));\n                  AlertBodyMessage = message.getData(getName(MessageEnum.AlertBodyMessage));\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function receive(_x, _x2) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return AddressController;\n}(BlockComponent);\n\nexport { AddressController as default };\n;","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/profilebio/src/AddressController.web.tsx"],"names":["Message","BlockComponent","runEngine","MessageEnum","getName","configJSON","require","AddressController","props","addNewAddressAPICallId","getUserDeliveryAddressAPICallId","updateDeliveryAddressByIdAPICallId","deleteDeliveryAddressByIdAPICallId","changeDefaultAddressAPICallId","addNewAddressHandler","values","setState","state","loading","showSpinner","token","localStorage","getItem","requestMessage","RestAPIRequestMessage","headers","addressData","addressLine1","addressLine2","checkingExistedData","userAddress","length","requestBody","name","doorNo","city","country","pinCode","phone","messageId","addData","RestAPIResponceEndPointMessage","createNewAddressAPIEndPoint","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIRequestBodyMessage","RestAPIRequestMethodMessage","apiPostMethod","sendMessage","id","updateAddressBasedonId","editUserDeliveryAddressByIdAPIEndPoint","defaultAddressID","apiPutMethod","getDeliveryAddressList","getUserDeliveryAddressAPIEndPoint","apiGetMethod","deleteAddressBasedOnId","deleteUserDeliveryAddressByIdAPIEndPoint","deleteAddressId","apiDeleteMethod","handleDefaultAddress","changeDefaultAddressByIDAPIEndpoint","subScribedMessages","AccoutLoginSuccess","AlertMessage","RestAPIResponceMessage","receive","bind","attachBuildingBlock","from","message","debugLog","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","data","userAddedAddressDeatails","addingNewAddressCheck","window","notify","type","defaultAddressCheck","attributes","is_default","deliveryAddressID","atrributes","parseApiErrorResponse","isDeleteAddressCheck","editAddressChecked","title","AlertTitleMessage","AlertBodyMessage"],"mappings":"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","sourcesContent":["//@ts-nocheck;\nimport React from 'react';\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { log } from 'console';\nexport const configJSON = require('./config');\n\n\nexport interface Props {\n    // Customizable Area Start\n    // Customizable Area End\n};\n\ninterface S {\n    activeTab?: any;\n    addingNewAddressCheck?: boolean;\n    isDeleteAddressCheck?: boolean;\n    addressIndex?: number;\n    editAddressChecked?: boolean;\n    userAddedAddressDeatails?: any;\n    userToken?: any;\n\n    //get all deliveryAddress list\n    userAddress?: Array<any>;\n\n    //edit /delete deliveryAddress data\n    deliveryAddressID?: number;\n    defaultAddressCheck?: boolean;\n    deleteAddressId?: number;\n    defaultAddressID?: number\n\n    //default address popup\n    isDefaultAddressChanged?: boolean;\n\n    loading?: boolean;\n    showSpinner?: boolean;\n\n    countryName?: string;\n};\n\ninterface SS {\n    id: any;\n};\n\n\n\nexport default class AddressController extends BlockComponent<Props, S, SS>{\n    addNewAddressAPICallId: string;\n    getUserDeliveryAddressAPICallId: string;\n    updateDeliveryAddressByIdAPICallId: string;\n    deleteDeliveryAddressByIdAPICallId: string;\n    changeDefaultAddressAPICallId: string;\n    constructor(props: Props) {\n        super(props);\n        this.subScribedMessages = [\n            getName(MessageEnum.AccoutLoginSuccess),\n            getName(MessageEnum.AlertMessage),\n            getName(MessageEnum.RestAPIResponceMessage),\n        ];\n        this.state = {\n        };\n        this.receive = this.receive.bind(this);\n        runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n    };\n    async receive(from: string, message: Message) {\n        runEngine.debugLog('Message Received', message);\n        if (message.id === getName(MessageEnum.RestAPIResponceMessage)) {\n            const apiRequestCallId = message.getData(\n                getName(MessageEnum.RestAPIResponceDataMessage)\n            );\n            var responseJson = message.getData(\n                getName(MessageEnum.RestAPIResponceSuccessMessage)\n            );\n            var errorReponse = message.getData(\n                getName(MessageEnum.RestAPIResponceErrorMessage)\n            );\n            if (apiRequestCallId === this.addNewAddressAPICallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        ...this.state,\n                        loading: false,\n                        userAddedAddressDeatails: responseJson.data,\n                        addingNewAddressCheck: false,\n                        showSpinner: false,\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: 'Address Added Successfully !' || \"Something went wrong!!!\", type: \"success\" }]);\n\n                    this.getDeliveryAddressList();\n                }\n            }\n            else if (apiRequestCallId === this.getUserDeliveryAddressAPICallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        ...this.state,\n                        loading: false,\n                        userAddress: responseJson.data,\n                        defaultAddressCheck: responseJson.data.attributes && responseJson.data.attributes.is_default,\n                        deliveryAddressID: responseJson.data.atrributes && responseJson.data.attributes.id\n                    });\n                } else {\n                    this.parseApiErrorResponse(responseJson);\n                }\n            }\n            else if (apiRequestCallId === this.deleteDeliveryAddressByIdAPICallId) {\n                if (responseJson) {\n                    this.setState({\n                        loading: false,\n                        isDeleteAddressCheck: false\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: responseJson.message || \"Something went wrong!!!\", type: \"success\" }]);\n\n                    this.getDeliveryAddressList();\n                }\n            }\n            else if (apiRequestCallId === this.updateDeliveryAddressByIdAPICallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        ...this.state,\n                        loading: false,\n                        editAddressChecked: false,\n                        showSpinner: false,\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: 'Address Updated Successfully !' || \"Something went wrong!!!\", type: \"success\" }]);\n\n                    this.getDeliveryAddressList();\n                }\n            }\n            else if (apiRequestCallId === this.changeDefaultAddressAPICallId) {\n                if (responseJson && responseJson.data) {\n                    this.setState({\n                        loading: false,\n                        defaultAddressID: responseJson.data.id\n                    });\n                    // @ts-ignore\n                    window.notify([{ message: 'Address Updated Successfully !' || \"Something went wrong!!!\", type: \"success\" }]);\n\n                    this.getDeliveryAddressList();\n                }\n            }\n        }\n        else if (getName(MessageEnum.AlertMessage) === message.id) {\n            const title = message.getData(\n                getName(MessageEnum.AlertTitleMessage)\n            );\n            let AlertBodyMessage = message.getData(\n                getName(MessageEnum.AlertBodyMessage)\n            );\n\n        }\n    };\n    //add a new address\n    addNewAddressHandler = (values: any) => {\n        this.setState({\n            ...this.state,\n            loading: true,\n            showSpinner: true\n        });\n        const token = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n        let addressData = values.addressLine1;\n        addressData = addressData + values.addressLine2;\n        const checkingExistedData = this.state.userAddress && this.state.userAddress.length > 0 ? false : true;\n        let requestBody = {\n            \"address\": {\n                \"name\": values.name,\n                \"flat_no\": values.doorNo,\n                \"address\": values.addressLine1,\n                \"address_line_2\": values.addressLine2,\n                \"city\": values.city,\n                \"state\": values.state,\n                \"country\": values.country,\n                \"zip_code\": values.pinCode,\n                \"phone_number\": values.phone,\n                \"is_default\": checkingExistedData\n            }\n        }\n\n        this.addNewAddressAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.createNewAddressAPIEndPoint);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPostMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    }\n    //update a address based on Id\n    updateAddressBasedonId = (values: any, id: any) => {\n        this.setState({\n            ...this.state,\n            loading: true,\n            showSpinner: true\n        });\n        const token = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.updateDeliveryAddressByIdAPICallId = requestMessage.messageId;\n\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.editUserDeliveryAddressByIdAPIEndPoint + \"/\" + id);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n\n        let addressData = values.addressLine1;\n        debugger;\n        addressData = addressData + values.addressLine2;\n        const requestBody = {\n            \"address\": {\n                \"name\": values.name,\n                \"flat_no\": values.doorNo,\n                \"address\": values.addressLine1,\n                \"address_line_2\": values.addressLine2,\n                \"city\": values.city,\n                \"state\": values.state,\n                \"country\": values.country,\n                \"zip_code\": values.pinCode,\n                \"phone_number\": values.phone,\n                \"is_default\": this.state.defaultAddressID == id ? true : false\n            }\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    //get a delivery address by user Id\n    getDeliveryAddressList = () => {\n        this.setState({\n            ...this.state,\n            loading: true\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const token = localStorage.getItem(\"token\");\n\n        this.getUserDeliveryAddressAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.getUserDeliveryAddressAPIEndPoint);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiGetMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    //delete a address based on Id\n    deleteAddressBasedOnId = () => {\n        this.setState({\n            ...this.state,\n            loading: true,\n        });\n        const token = localStorage.getItem(\"token\");\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        this.deleteDeliveryAddressByIdAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.deleteUserDeliveryAddressByIdAPIEndPoint + \"/\" + this.state.deleteAddressId);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiDeleteMethod);\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n    //handling address as default\n    handleDefaultAddress = (id: any) => {\n        this.setState({\n            // ...this.state,\n            loading: true,\n            defaultAddressID: id\n        });\n        const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n        const token = localStorage.getItem(\"token\");\n\n        this.changeDefaultAddressAPICallId = requestMessage.messageId;\n        requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.changeDefaultAddressByIDAPIEndpoint + '/' + id);\n\n        const headers = {\n            'Content-Type': 'application/json',\n            token\n        };\n        const requestBody = {\n            \"address\":\n            {\n                \"is_default\": true\n            }\n        };\n\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), headers);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiPutMethod);\n        requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(requestBody));\n\n        runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n};"]},"metadata":{},"sourceType":"module"}