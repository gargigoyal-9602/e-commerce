{"ast":null,"code":"import _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/otp-input-confirmation/src/OTPConfirmAccount.web.tsx\";\n//@ts-nocheck\nimport React from 'react';\nimport { Button, FormGroup } from 'reactstrap';\nimport { RiArrowLeftSLine } from 'react-icons/ri';\nimport { Formik, Form, Field } from 'formik';\nimport { withRouter } from 'react-router-dom';\nimport { CgSpinner } from 'react-icons/cg';\nimport * as Yup from 'yup'; // @ts-ignore\n\nimport content from \"../../../components/src/content\";\nimport './css/index.css';\nimport './css/indexConfrimAccount.css';\nimport OTPConfirmationController from './OTPConfirmationController.web'; //@ts-ignore\n\n// validations start\nvar otpValidation = Yup.object().shape({\n  otp: Yup.number().typeError('Only numbers are allowed').positive('Negative numbers are not allowed.').integer(\"Number can't contain a decimal.\").min(10000, 'Minimum 5 digits are required.').max(99999, 'Maximum 5 digits are allowed.').required('OTP is required.')\n}); //validations end\n\nvar OTPConfrimAccount = /*#__PURE__*/function (_OTPConfirmationContr) {\n  _inherits(OTPConfrimAccount, _OTPConfirmationContr);\n\n  var _super = _createSuper(OTPConfrimAccount);\n\n  function OTPConfrimAccount(props) {\n    _classCallCheck(this, OTPConfrimAccount);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(OTPConfrimAccount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startTimer();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"yt-fp-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-flex navigate\",\n        onClick: function onClick() {\n          var _this$props, _this$props$history;\n\n          //@ts-ignore\n          (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : (_this$props$history = _this$props.history) === null || _this$props$history === void 0 ? void 0 : _this$props$history.push({\n            pathname: localStorage.getItem('token') ? '/' : '/'\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(RiArrowLeftSLine, {\n        className: \"mr-2 yt-fp-back-icn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"yt-fp-top-back-tag-name\",\n        style: {\n          lineHeight: 1.11,\n          fontFamily: 'GTWalsheimPro-Bold',\n          color: '#324688',\n          fontSize: '18px',\n          fontWeight: 'bold',\n          position: 'relative',\n          top: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }, content.otpVerification)), /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"yt-fp-tag-line\",\n        style: {\n          fontFamily: 'GTWalsheimPro-Regular-',\n          color: '#3e454f',\n          fontSize: '16px',\n          lineHeight: 1.13\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, content.getStarted), /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"yt-fp-tag-line-2\",\n        style: {\n          fontFamily: 'GTWalsheimPro-Regular-',\n          fontSize: '16px',\n          color: '#8b8f95',\n          lineHeight: 1.13\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, content.otpHasBeenSent), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"yt-fp-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Formik, {\n        initialValues: {\n          otp: ''\n        },\n        onSubmit: function onSubmit(values) {\n          return _this.sendEmailOTP(values);\n        },\n        validationSchema: otpValidation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }, function (props) {\n        var values = props.values,\n            touched = props.touched,\n            errors = props.errors,\n            handleSubmit = props.handleSubmit,\n            handleBlur = props.handleBlur,\n            handleChange = props.handleChange;\n        return /*#__PURE__*/React.createElement(Form, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          className: \"\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: require('./images/emal-icn.png'),\n          alt: \"email icon\",\n          className: ' yt-login-icn2',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(Field, {\n          value: JSON.parse(localStorage.getItem('signUpUser')).Email,\n          className: 'form-control',\n          disabled: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 41\n          }\n        })), /*#__PURE__*/React.createElement(FormGroup, {\n          className: \"\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          alt: \"Email Icon\",\n          src: require('./images/key-icn.png'),\n          className: errors.otp && touched.otp ? ' yt-login-icn2' : 'yt-login-icn',\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(Field, {\n          name: \"otp\",\n          type: \"text\",\n          placeholder: \"Enter OTP\",\n          value: values.otp,\n          className: 'form-control' + (errors.otp && touched.otp ? ' is-invalid' : ''),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 41\n          }\n        }), touched.otp && errors.otp && /*#__PURE__*/React.createElement(\"span\", {\n          className: \"invalid-feedback\",\n          style: {\n            position: 'absolute'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 49\n          }\n        }, errors.otp)), _this.state.showSpinner ? /*#__PURE__*/React.createElement(CgSpinner, {\n          style: {\n            color: 'black',\n            fontSize: 32,\n            width: '100%',\n            margin: 10\n          },\n          class: \"w3-spin\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 45\n          }\n        }) : /*#__PURE__*/React.createElement(Button, {\n          type: \"submit\",\n          color: \"secondary yt-login-btn mt-1\",\n          block: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 45\n          }\n        }, content.verifyOTP), /*#__PURE__*/React.createElement(React.Fragment, null, !_this.state.otpToken && /*#__PURE__*/React.createElement(\"div\", {\n          className: \"yt-forpass-bottom-info text-center mt-20\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 53\n          }\n        }, _this.state.timer > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"otp-timer\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 65\n          }\n        }, \"00:\", _this.state.timer) : /*#__PURE__*/React.createElement(Button, {\n          color: \"link yt-resent-otp-btn\",\n          onClick: _this.resendOTP,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 65\n          }\n        }, content.resendOTP)))));\n      })));\n    }\n  }]);\n\n  return OTPConfrimAccount;\n}(OTPConfirmationController);\n\n;\nexport default withRouter(OTPConfrimAccount);","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/otp-input-confirmation/src/OTPConfirmAccount.web.tsx"],"names":["React","Button","FormGroup","RiArrowLeftSLine","Formik","Form","Field","withRouter","CgSpinner","Yup","content","OTPConfirmationController","otpValidation","object","shape","otp","number","typeError","positive","integer","min","max","required","OTPConfrimAccount","props","startTimer","history","push","pathname","localStorage","getItem","lineHeight","fontFamily","color","fontSize","fontWeight","position","top","otpVerification","getStarted","otpHasBeenSent","values","sendEmailOTP","touched","errors","handleSubmit","handleBlur","handleChange","require","JSON","parse","Email","state","showSpinner","width","margin","verifyOTP","otpToken","timer","resendOTP"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport React from 'react';\nimport { Button, FormGroup } from 'reactstrap';\nimport { RiArrowLeftSLine } from 'react-icons/ri';\nimport { Formik, Form, Field } from 'formik';\nimport { withRouter } from 'react-router-dom';\nimport { CgSpinner } from 'react-icons/cg';\nimport * as Yup from 'yup';\n// @ts-ignore\nimport content from \"../../../components/src/content\";\n\nimport './css/index.css';\nimport './css/indexConfrimAccount.css';\nimport OTPConfirmationController, { Props } from './OTPConfirmationController.web';\n\n//@ts-ignore\nimport isEmpty from 'lodash/isEmpty';\n\n// validations start\nconst otpValidation = Yup.object().shape({\n    otp: Yup.number().typeError('Only numbers are allowed').positive('Negative numbers are not allowed.').integer(\"Number can't contain a decimal.\")\n        .min(10000, 'Minimum 5 digits are required.').max(99999, 'Maximum 5 digits are allowed.').required('OTP is required.'),\n});\n//validations end\n\n\nclass OTPConfrimAccount extends OTPConfirmationController {\n    constructor(props: Props) {\n        super(props);\n    };\n    componentDidMount() {\n        this.startTimer();\n    }\n    render() {\n        return (\n            <div className=\"yt-fp-wrap\">\n                <span className=\"d-flex navigate\"\n                    onClick={() => {\n                        //@ts-ignore\n                        this.props?.history?.push({ pathname: localStorage.getItem('token') ? '/' : '/' });\n                    }}>\n                    <RiArrowLeftSLine className=\"mr-2 yt-fp-back-icn\" />\n                    <h3 className=\"yt-fp-top-back-tag-name\"\n                        style={{ lineHeight: 1.11, fontFamily: 'GTWalsheimPro-Bold', color: '#324688', fontSize: '18px', fontWeight: 'bold', position: 'relative', top: 10 }}>\n                        {content.otpVerification}\n                    </h3>\n                </span>\n                <h2 className=\"yt-fp-tag-line\" style={{\n                    fontFamily: 'GTWalsheimPro-Regular-',\n                    color: '#3e454f',\n                    fontSize: '16px',\n                    lineHeight: 1.13\n                }}>\n                    {content.getStarted}\n                </h2>\n                <h2 className=\"yt-fp-tag-line-2\"\n                    style={{\n                        fontFamily: 'GTWalsheimPro-Regular-',\n                        fontSize: '16px',\n                        color: '#8b8f95',\n                        lineHeight: 1.13\n                    }}>\n                    {content.otpHasBeenSent}\n                </h2>\n                <div className=\"yt-fp-form\">\n                    <Formik\n                        initialValues={{\n                            otp: ''\n                        }}\n                        onSubmit={(values) => this.sendEmailOTP(values)}\n                        validationSchema={otpValidation}\n                    >\n                        {(props) => {\n                            const { values, touched, errors, handleSubmit, handleBlur, handleChange } = props;\n                            return (\n                                <Form>\n                                    <FormGroup className=\"\">\n                                        <img src={require('./images/emal-icn.png')} alt='email icon' className={' yt-login-icn2'}></img>\n                                        <Field\n                                            value={JSON.parse(localStorage.getItem('signUpUser')).Email}\n                                            className={'form-control'}\n                                            disabled\n                                        />\n                                    </FormGroup>\n                                    <FormGroup className=''>\n                                        <img\n                                            alt=\"Email Icon\"\n                                            src={require('./images/key-icn.png')}\n                                            className={errors.otp && touched.otp ? ' yt-login-icn2' : 'yt-login-icn'}\n                                        />\n                                        <Field\n                                            name=\"otp\"\n                                            type=\"text\"\n                                            placeholder=\"Enter OTP\"\n                                            value={values.otp}\n                                            className={'form-control' + (errors.otp && touched.otp ? ' is-invalid' : '')}\n                                        />\n                                        {touched.otp && errors.otp &&\n                                            (\n                                                <span className=\"invalid-feedback\" style={{ position: 'absolute' }}>\n                                                    {errors.otp}\n                                                </span>\n                                            )\n                                        }\n                                    </FormGroup>\n                                    { this.state.showSpinner ?\n                                        (\n                                            <CgSpinner\n                                                style={{\n                                                    color: 'black',\n                                                    fontSize: 32,\n                                                    width: '100%',\n                                                    margin: 10,\n                                                }}\n                                                class=\"w3-spin\"\n                                            />\n                                        ) : (\n\n                                            <Button type=\"submit\" color=\"secondary yt-login-btn mt-1\" block>\n                                                {content.verifyOTP}\n                                            </Button>\n                                        )\n                                    }\n                                    <>\n                                        {!this.state.otpToken &&\n                                            (\n                                                <div className=\"yt-forpass-bottom-info text-center mt-20\">\n                                                    <div>\n                                                        {this.state.timer > 0\n                                                            ?\n                                                            (\n                                                                <div className=\"otp-timer\">\n                                                                    00:{this.state.timer}</div>\n                                                            )\n                                                            :\n                                                            (\n                                                                <Button color=\"link yt-resent-otp-btn\" onClick={this.resendOTP}>\n                                                                    {content.resendOTP}\n                                                                </Button>\n                                                            )\n                                                        }\n\n                                                    </div>\n                                                </div>\n                                            )\n                                        }\n                                    </>\n                                </Form>\n                            )\n                        }}\n                    </Formik>\n                    {/* <Formik\n                        initialValues={{ otp: '' }}\n                        onSubmit={this.verifyOTP()}\n                        validationSchema={otpValidation}\n                    >\n                        {({ errors, touched, values, handleSubmit }) => {\n                            if (touched.otp && errors.otp) {\n                                errors.otp\n                            }\n                            return (\n                                <Form onSubmit={handleSubmit}>\n                                    <FormGroup className=\"\">\n                                        <img\n                                            alt=\"Email Icon\"\n                                            src={require('./images/key-icn.png')}\n                                            className={errors.otp && touched.otp ? ' yt-login-icn2' : 'yt-login-icn'}\n                                        />\n                                        <Field\n                                            name=\"otp\"\n                                            type=\"text\"\n                                            placeholder=\"OTP\"\n                                            value={values.otp}\n                                            className={'form-control' + (errors.otp && touched.otp ? ' is-invalid' : '')}\n                                        />\n                                        <span id=\"yt-signup-email-error\" className=\"yt-login-message-show\" />\n                                        {touched.otp && errors.otp &&\n                                            (\n                                                <span className=\"invalid-feedback\" style={{ position: 'absolute' }}>\n                                                    {errors.otp}\n                                                </span>\n                                            )\n                                        }\n                                        {\n                                            this.state.otpError && this.state.otpError ?\n                                                (\n                                                    <span className=\"err_invalid\" style={{ position: 'absolute' }}>\n                                                        {this.state.otpError}\n                                                    </span>\n                                                ) : (\n                                                    <></>\n                                                )\n                                        }\n                                    </FormGroup>\n                                    {this.state.showSpinner && this.state.showSpinner ?\n                                        (\n                                            <CgSpinner\n                                                style={{\n                                                    color: 'black',\n                                                    fontSize: 32,\n                                                    width: '100%',\n                                                    margin: 10,\n                                                }}\n                                                class=\"w3-spin\"\n                                            />\n                                        ) : (\n                                            <Button type=\"submit\" color=\"secondary yt-login-btn mt-1\" block>\n                                                Verify OTP\n                                            </Button>\n                                        )\n                                    }\n                                    <>\n                                        {!this.state.otpToken &&\n                                            (\n                                                <div className=\"yt-forpass-bottom-info text-center mt-20\">\n                                                    <div>\n                                                        {this.state.timer && this.state.timer > 0\n                                                            ?\n                                                            (\n                                                                <div className=\"otp-timer\">00:{this.state.timer}</div>\n                                                            )\n                                                            :\n                                                            (\n                                                                <Button color=\"link yt-resent-otp-btn\" onClick={this.resendOTP()}>\n                                                                    Resend OTP\n                                                                </Button>\n                                                            )\n                                                        }\n                                                    </div>\n                                                </div>\n                                            )\n                                        }\n                                    </>\n                                </Form>\n                            );\n                        }}\n                    </Formik> */}\n\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default withRouter(OTPConfrimAccount);"]},"metadata":{},"sourceType":"module"}