{"ast":null,"code":"import _regeneratorRuntime from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n//@ts-nocheck\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, { getName } from \"../../../framework/src/Messages/MessageEnum\";\nimport { CardNumberElement } from '@stripe/react-stripe-js';\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nexport var configJSON = require(\"./config\");\n\nvar StripeWebController = /*#__PURE__*/function (_BlockComponent) {\n  _inherits(StripeWebController, _BlockComponent);\n\n  var _super = _createSuper(StripeWebController);\n\n  function StripeWebController(props) {\n    var _this;\n\n    _classCallCheck(this, StripeWebController);\n\n    _this = _super.call(this, props);\n    _this.checkZipcodeId = void 0;\n    _this.checkAvailabilityId = void 0;\n    _this.releaseBlockId = void 0;\n    _this.placeOrderId = void 0;\n    _this.createOrderId = void 0;\n    _this.getUserProfileApiCallId = void 0;\n    _this.releaseBlockQuantityApiCallId = void 0;\n    _this.createStripeAPICallId = void 0;\n    _this.confrimStripeAPICallId = void 0;\n\n    _this.apiCall = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        var contentType, method, endPoint, body, token, header, requestMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentType = data.contentType, method = data.method, endPoint = data.endPoint, body = data.body;\n                token = localStorage.getItem(\"token\");\n                header = {\n                  \"Content-Type\": contentType,\n                  token: token\n                };\n                requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(header));\n                requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), endPoint);\n                requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), method);\n                body && requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(body));\n                runEngine.sendMessage(requestMessage.id, requestMessage);\n                return _context.abrupt(\"return\", requestMessage.messageId);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getCartHasProduct = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.setState({\n                isFetching: false\n              });\n\n              _context2.next = 3;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.cartHasProductAPIEndPoint\n              });\n\n            case 3:\n              _this.getCartProductId = _context2.sent;\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.getUserProfile = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.userProfileApiEndPoint\n              });\n\n            case 2:\n              _this.getUserProfileApiCallId = _context3.sent;\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    _this.getUserProfileSuccessCallBack = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(res) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.setState({\n                  profileData: res,\n                  isFetching: false\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.releaseBlockQuantity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.toggleIsOpen();\n\n              _context5.next = 3;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypePut,\n                endPoint: configJSON.cartListAPiEndPoint + \"/\" + _this.state.wholeCartData.id + \"/release_products\"\n              });\n\n            case 3:\n              _this.releaseBlockQuantityApiCallId = _context5.sent;\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    _this.releaseBlockQuantitySuccessCallBack = function (res) {\n      console.log('@@@ Release Block Quantity Success CallBack =============', res);\n    };\n\n    _this.releaseBlockQuantityFailureCallBack = function (error) {\n      console.log('@@@ Release Block Quantity Failure CallBack =============', error);\n    };\n\n    _this.checkZipcodeAvailability = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var _this$props;\n\n      var shipping;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this.setState({\n                checkingZipCode: \"checking\"\n              });\n\n              shipping = (_this$props = _this.props) === null || _this$props === void 0 ? void 0 : _this$props.addressData;\n              _context6.next = 4;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.checkZipCodeApiEndPoint + shipping.zip_code\n              });\n\n            case 4:\n              _this.checkZipcodeId = _context6.sent;\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    _this.checkProductAvailability = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.apiMethodTypeGet,\n                endPoint: configJSON.cartListAPiEndPoint + \"/\" + _this.props.cartDetails.id + \"/check_availability\"\n              });\n\n            case 2:\n              _this.checkAvailabilityId = _context7.sent;\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    _this.onConfirmingOrder = function () {\n      var confirVal = window.confirm(\"Are you sure want to place the order?\");\n\n      if (confirVal) {\n        _this.checkZipcodeAvailability();\n      } else {\n        _this.releaseBlockQuantity();\n      }\n    };\n\n    _this.placeOrder = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var _this$state, stripe, elements, cartDetails, token, user, _yield$stripe$createP, paymentMethod, requestBody, headers;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this$state = _this.state, stripe = _this$state.stripe, elements = _this$state.elements;\n              cartDetails = _this.props.cartDetails;\n              token = localStorage.getItem(\"token\");\n              user = JSON.parse(localStorage.getItem(\"user\"));\n              _context8.next = 6;\n              return stripe.createPaymentMethod({\n                type: 'card',\n                // @ts-ignore\n                card: elements.getElement(CardNumberElement)\n              });\n\n            case 6:\n              _yield$stripe$createP = _context8.sent;\n              paymentMethod = _yield$stripe$createP.paymentMethod;\n              requestBody = {\n                data: {\n                  attributes: {\n                    amount: parseFloat(cartDetails === null || cartDetails === void 0 ? void 0 : cartDetails.total),\n                    account_id: user === null || user === void 0 ? void 0 : user.id,\n                    order_id: cartDetails === null || cartDetails === void 0 ? void 0 : cartDetails.id\n                  },\n                  payment_token: paymentMethod === null || paymentMethod === void 0 ? void 0 : paymentMethod.id\n                }\n              };\n              headers = {\n                'Content-Type': 'application/json',\n                token: token\n              };\n\n              _this.setState({\n                paymentMethodData: paymentMethod.id\n              });\n\n              console.log(stripe, \"dPAAAAAAAAAAAAAA\", paymentMethod, \"iiiiiiiiiiiiiiiii\", paymentMethod.id);\n              return _context8.abrupt(\"return\", _this.handleCreateSTrip(requestBody, headers));\n\n            case 13:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    _this.placeConfirmOrder = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              data = {\n                cart_id: _this.state.wholeCartData.id,\n                is_gift: false,\n                schedule_time: \"\"\n              };\n              _context9.next = 3;\n              return _this.apiCall({\n                contentType: configJSON.ApiContentType,\n                method: configJSON.ApiMethodPostType,\n                endPoint: configJSON.placeOrderAPIEndPoint,\n                body: data\n              });\n\n            case 3:\n              _this.placeOrderId = _context9.sent;\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    _this.createStripePaymentSuccess = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(res, token, stripe) {\n        var _result$paymentIntent, result, _result$paymentIntent2, stripeData;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return stripe.confirmPaymentIntent(res.client_secret, {\n                  payment_method: token\n                });\n\n              case 3:\n                result = _context10.sent;\n\n                if ((result === null || result === void 0 ? void 0 : (_result$paymentIntent = result.paymentIntent) === null || _result$paymentIntent === void 0 ? void 0 : _result$paymentIntent.status) === 'succeeded') {\n                  // this.setState({ isFetching: true });\n                  stripeData = {\n                    data: {\n                      stripe_payment_id: token,\n                      payment_intent_id: result === null || result === void 0 ? void 0 : (_result$paymentIntent2 = result.paymentIntent) === null || _result$paymentIntent2 === void 0 ? void 0 : _result$paymentIntent2.id\n                    }\n                  };\n\n                  _this.confirmPaymentSuccess(stripeData);\n                }\n\n                _context10.next = 10;\n                break;\n\n              case 7:\n                _context10.prev = 7;\n                _context10.t0 = _context10[\"catch\"](0);\n                console.log('@@@ Stripe Confirm Payment Error ============', _context10.t0); // this.releaseBlockQuantity();\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[0, 7]]);\n      }));\n\n      return function (_x3, _x4, _x5) {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n\n    _this.confirmPaymentSuccess = function (data) {\n      var token = localStorage.getItem(\"token\");\n      var headers = {\n        'Content-Type': 'application/json',\n        token: token\n      };\n      return _this.handleConfrimStripe(data, headers);\n    };\n\n    _this.handleSubmit = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(event, stripe, elements) {\n        var cartDetails, token;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                cartDetails = _this.props.cartDetails;\n                event.preventDefault();\n                token = localStorage.getItem(\"token\");\n\n                if (!(!stripe || !elements)) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\");\n\n              case 5:\n                _this.setState({\n                  stripe: stripe,\n                  elements: elements,\n                  loading: true\n                }, _this.checkZipcodeAvailability);\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      return function (_x6, _x7, _x8) {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n\n    _this.handleCreateSTrip = function (data, headers) {\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.createStripeAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.stripePaymentPPIEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostType);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.handleConfrimStripe = function (data, headers) {\n      var requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n      _this.confrimStripeAPICallId = requestMessage.messageId;\n      requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.stripeConfirmPaymentAPIEndPoint);\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n      requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypePut);\n      runEngine.sendMessage(requestMessage.id, requestMessage);\n    };\n\n    _this.receive = _this.receive.bind(_assertThisInitialized(_this)); // Customizable Area Start\n\n    _this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n    _this.state = {\n      loading: false\n    }; // Customizable Area End\n\n    runEngine.attachBuildingBlock(_assertThisInitialized(_this), _this.subScribedMessages);\n    return _this;\n  } // async componentDidMount() {\n  // }\n\n\n  _createClass(StripeWebController, [{\n    key: \"componentWillUnmount\",\n    value: function () {\n      var _componentWillUnmount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function componentWillUnmount() {\n        return _componentWillUnmount.apply(this, arguments);\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: \"receive\",\n    value: function () {\n      var _receive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(from, message) {\n        var apiRequestCallId, responseJson, errorReponse, _responseJson$error, _responseJson$data, _responseJson$data$or, _responseJson$data2, _responseJson$data2$o, _responseJson$data3, _responseJson$error2;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                // Customizable Area Start\n                if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n                  apiRequestCallId = message.getData(getName(MessageEnum.RestAPIResponceDataMessage));\n                  responseJson = message.getData(getName(MessageEnum.RestAPIResponceSuccessMessage));\n                  errorReponse = message.getData(getName(MessageEnum.RestAPIResponceErrorMessage));\n\n                  if (apiRequestCallId === this.checkZipcodeId) {\n                    this.setState({\n                      checkingZipCode: \"error\"\n                    });\n\n                    if ((responseJson === null || responseJson === void 0 ? void 0 : responseJson.message) === \"Sorry, currently delivery is not available for this location.\") {\n                      this.setState({\n                        loading: false\n                      });\n                      window.notify([{\n                        message: responseJson === null || responseJson === void 0 ? void 0 : responseJson.message,\n                        type: \"error\"\n                      }]);\n                    } else {\n                      this.checkProductAvailability();\n                    }\n                  } else if (apiRequestCallId === this.checkAvailabilityId) {\n                    if ((responseJson === null || responseJson === void 0 ? void 0 : responseJson.message) === \"All products are available.\") {\n                      this.placeOrder();\n                    } else {\n                      this.setState({\n                        loading: false\n                      });\n                      window.notify([{\n                        message: responseJson === null || responseJson === void 0 ? void 0 : responseJson.errors,\n                        type: \"error\"\n                      }]);\n                    }\n                  } else if (apiRequestCallId === this.createStripeAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        loading: false\n                      });\n                      this.createStripePaymentSuccess(responseJson === null || responseJson === void 0 ? void 0 : responseJson.data, this.state.paymentMethodData, this.state.stripe); // @ts-ignore\n\n                      window.notify([{\n                        type: \"success\",\n                        message: (responseJson === null || responseJson === void 0 ? void 0 : responseJson.message) || 'something went wrong!'\n                      }]);\n                    }\n\n                    if (responseJson && responseJson.error) {\n                      this.setState({\n                        loading: false\n                      });\n                      this.props.history.push(\"/transactionfailed\"); // @ts-ignore\n\n                      window.notify([{\n                        type: \"success\",\n                        message: (responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$error = responseJson.error) === null || _responseJson$error === void 0 ? void 0 : _responseJson$error.message) || 'something went wrong!'\n                      }]);\n                    }\n                  } else if (apiRequestCallId === this.confrimStripeAPICallId) {\n                    if (responseJson && responseJson.data) {\n                      this.setState({\n                        loading: false\n                      });\n                      this.props.history.push({\n                        pathname: '/order-placed',\n                        state: {\n                          orderData: {\n                            order: {\n                              placed_at: (_responseJson$data = responseJson.data) === null || _responseJson$data === void 0 ? void 0 : (_responseJson$data$or = _responseJson$data.order) === null || _responseJson$data$or === void 0 ? void 0 : _responseJson$data$or.placed_at,\n                              total: (_responseJson$data2 = responseJson.data) === null || _responseJson$data2 === void 0 ? void 0 : (_responseJson$data2$o = _responseJson$data2.order) === null || _responseJson$data2$o === void 0 ? void 0 : _responseJson$data2$o.total\n                            }\n                          }\n                        }\n                      });\n                      localStorage.setItem(\"cart_length\", \"0\"); // @ts-ignore\n\n                      window.notify([{\n                        type: \"success\",\n                        message: ((_responseJson$data3 = responseJson.data) === null || _responseJson$data3 === void 0 ? void 0 : _responseJson$data3.message) || \"Payment successfull.\"\n                      }]);\n                    }\n\n                    if (responseJson && responseJson.error) {\n                      this.setState({\n                        loading: false\n                      });\n                      this.props.history.push(\"/transactionfailed\"); // @ts-ignore\n\n                      window.notify([{\n                        type: \"danger\",\n                        message: (responseJson === null || responseJson === void 0 ? void 0 : (_responseJson$error2 = responseJson.error) === null || _responseJson$error2 === void 0 ? void 0 : _responseJson$error2.message) || \"Something went wrong\"\n                      }]);\n                    }\n                  }\n                } // Customizable Area End\n\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function receive(_x9, _x10) {\n        return _receive.apply(this, arguments);\n      }\n\n      return receive;\n    }()\n  }]);\n\n  return StripeWebController;\n}(BlockComponent);\n\nexport { StripeWebController as default };","map":{"version":3,"sources":["/home/lp-greenapex/Desktop/new_BB_BLOCK/freemium87482-350702-react-native/src/packages/blocks/payments/src/StripeWebController.tsx"],"names":["Message","BlockComponent","MessageEnum","getName","CardNumberElement","runEngine","configJSON","require","StripeWebController","props","checkZipcodeId","checkAvailabilityId","releaseBlockId","placeOrderId","createOrderId","getUserProfileApiCallId","releaseBlockQuantityApiCallId","createStripeAPICallId","confrimStripeAPICallId","apiCall","data","contentType","method","endPoint","body","token","localStorage","getItem","header","requestMessage","RestAPIRequestMessage","addData","RestAPIRequestHeaderMessage","JSON","stringify","RestAPIResponceEndPointMessage","RestAPIRequestMethodMessage","RestAPIRequestBodyMessage","sendMessage","id","messageId","getCartHasProduct","setState","isFetching","ApiContentType","apiMethodTypeGet","cartHasProductAPIEndPoint","getCartProductId","getUserProfile","userProfileApiEndPoint","getUserProfileSuccessCallBack","res","profileData","releaseBlockQuantity","toggleIsOpen","apiMethodTypePut","cartListAPiEndPoint","state","wholeCartData","releaseBlockQuantitySuccessCallBack","console","log","releaseBlockQuantityFailureCallBack","error","checkZipcodeAvailability","checkingZipCode","shipping","addressData","checkZipCodeApiEndPoint","zip_code","checkProductAvailability","cartDetails","onConfirmingOrder","confirVal","window","confirm","placeOrder","stripe","elements","user","parse","createPaymentMethod","type","card","getElement","paymentMethod","requestBody","attributes","amount","parseFloat","total","account_id","order_id","payment_token","headers","paymentMethodData","handleCreateSTrip","placeConfirmOrder","cart_id","is_gift","schedule_time","ApiMethodPostType","placeOrderAPIEndPoint","createStripePaymentSuccess","confirmPaymentIntent","client_secret","payment_method","result","paymentIntent","status","stripeData","stripe_payment_id","payment_intent_id","confirmPaymentSuccess","handleConfrimStripe","handleSubmit","event","preventDefault","loading","stripePaymentPPIEndPoint","httpPostType","stripeConfirmPaymentAPIEndPoint","receive","bind","subScribedMessages","RestAPIResponceMessage","attachBuildingBlock","unSubscribeFromMessages","from","message","apiRequestCallId","getData","RestAPIResponceDataMessage","responseJson","RestAPIResponceSuccessMessage","errorReponse","RestAPIResponceErrorMessage","notify","errors","history","push","pathname","orderData","order","placed_at","setItem"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport { IBlock } from \"../../../framework/src/IBlock\";\nimport { Message } from \"../../../framework/src/Message\";\nimport { BlockComponent } from \"../../../framework/src/BlockComponent\";\nimport MessageEnum, {\n  getName\n} from \"../../../framework/src/Messages/MessageEnum\";\nimport {\n  CardNumberElement,\n  CardCvcElement,\n  CardExpiryElement,\n} from '@stripe/react-stripe-js';\nimport { runEngine } from \"../../../framework/src/RunEngine\";\nimport axios from \"axios\";\nexport const configJSON = require(\"./config\");\n\n\nexport interface Props {\n  addressData: any;\n  cartDetails: any;\n  // Customizable Area Start\n  // Customizable Area End\n}\n\ninterface S {\n  // Customizable Area Start\n  checkingZipCode: string;\n  stripe: any;\n  elements: any;\n  loading: boolean;\n  paymentMethodData? : any;\n  // Customizable Area End\n}\n\ninterface SS {\n  id: any;\n}\n\nexport default class StripeWebController extends BlockComponent<\n  Props,\n  S,\n  SS\n> {\n  checkZipcodeId: any;\n  checkAvailabilityId: any;\n  releaseBlockId: any;\n  placeOrderId: any;\n  createOrderId: any;\n  getUserProfileApiCallId: any;\n  releaseBlockQuantityApiCallId: any;\n  createStripeAPICallId: string;\n  confrimStripeAPICallId: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.receive = this.receive.bind(this);\n\n    // Customizable Area Start\n    this.subScribedMessages = [getName(MessageEnum.RestAPIResponceMessage)];\n\n    this.state = {\n      loading: false\n    };\n    // Customizable Area End\n    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);\n  }\n\n  // async componentDidMount() {\n\n  // }\n\n  async componentWillUnmount() {\n    runEngine.unSubscribeFromMessages(this, this.subScribedMessages);\n  }\n\n\n  async receive(from: string, message: Message) {\n    // Customizable Area Start\n\n    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {\n      const apiRequestCallId = message.getData(\n        getName(MessageEnum.RestAPIResponceDataMessage)\n      );\n\n      var responseJson = message.getData(\n        getName(MessageEnum.RestAPIResponceSuccessMessage)\n      );\n\n      var errorReponse = message.getData(\n        getName(MessageEnum.RestAPIResponceErrorMessage)\n      );\n\n      if (apiRequestCallId === this.checkZipcodeId) {\n        this.setState({ checkingZipCode: \"error\" });\n        if (\n          responseJson?.message ===\n          \"Sorry, currently delivery is not available for this location.\"\n        ) {\n          this.setState({ loading: false });\n          window.notify([{ message: responseJson?.message, type: \"error\" }]);\n        } else {\n          this.checkProductAvailability();\n        }\n      }\n      else if (apiRequestCallId === this.checkAvailabilityId) {\n        if (\n          responseJson?.message ===\n          \"All products are available.\"\n        ) {\n          this.placeOrder();\n        } else {\n          this.setState({ loading: false });\n          window.notify([{ message: responseJson?.errors, type: \"error\" }]);\n        }\n      }\n      else if (apiRequestCallId === this.createStripeAPICallId) {\n        if (responseJson && responseJson.data) {\n          this.setState({ loading: false });\n          this.createStripePaymentSuccess(responseJson?.data,this.state.paymentMethodData,this.state.stripe)\n          // @ts-ignore\n          window.notify([{ type: \"success\", message: responseJson?.message || 'something went wrong!' }])\n        }\n        if (responseJson && responseJson.error) {\n          this.setState({ loading: false });\n          this.props.history.push(\"/transactionfailed\");\n          // @ts-ignore\n          window.notify([{ type: \"success\", message: responseJson?.error?.message || 'something went wrong!' }])\n        }\n      }\n      else if(apiRequestCallId === this.confrimStripeAPICallId){\n        if(responseJson && responseJson.data){\n          this.setState({ loading: false });\n          this.props.history.push({\n            pathname: '/order-placed',\n            state: {\n              orderData: {\n                order: {\n                  placed_at: responseJson.data?.order?.placed_at,\n                  total: responseJson.data?.order?.total\n                }\n              }\n            }\n          });\n          localStorage.setItem(\"cart_length\", \"0\");\n          // @ts-ignore\n          window.notify([{ type: \"success\", message: responseJson.data?.message || \"Payment successfull.\" }]);\n        }\n        if(responseJson && responseJson.error){\n          this.setState({ loading: false });\n          this.props.history.push(\"/transactionfailed\");\n          // @ts-ignore\n        window.notify([{ type: \"danger\", message: responseJson?.error?.message || \"Something went wrong\" }])\n        }\n      }\n    }\n    // Customizable Area End\n  }\n\n  apiCall = async (data: any) => {\n    const { contentType, method, endPoint, body } = data;\n    const token = localStorage.getItem(\"token\");\n    const header = {\n      \"Content-Type\": contentType,\n      token\n    };\n    const requestMessage = new Message(\n      getName(MessageEnum.RestAPIRequestMessage)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestHeaderMessage),\n      JSON.stringify(header)\n    );\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIResponceEndPointMessage),\n      endPoint\n    );\n\n    requestMessage.addData(\n      getName(MessageEnum.RestAPIRequestMethodMessage),\n      method\n    );\n    body &&\n      requestMessage.addData(\n        getName(MessageEnum.RestAPIRequestBodyMessage),\n        JSON.stringify(body)\n      );\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n    return requestMessage.messageId;\n  };\n\n  getCartHasProduct = async () => {\n    this.setState({ isFetching: false });\n    this.getCartProductId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint: configJSON.cartHasProductAPIEndPoint\n    });\n  };\n\n  getUserProfile = async () => {\n    this.getUserProfileApiCallId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint: configJSON.userProfileApiEndPoint\n    });\n  };\n\n  getUserProfileSuccessCallBack = async (res: any) => {\n    this.setState({ profileData: res, isFetching: false });\n  };\n\n\n  releaseBlockQuantity = async () => {\n    this.toggleIsOpen();\n\n    this.releaseBlockQuantityApiCallId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypePut,\n      endPoint:\n        configJSON.cartListAPiEndPoint +\n        \"/\" +\n        this.state.wholeCartData.id +\n        \"/release_products\"\n    });\n  };\n\n  releaseBlockQuantitySuccessCallBack = (res: any) => {\n    console.log('@@@ Release Block Quantity Success CallBack =============', res);\n  }\n\n  releaseBlockQuantityFailureCallBack = (error: any) => {\n    console.log('@@@ Release Block Quantity Failure CallBack =============', error);\n  }\n\n  checkZipcodeAvailability = async () => {\n    this.setState({ checkingZipCode: \"checking\" });\n    const shipping = this.props?.addressData;\n    this.checkZipcodeId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint: configJSON.checkZipCodeApiEndPoint + shipping.zip_code\n    });\n  };\n\n  checkProductAvailability = async () => {\n    this.checkAvailabilityId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.apiMethodTypeGet,\n      endPoint:\n        configJSON.cartListAPiEndPoint +\n        \"/\" +\n        this.props.cartDetails.id +\n        \"/check_availability\"\n    });\n  };\n\n\n  onConfirmingOrder = () => {\n    const confirVal = window.confirm(\n      \"Are you sure want to place the order?\");\n\n    if (confirVal) {\n      this.checkZipcodeAvailability()\n    } else {\n      this.releaseBlockQuantity()\n    }\n  };\n\n  placeOrder = async () => {\n    const { stripe, elements } = this.state;\n    const { cartDetails } = this.props;\n    const token = localStorage.getItem(\"token\");\n    const user = JSON.parse(localStorage.getItem(\"user\"))\n\n    const { paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      // @ts-ignore\n      card: elements.getElement(CardNumberElement),\n    });\n\n    const requestBody = {\n      data: {\n        attributes: {\n          amount: parseFloat(cartDetails?.total),\n          account_id: user?.id,\n          order_id: cartDetails?.id\n        },\n        payment_token: paymentMethod?.id\n      }\n    };\n\n    const headers = {\n      'Content-Type': 'application/json',\n      token\n    }\n    this.setState({\n      paymentMethodData : paymentMethod.id\n    });\n\n    console.log(stripe, \"dPAAAAAAAAAAAAAA\", paymentMethod, \"iiiiiiiiiiiiiiiii\", paymentMethod.id)\n    return this.handleCreateSTrip(requestBody,headers);\n  };\n\n  placeConfirmOrder = async () => {\n    const data = {\n      cart_id: this.state.wholeCartData.id,\n      is_gift: false,\n      schedule_time: \"\"\n    };\n    this.placeOrderId = await this.apiCall({\n      contentType: configJSON.ApiContentType,\n      method: configJSON.ApiMethodPostType,\n      endPoint: configJSON.placeOrderAPIEndPoint,\n      body: data\n    });\n  };\n\n  createStripePaymentSuccess = async (res: any, token: any, stripe: any) => {\n    try {\n      // @ts-ignore\n      const result = await stripe.confirmPaymentIntent(res.client_secret, { payment_method: token })\n      if (result?.paymentIntent?.status === 'succeeded') {\n        // this.setState({ isFetching: true });\n        let stripeData = {\n          data: {\n            stripe_payment_id: token,\n            payment_intent_id: result?.paymentIntent?.id,\n          }\n        };\n        this.confirmPaymentSuccess(stripeData);\n      }\n    } catch (e) {\n      console.log('@@@ Stripe Confirm Payment Error ============', e);\n      // this.releaseBlockQuantity();\n    }\n  }\n\n  confirmPaymentSuccess = (data: any) => {\n    const token = localStorage.getItem(\"token\");\n    const headers = {\n      'Content-Type': 'application/json',\n      token\n    };\n    return this.handleConfrimStripe(data,headers);\n  }\n\n  handleSubmit = async (event: any, stripe, elements) => {\n    const { cartDetails } = this.props;\n    event.preventDefault();\n    const token = localStorage.getItem(\"token\");\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    this.setState({ stripe, elements, loading: true }, this.checkZipcodeAvailability);\n  };\n  handleCreateSTrip = (data: any, headers: any) => {\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.createStripeAPICallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.stripePaymentPPIEndPoint);\n\n\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.httpPostType);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n\n  handleConfrimStripe = (data: any, headers: any) => {\n    const requestMessage = new Message(getName(MessageEnum.RestAPIRequestMessage));\n    this.confrimStripeAPICallId = requestMessage.messageId;\n    requestMessage.addData(getName(MessageEnum.RestAPIResponceEndPointMessage), configJSON.stripeConfirmPaymentAPIEndPoint);\n\n\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestHeaderMessage), JSON.stringify(headers));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestBodyMessage), JSON.stringify(data));\n    requestMessage.addData(getName(MessageEnum.RestAPIRequestMethodMessage), configJSON.apiMethodTypePut);\n\n    runEngine.sendMessage(requestMessage.id, requestMessage);\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}