import { IBlock } from "../../../framework/src/IBlock";
import { Message } from "../../../framework/src/Message";
import { BlockComponent } from "../../../framework/src/BlockComponent";
import MessageEnum, {
  getName
} from "../../../framework/src/Messages/MessageEnum";
import { runEngine } from "../../../framework/src/RunEngine";
import StorageProvider from '../../../framework/src/StorageProvider';
import { BackHandler } from 'react-native';
// Customizable Area Start
// Customizable Area End

export const configJSON = require("./config");

export interface Props {
  navigation: any;
  id: string;
}

interface S {
  // Customizable Area Start
  token: string;
  data: any;
  productList: any,
  isSortByEnabled: boolean,
  showSortByModal: boolean,
  filterSelection: any,
  filterQueryParams: string,
  lastFilterQuery: string,
  noProductFound: boolean,
  customErrorModal: boolean,
  customErrorMessage: any,
  isFetching: boolean,
  screenName: string;
  cartProduct: any;
  cartLength: number;
  isShowError: boolean;
  // Customizable Area End
}

interface SS {
  id: any;
}

export default class FilteritemsController extends BlockComponent<
  Props,
  S,
  SS
> {
  getProductApiCallId: any;
  applyFilterApiCallId: any;
  addToWishlistApiCallId: any;
  removeFromWishlistApiCallId: any;
  getCartProductId: any;
  addToCartApiCallId: any;
  getCartListId: any;
  constructor(props: Props) {
    super(props);
    this.receive = this.receive.bind(this);
    // Customizable Area Start
    this.subScribedMessages = [
      getName(MessageEnum.RestAPIResponceMessage),
      getName(MessageEnum.SessionSaveMessage),
      getName(MessageEnum.SessionResponseMessage),
    ];

    this.state = {
      token: "",
      data: "",
      productList: [],
      showSortByModal: false,
      isShowError: false,
      isSortByEnabled: false,
      filterSelection:
        [
          {
            isSelected: false,
          },
          {
            isSelected: false,
          },
          {
            isSelected: false,
          },
          {
            isSelected: false,
          }
        ],
      filterQueryParams: "",
      lastFilterQuery: "",
      noProductFound: false,
      customErrorModal: false,
      customErrorMessage: "",
      isFetching: false,
      screenName: "",
      cartProduct: null,
      cartLength: 0,
    };
    // Customizable Area End
    runEngine.attachBuildingBlock(this as IBlock, this.subScribedMessages);
  }

  async componentDidMount() {
    BackHandler.addEventListener('hardwareBackPress', this.handleBackButtonClick);
    this.getProductList();
    this.getCartHasProduct();
    this.getCartList();
    const { state } = this.props.navigation;
    state.params && state.params.screenName
      ? this.setState({ screenName: state.params.screenName })
      : null;
  }

  async componentWillUnmount() {
    BackHandler.removeEventListener(
      "hardwareBackPress",
      this.handleBackButtonClick
    );
    runEngine.unSubscribeFromMessages(this, this.subScribedMessages);
  }

  handleBackButtonClick = () => {
    this.props.navigation.goBack();
    return true;
  };

  apiCall = async (data: any) => {
    const { contentType, method, endPoint, body } = data;
    const token = (await StorageProvider.get("Userdata")) || "";
    const header = {
      "Content-Type": contentType,
      token
    };
    const requestMessage = new Message(
      getName(MessageEnum.RestAPIRequestMessage)
    );
    requestMessage.addData(
      getName(MessageEnum.RestAPIRequestHeaderMessage),
      JSON.stringify(header)
    );
    requestMessage.addData(
      getName(MessageEnum.RestAPIResponceEndPointMessage),
      endPoint
    );

    requestMessage.addData(
      getName(MessageEnum.RestAPIRequestMethodMessage),
      method
    );
    body &&
      requestMessage.addData(
        getName(MessageEnum.RestAPIRequestBodyMessage),
        JSON.stringify(body)
      );
    runEngine.sendMessage(requestMessage.id, requestMessage);
    return requestMessage.messageId;
  };

  async receive(from: string, message: Message) {
    // Customizable Area Start
    if (getName(MessageEnum.RestAPIResponceMessage) === message.id) {
      const apiRequestCallId = message.getData(
        getName(MessageEnum.RestAPIResponceDataMessage)
      );

      var responseJson = message.getData(
        getName(MessageEnum.RestAPIResponceSuccessMessage)
      );

      var errorReponse = message.getData(
        getName(MessageEnum.RestAPIResponceErrorMessage)
      );
      if (responseJson && responseJson?.data) {
        if (apiRequestCallId === this.getProductApiCallId) {
          const { productType } = this.props.navigation.state.params;
          let array = productType === 'Recommended' ? responseJson?.data.recommended_products.data : responseJson?.data?.catalogue.data;
          if (productType === 'Recommended') {
            this.setState({ productList: array, noProductFound: responseJson?.data.recommended_products.length === 0 ? true : false, isFetching: false });
          } else {
            this.setState({ productList: array, noProductFound: false, isFetching: false });
          }
        }
        else if (apiRequestCallId === this.applyFilterApiCallId) {
          if (responseJson?.data.length > 0) {
            this.setState({ productList: responseJson?.data, noProductFound: false, isFetching: false })
          }
          else {
            this.setState({ productList: responseJson?.data, noProductFound: true, isFetching: false })
          }
        }
        else if (apiRequestCallId === this.addToWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: false, customErrorMessage: responseJson.message }, () => {
            this.getProductList();
          });
        }
        else if (apiRequestCallId === this.removeFromWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: responseJson.message }, () => {
            this.getProductList();
          })
        }
        else if (apiRequestCallId === this.getCartProductId) {
          let array = responseJson?.data;
          this.setState({ cartProduct: array, isFetching: false });
        }
        else if (apiRequestCallId === this.addToCartApiCallId) {
          this.getCartHasProduct();
          this.setState({ isFetching: false });
        }
        else if (apiRequestCallId === this.getCartListId) {
          let array = responseJson?.data;
          this.setState({ cartLength: array.length, isFetching: false });
        }

      } else if (responseJson?.message) {
        if (apiRequestCallId === this.getProductApiCallId) {
          this.setState({ noProductFound: true, isFetching: false });
        } else if (apiRequestCallId === this.applyFilterApiCallId) {
          this.setState({ noProductFound: true, isFetching: false });
        } else if (apiRequestCallId === this.addToWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: false, customErrorMessage: responseJson.message }, () => {
            this.getProductList();
          })
        }
        else if (apiRequestCallId === this.removeFromWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: false, customErrorMessage: responseJson.message }, () => {
            this.getProductList();
          })
        }
        else if (apiRequestCallId === this.getCartProductId) {
          this.setState({ isFetching: false })
        }
        else if (apiRequestCallId === this.addToCartApiCallId) {
          this.setState({ isFetching: false });
        }
        else if (apiRequestCallId === this.getCartListId) {
          this.setState({ isFetching: false })
        }
      } else if (responseJson?.errors) {
        if (apiRequestCallId === this.getProductApiCallId) {
          this.setState({ noProductFound: true, isFetching: false });
        } else if (apiRequestCallId === this.applyFilterApiCallId) {
          this.setState({ noProductFound: true, isFetching: false });
        } else if (apiRequestCallId === this.addToWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: responseJson.errors })
        }
        else if (apiRequestCallId === this.removeFromWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: responseJson.errors })
        }
        else if (apiRequestCallId === this.getCartProductId) {
          this.setState({ isFetching: false })
        }
        else if (apiRequestCallId === this.addToCartApiCallId) {

          this.setState({ isFetching: false });
        }
        else if (apiRequestCallId === this.getCartListId) {
          this.setState({ isFetching: false })
        }
      } else if (errorReponse) {
        if (apiRequestCallId === this.getProductApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: errorReponse })
        } else if (apiRequestCallId === this.applyFilterApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: errorReponse })
        } else if (apiRequestCallId === this.addToWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: errorReponse })
        }
        else if (apiRequestCallId === this.removeFromWishlistApiCallId) {
          this.setState({ customErrorModal: true, isFetching: false, isShowError: true, customErrorMessage: errorReponse })
        }
        else if (apiRequestCallId === this.getCartProductId) {
          this.setState({ isFetching: false })
        }
        else if (apiRequestCallId === this.addToCartApiCallId) {
          this.setState({ isFetching: false });
        }
        else if (apiRequestCallId === this.getCartListId) {
          this.setState({ isFetching: false })
        }
      }
    }

    // Customizable Area End
  }

  getProductList = async () => {
    const token = await StorageProvider.get("Userdata");
    this.setState({ token: token });
    if (this.props.navigation.state.params && this.props.navigation.state.params.isFromExplore) {
      this.getFilterDataList();
    } else {
      this.getListRequest();
    }
  }

  getFilterDataList = () => {
    let filterQueryParams = "";
    let categoryID = "";
    let sub_category_id: "";
    let catalogue_id = "";
    let name = "";
    if (this.props.navigation.state.params.isFromCategory && this.props.navigation.state.params.isFromSubcategory) {
      categoryID = this.props.navigation.state.params.subCategoryData.id;
      filterQueryParams =
        filterQueryParams + `&q[sub_category_id][]=${categoryID}`;
    } else if (this.props.navigation.state.params.isFromCategory) {
      categoryID = this.props.navigation.state.params.categoryData.id;
      filterQueryParams =
        filterQueryParams + `&q[category_id][]=${categoryID}`;
    } else if (this.props.navigation.state.params.isFromSearch) {
      if (this.props.navigation.state.params.categoryData?.attributes?.type === "Category") {
        categoryID = this.props.navigation.state.params.categoryData
          .attributes.id;
        name = this.props.navigation.state.params.categoryData
          .attributes.name;
        filterQueryParams =
          filterQueryParams +
          `&q[name]=${name}&q[category_id][]=${categoryID}`;
      } else if (this.props.navigation.state.params.categoryData?.attributes?.type === "SubCategory") {
        sub_category_id = this.props.navigation.state.params.categoryData
          .attributes.id;
        name = this.props.navigation.state.params.categoryData
          .attributes.name;
        filterQueryParams =
          filterQueryParams +
          `&q[name]=${name}&q[sub_category_id][]=${sub_category_id}`;
      } else if (this.props.navigation.state.params.categoryData?.attributes?.type === "Catalogue") {
        name = this.props.navigation.state.params.categoryData
          .attributes.name;
        filterQueryParams =
          filterQueryParams +
          `&q[name]=${name}`;
      } else {
        categoryID = this.props.navigation.state.params.categoryData.attributes
          .category_id;
        sub_category_id = this.props.navigation.state.params.categoryData
          .attributes.sub_category_id;
        catalogue_id = this.props.navigation.state.params.categoryData
          .attributes.id;
        filterQueryParams =
          filterQueryParams +
          `&q[category_id][]=${categoryID}&q[sub_category_id][]=${sub_category_id}`;
      }

    } else if (this.props.navigation.state.params.isFromRecentSearch) {
      if (this.props.navigation.state.params.categoryData.class_name === "SubCategory") {
        sub_category_id = this.props.navigation.state.params.categoryData
          .class_id;
        name = this.props.navigation.state.params.categoryData.name;
        filterQueryParams =
          filterQueryParams +
          `&q[name]=${name}&q[sub_category_id][]=${sub_category_id}`;
      }
      else if (this.props.navigation.state.params.categoryData.class_name === "Category") {
        categoryID = this.props.navigation.state.params.categoryData
          .class_id;
        name = this.props.navigation.state.params.categoryData.name;
        filterQueryParams =
          filterQueryParams +
          `&q[name]=${name}&q[category_id][]=${categoryID}`;
      } else {
        name = this.props.navigation.state.params.categoryData.name;
        filterQueryParams =
          filterQueryParams +
          `&q[name]=${name}`;
      }
    } else {
      name = this.props.navigation.state.params.categoryData.name;
      filterQueryParams =
        filterQueryParams +
        `&q[name]=${name}`;
    }
    this.setState({
      isSortByEnabled: true,
      filterQueryParams: filterQueryParams
    });
    this.applyFilters(filterQueryParams);
  }

  onPressFilter = (filterQueryParams: any) => {
    let categoryID = ""
    this.clearSortBy();
    this.setState({ productList: [] }, () => {
      if (this.props.navigation.state.params.categoryData) {
        if (this.props.navigation.state.params.isFromCategory && this.props.navigation.state.params.isFromSubcategory) {
          categoryID = this.props.navigation.state.params.subCategoryData.id;
          filterQueryParams = filterQueryParams + `&q[sub_category_id][]=${categoryID}`
        }
        else if (this.props.navigation.state.params.isFromCategory) {
          categoryID = this.props.navigation.state.params.categoryData.id;
          filterQueryParams = filterQueryParams + `&q[category_id][]=${categoryID}`
        }
      }
      if(this.props.navigation.state.params.productType) {
        let productType = this.props.navigation.state.params.productType;
        filterQueryParams = filterQueryParams + `&sort[order_field]=${productType.toLowerCase()}`
      }
      let updatedFilterParams = filterQueryParams;
      this.setState({ filterQueryParams: updatedFilterParams, lastFilterQuery: updatedFilterParams, });
      this.applyFilters(updatedFilterParams)
    })
  }
  clearSortBy = () => {
    let localFilterSelection = this.state.filterSelection;
    let filterIndex = localFilterSelection.findIndex((item: any) => item.isSelected === true);
    if (filterIndex >= 0)
      localFilterSelection[filterIndex].isSelected = false;
    this.setState({ filterSelection: localFilterSelection });
  }

  navigateToFilter = () => {

    let filterData = this.props.navigation.state.params && this.props.navigation.state.params.filterData ? this.props.navigation.state.params.filterData : []
    if (this.props.navigation.state.params && this.props.navigation.state.params.isFromExplore) {
      const category_id = this.props.navigation.state.params.isFromSubcategory ? this.props.navigation.state.params.subCategoryData.id : this.props.navigation.state.params.categoryData.id;
      this.props.navigation.navigate('Filteroptions',
        {
          onPressFilter: (filterQueryParams: any) => this.onPressFilter(filterQueryParams),
          filterQueryParams: this.state.filterQueryParams,
          filterData: filterData,
          isFromExplore: this.props.navigation.state.params.isFromExplore,
          categoryID: category_id,
          isFromSubcategory: this.props.navigation.state.params.isFromSubcategory,
          subCategoryData: this.props.navigation.state.params.subCategoryData,
          categoryData: this.props.navigation.state.params.categoryData
        })
    } else {
      this.props.navigation.navigate('Filteroptions',
        {
          onPressFilter: (filterQueryParams: any) => this.onPressFilter(filterQueryParams),
          filterData: filterData,

        })
    }
  }

  onSelectFilter = (itemIndex: number) => {
    let localFilterSelection = this.state.filterSelection;
    let filterIndex = localFilterSelection.findIndex((item: any) => item.isSelected === true);
    localFilterSelection[itemIndex].isSelected = !localFilterSelection[itemIndex].isSelected;
    if (filterIndex >= 0)
      localFilterSelection[filterIndex].isSelected = false;
    this.setState({ filterSelection: localFilterSelection }, () => {
      this.setState({ showSortByModal: false }, () => {
        this.onApplySortByFilter();
      })
    });
  }

  onApplySortByFilter = () => {
    const { state } = this.props.navigation;
    let filterIndex = this.state.filterSelection.findIndex((item: any) => item.isSelected === true);
    let filterQueryParams = '';
    let categoryID = 1;
    let categoryData = state.params ? state.params.categoryData : null;
    let isFromRecentSearch = state.params ? state.params.isFromRecentSearch : null;
    let isFromSearch = state.params ? state.params.isFromSearch : null;
    let isFromFilter = state.params ? state.params.isFromFilter : null;
    if (filterIndex !== -1) {
      this.setState({ productList: [] }, () => {
        filterQueryParams = this.getSoryByFilterParams(filterIndex);
        if (categoryData) {
          if(!isFromRecentSearch && !isFromSearch) {
            if (this.props.navigation.state.params.isFromCategory && this.props.navigation.state.params.isFromSubcategory) {
              categoryID = this.props.navigation.state.params.subCategoryData.id;
              filterQueryParams = filterQueryParams + `&q[sub_category_id][]=${categoryID}`
            }
            else if (this.props.navigation.state.params.isFromCategory) {
              categoryID = this.props.navigation.state.params.categoryData.id;
              filterQueryParams = filterQueryParams + `&q[category_id][]=${categoryID}`
            }
          } else if (isFromSearch) {
            if (this.props.navigation.state.params.isFromSubcategory) {
              categoryID = this.props.navigation.state.params.subCategoryData.id;
              filterQueryParams = filterQueryParams + `&q[sub_category_id][]=${categoryID}`
            } else {
              categoryID = this.props.navigation.state.params.categoryData.id;
              filterQueryParams = filterQueryParams + `&q[category_id][]=${categoryID}`
            }
          } else {
            if (this.props.navigation.state.params.isFromSubcategory) {
              categoryID = this.props.navigation.state.params.subCategoryData.class_id;
              filterQueryParams = filterQueryParams + `&q[sub_category_id][]=${categoryID}`
            } else {
              categoryID = this.props.navigation.state.params.categoryData.class_id;
              filterQueryParams = filterQueryParams + `&q[category_id][]=${categoryID}`
            }
          }
        } else {
          if (this.state.filterQueryParams !== '' && isFromFilter)
            filterQueryParams = filterQueryParams + `&${this.state.lastFilterQuery}`

          if(this.props.navigation.state.params.productType) {
            let productType = this.props.navigation.state.params.productType;
            filterQueryParams = filterQueryParams + `&sort[order_field]=${productType.toLowerCase()}`
          }
        }
        this.setState({ isSortByEnabled: true, filterQueryParams: filterQueryParams });
        this.applyFilters(filterQueryParams)
      });
    } else {
    }
  }
  getSoryByFilterParams = (itemIndex: number) => {
    let filterQueryParams = '';
    switch (itemIndex) {
      case 0:
        filterQueryParams = 'sort[order_by]=price&sort[direction]=asc'
        break;
      case 1:
        filterQueryParams = 'sort[order_by]=price&sort[direction]=desc'
        break;
      case 2:
        filterQueryParams = 'sort[order_by]=created_at&sort[direction]=desc'
        break;
      case 3:
        filterQueryParams = 'sort[order_by]=sold&sort[direction]=desc'
        break;
      default:
        break;
    }
    return filterQueryParams;
  }

  addToWishlist = async (id: any) => {
    this.setState({ isFetching: true })

    const httpBody = {
      catalogue_id: id
    };
    this.addToWishlistApiCallId = await this.apiCall({
      contentType: configJSON.productApiContentType,
      method: configJSON.apiMethodTypePost,
      endPoint:
        configJSON.addToWishlistApiEndPoint,
      body: httpBody
    });
  };

  removeFromWishlist = async (id: any) => {
    this.setState({ isFetching: true })
    this.removeFromWishlistApiCallId = await this.apiCall({
      contentType: configJSON.productApiContentType,
      method: configJSON.DeleteMethodType,
      endPoint:
        configJSON.addToWishlistApiEndPoint + "/remove_catalogue/" + id
    });
  }

  onHeartPress = (item: any) => {
    item.attributes?.wishlisted ? this.removeFromWishlist(item.id) : this.addToWishlist(item.id)
  };

  getListRequest = async () => {
    this.setState({ isFetching: true });
    const { productType } = this.props.navigation.state.params
    this.getProductApiCallId = await this.apiCall({
      contentType: configJSON.productApiContentType,
      method: configJSON.apiMethodTypeGet,
      endPoint: productType ? `${configJSON.productAPiEndPoint}?${productType.toLowerCase()}=true` : configJSON.productAPiEndPoint
    });
  };

  applyFilters = async (url: string) => {
    this.setState({ isFetching: true });
    this.applyFilterApiCallId = await this.apiCall({
      contentType: configJSON.productApiContentType,
      method: configJSON.apiMethodTypeGet,
      endPoint: configJSON.cataloguesAPiEndPoint + url
    });
    console.log('applyFilterApiCallId', this.applyFilterApiCallId);
    console.log('url', url);
  };

  addToCart = async (item: any) => {
    const data = this.state.cartProduct;
    const httpBody = {
      catalogue_id: item.item.id,
      catalogue_variant_id: item.item.attributes.catalogue_variants[0].id,
      quantity: 1
    };

    this.setState({ isFetching: true });
    if (data.has_cart_product) {
      this.addToCartApiCallId = await this.apiCall({
        contentType: configJSON.productApiContentType,
        method: configJSON.apiMethodTypePut,
        endPoint: configJSON.addToCartApiEndPoint + data.order_id + '/add_item',
        body: httpBody
      })
    } else {
      this.addToCartApiCallId = await this.apiCall({
        contentType: configJSON.productApiContentType,
        method: configJSON.apiMethodTypePost,
        endPoint: configJSON.addToCartApiEndPoint,
        body: httpBody
      })
    }
  }

  getCartHasProduct = async () => {
    this.setState({ isFetching: true });
    this.getCartProductId = await this.apiCall({
      contentType: configJSON.productApiContentType,
      method: configJSON.apiMethodTypeGet,
      endPoint: configJSON.cartHasProductAPIEndPoint
    })
  }

  getCartList = async () => {
    this.getCartListId = await this.apiCall({
      contentType: configJSON.productApiContentType,
      method: configJSON.apiMethodTypeGet,
      endPoint: configJSON.getCartApiEndPoint
    })
  }
}
